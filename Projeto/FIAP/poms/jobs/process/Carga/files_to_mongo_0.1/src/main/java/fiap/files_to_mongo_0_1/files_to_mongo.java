// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fiap.files_to_mongo_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: files_to_mongo Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class files_to_mongo implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "files_to_mongo";
	private final String projectName = "FIAP";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					files_to_mongo.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(files_to_mongo.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMongoDBOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMongoDBOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMongoDBOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMongoDBOutput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMongoDBOutput_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMongoDBOutput_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_6_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_FIAP_files_to_mongo = new byte[0];
		static byte[] commonByteArray_FIAP_files_to_mongo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String DEPARTMENT_ID;

		public String getDEPARTMENT_ID() {
			return this.DEPARTMENT_ID;
		}

		public String DEPARTMENT_NAME;

		public String getDEPARTMENT_NAME() {
			return this.DEPARTMENT_NAME;
		}

		public String MANAGER_ID;

		public String getMANAGER_ID() {
			return this.MANAGER_ID;
		}

		public String LOCATION_ID;

		public String getLOCATION_ID() {
			return this.LOCATION_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.DEPARTMENT_ID == null) ? 0
								: this.DEPARTMENT_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.DEPARTMENT_ID == null) {
				if (other.DEPARTMENT_ID != null)
					return false;

			} else if (!this.DEPARTMENT_ID.equals(other.DEPARTMENT_ID))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.DEPARTMENT_ID = this.DEPARTMENT_ID;
			other.DEPARTMENT_NAME = this.DEPARTMENT_NAME;
			other.MANAGER_ID = this.MANAGER_ID;
			other.LOCATION_ID = this.LOCATION_ID;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.DEPARTMENT_ID = this.DEPARTMENT_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_files_to_mongo.length) {
					if (length < 1024
							&& commonByteArray_FIAP_files_to_mongo.length == 0) {
						commonByteArray_FIAP_files_to_mongo = new byte[1024];
					} else {
						commonByteArray_FIAP_files_to_mongo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_files_to_mongo, 0, length);
				strReturn = new String(commonByteArray_FIAP_files_to_mongo, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_files_to_mongo) {

				try {

					int length = 0;

					this.DEPARTMENT_ID = readString(dis);

					this.DEPARTMENT_NAME = readString(dis);

					this.MANAGER_ID = readString(dis);

					this.LOCATION_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DEPARTMENT_ID, dos);

				// String

				writeString(this.DEPARTMENT_NAME, dos);

				// String

				writeString(this.MANAGER_ID, dos);

				// String

				writeString(this.LOCATION_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DEPARTMENT_ID=" + DEPARTMENT_ID);
			sb.append(",DEPARTMENT_NAME=" + DEPARTMENT_NAME);
			sb.append(",MANAGER_ID=" + MANAGER_ID);
			sb.append(",LOCATION_ID=" + LOCATION_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DEPARTMENT_ID,
					other.DEPARTMENT_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_FIAP_files_to_mongo = new byte[0];
		static byte[] commonByteArray_FIAP_files_to_mongo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String DEPARTMENT_ID;

		public String getDEPARTMENT_ID() {
			return this.DEPARTMENT_ID;
		}

		public String DEPARTMENT_NAME;

		public String getDEPARTMENT_NAME() {
			return this.DEPARTMENT_NAME;
		}

		public String MANAGER_ID;

		public String getMANAGER_ID() {
			return this.MANAGER_ID;
		}

		public String LOCATION_ID;

		public String getLOCATION_ID() {
			return this.LOCATION_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.DEPARTMENT_ID == null) ? 0
								: this.DEPARTMENT_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.DEPARTMENT_ID == null) {
				if (other.DEPARTMENT_ID != null)
					return false;

			} else if (!this.DEPARTMENT_ID.equals(other.DEPARTMENT_ID))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.DEPARTMENT_ID = this.DEPARTMENT_ID;
			other.DEPARTMENT_NAME = this.DEPARTMENT_NAME;
			other.MANAGER_ID = this.MANAGER_ID;
			other.LOCATION_ID = this.LOCATION_ID;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.DEPARTMENT_ID = this.DEPARTMENT_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_files_to_mongo.length) {
					if (length < 1024
							&& commonByteArray_FIAP_files_to_mongo.length == 0) {
						commonByteArray_FIAP_files_to_mongo = new byte[1024];
					} else {
						commonByteArray_FIAP_files_to_mongo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_files_to_mongo, 0, length);
				strReturn = new String(commonByteArray_FIAP_files_to_mongo, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_files_to_mongo) {

				try {

					int length = 0;

					this.DEPARTMENT_ID = readString(dis);

					this.DEPARTMENT_NAME = readString(dis);

					this.MANAGER_ID = readString(dis);

					this.LOCATION_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.DEPARTMENT_ID, dos);

				// String

				writeString(this.DEPARTMENT_NAME, dos);

				// String

				writeString(this.MANAGER_ID, dos);

				// String

				writeString(this.LOCATION_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DEPARTMENT_ID=" + DEPARTMENT_ID);
			sb.append(",DEPARTMENT_NAME=" + DEPARTMENT_NAME);
			sb.append(",MANAGER_ID=" + MANAGER_ID);
			sb.append(",LOCATION_ID=" + LOCATION_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DEPARTMENT_ID,
					other.DEPARTMENT_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tMongoDBOutput_1 begin ] start
				 */

				ok_Hash.put("tMongoDBOutput_1", false);
				start_Hash.put("tMongoDBOutput_1", System.currentTimeMillis());

				currentComponent = "tMongoDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tMongoDBOutput_1 = 0;

				int nb_line_tMongoDBOutput_1 = 0;

				class DBObjectUtil_tMongoDBOutput_1 {

					private com.mongodb.BasicDBObject object = null;

					// Put value to embedded document
					// If have no embedded document, put the value to root
					// document
					public void put(String parentNode, String curentName,
							Object value) {
						if (parentNode == null || "".equals(parentNode)) {
							object.put(curentName, value);
						} else {
							String objNames[] = parentNode.split("\\.");
							com.mongodb.BasicDBObject lastNode = getParentNode(
									parentNode, objNames.length - 1);
							lastNode.put(curentName, value);
							com.mongodb.BasicDBObject parenttNode = null;
							for (int i = objNames.length - 1; i >= 0; i--) {
								parenttNode = getParentNode(parentNode, i - 1);
								parenttNode.put(objNames[i], lastNode);
								lastNode = (com.mongodb.BasicDBObject) parenttNode
										.clone();
							}
							object = lastNode;
						}
					}

					// Get node(embedded document) by path configuration
					public com.mongodb.BasicDBObject getParentNode(
							String parentNode, int index) {
						com.mongodb.BasicDBObject basicDBObject = object;
						if (parentNode == null || "".equals(parentNode)) {
							return object;
						} else {
							String objNames[] = parentNode.split("\\.");
							for (int i = 0; i <= index; i++) {
								basicDBObject = (com.mongodb.BasicDBObject) basicDBObject
										.get(objNames[i]);
								if (basicDBObject == null) {
									basicDBObject = new com.mongodb.BasicDBObject();
									return basicDBObject;
								}
								if (i == index) {
									break;
								}
							}
							return basicDBObject;
						}
					}

					public void putkeyNode(String parentNode,
							String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode)
								|| ".".equals(parentNode)) {
							put(parentNode, curentName, value);
						} else {
							put("", parentNode + "." + curentName, value);
						}
					}

					public com.mongodb.BasicDBObject getObject() {
						return this.object;
					}

					public void setObject(com.mongodb.BasicDBObject object) {
						this.object = object;
					}

				}

				DBObjectUtil_tMongoDBOutput_1 updateObjectUtil_tMongoDBOutput_1 = new DBObjectUtil_tMongoDBOutput_1();
				DBObjectUtil_tMongoDBOutput_1 queryObjectUtil_tMongoDBOutput_1 = new DBObjectUtil_tMongoDBOutput_1();
				java.util.Map<String, String> pathMap_tMongoDBOutput_1 = new java.util.HashMap<String, String>();
				com.mongodb.Mongo mongo_tMongoDBOutput_1 = null;
				com.mongodb.DB db_tMongoDBOutput_1 = null;

				pathMap_tMongoDBOutput_1.put("DEPARTMENT_ID", "");

				pathMap_tMongoDBOutput_1.put("DEPARTMENT_NAME", "");

				pathMap_tMongoDBOutput_1.put("MANAGER_ID", "");

				pathMap_tMongoDBOutput_1.put("LOCATION_ID", "");

				java.util.logging.Logger.getLogger("org.mongodb.driver")
						.setLevel(java.util.logging.Level.SEVERE);
				// Empty client options
				com.mongodb.MongoClientOptions clientOptions_tMongoDBOutput_1 = new com.mongodb.MongoClientOptions.Builder()
						.build();
				// Empty client credentials list
				java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBOutput_1 = new java.util.ArrayList<com.mongodb.MongoCredential>();

				com.mongodb.ServerAddress serverAddress_tMongoDBOutput_1 = new com.mongodb.ServerAddress(
						"localhost", 27017);
				mongo_tMongoDBOutput_1 = new com.mongodb.MongoClient(
						serverAddress_tMongoDBOutput_1,
						mongoCredentialList_tMongoDBOutput_1,
						clientOptions_tMongoDBOutput_1);
				resourceMap.put("mongo_tMongoDBOutput_1",
						mongo_tMongoDBOutput_1);
				db_tMongoDBOutput_1 = mongo_tMongoDBOutput_1
						.getDB("mongobands");

				com.mongodb.DBCollection coll_tMongoDBOutput_1 = db_tMongoDBOutput_1
						.getCollection("department");

				/**
				 * [tMongoDBOutput_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "/Applications/Talend/workspace/departments_bkp_20190916.zip";
					java.util.zip.ZipInputStream zis_tFileInputDelimited_1 = null;
					try {
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
							zis_tFileInputDelimited_1 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											(java.io.InputStream) filename_tFileInputDelimited_1));
						} else {
							zis_tFileInputDelimited_1 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											new java.io.FileInputStream(
													String.valueOf(filename_tFileInputDelimited_1))));
						}
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					java.util.zip.ZipEntry entry_tFileInputDelimited_1 = null;

					while (true) {
						try {
							entry_tFileInputDelimited_1 = zis_tFileInputDelimited_1
									.getNextEntry();
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());
							break;

						}
						if (entry_tFileInputDelimited_1 == null) {
							break;
						}
						if (entry_tFileInputDelimited_1.isDirectory()) { // directory
							continue;
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
									zis_tFileInputDelimited_1, "ISO-8859-15",
									"|", "\n", true, 1, 0, -1, -1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_1 != null
								&& fid_tFileInputDelimited_1.nextRecord()) {
							rowstate_tFileInputDelimited_1.reset();

							row1 = null;

							boolean whetherReject_tFileInputDelimited_1 = false;
							row1 = new row1Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_1 = 0;

								columnIndexWithD_tFileInputDelimited_1 = 0;

								row1.DEPARTMENT_ID = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 1;

								row1.DEPARTMENT_NAME = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 2;

								row1.MANAGER_ID = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								columnIndexWithD_tFileInputDelimited_1 = 3;

								row1.LOCATION_ID = fid_tFileInputDelimited_1
										.get(columnIndexWithD_tFileInputDelimited_1);

								if (rowstate_tFileInputDelimited_1
										.getException() != null) {
									throw rowstate_tFileInputDelimited_1
											.getException();
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_1 = true;

								System.err.println(e.getMessage());
								row1 = null;

							}

							/**
							 * [tFileInputDelimited_1 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_1 main ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							tos_count_tFileInputDelimited_1++;

							/**
							 * [tFileInputDelimited_1 main ] stop
							 */

							/**
							 * [tFileInputDelimited_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							/**
							 * [tFileInputDelimited_1 process_data_begin ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tJavaRow_1 main ] start
								 */

								currentComponent = "tJavaRow_1";

								// row1
								// row1

								if (execStat) {
									runStat.updateStatOnConnection("row1"
											+ iterateId, 1, 1);
								}

								// Code generated according to input schema and
								// output schema
								row2.DEPARTMENT_ID = row1.DEPARTMENT_ID;
								row2.DEPARTMENT_NAME = row1.DEPARTMENT_NAME;
								row2.MANAGER_ID = row1.MANAGER_ID;
								row2.LOCATION_ID = row1.LOCATION_ID;

								nb_line_tJavaRow_1++;

								tos_count_tJavaRow_1++;

								/**
								 * [tJavaRow_1 main ] stop
								 */

								/**
								 * [tJavaRow_1 process_data_begin ] start
								 */

								currentComponent = "tJavaRow_1";

								/**
								 * [tJavaRow_1 process_data_begin ] stop
								 */

								/**
								 * [tMongoDBOutput_1 main ] start
								 */

								currentComponent = "tMongoDBOutput_1";

								// row2
								// row2

								if (execStat) {
									runStat.updateStatOnConnection("row2"
											+ iterateId, 1, 1);
								}

								com.mongodb.WriteResult resultMessage_tMongoDBOutput_1 = null;
								updateObjectUtil_tMongoDBOutput_1
										.setObject(new com.mongodb.BasicDBObject());

								updateObjectUtil_tMongoDBOutput_1.put(
										pathMap_tMongoDBOutput_1
												.get("DEPARTMENT_ID"),
										"DEPARTMENT_ID", row2.DEPARTMENT_ID);
								updateObjectUtil_tMongoDBOutput_1
										.put(pathMap_tMongoDBOutput_1
												.get("DEPARTMENT_NAME"),
												"DEPARTMENT_NAME",
												row2.DEPARTMENT_NAME);
								updateObjectUtil_tMongoDBOutput_1.put(
										pathMap_tMongoDBOutput_1
												.get("MANAGER_ID"),
										"MANAGER_ID", row2.MANAGER_ID);
								updateObjectUtil_tMongoDBOutput_1.put(
										pathMap_tMongoDBOutput_1
												.get("LOCATION_ID"),
										"LOCATION_ID", row2.LOCATION_ID);
								com.mongodb.BasicDBObject updateObj_tMongoDBOutput_1 = updateObjectUtil_tMongoDBOutput_1
										.getObject();

								resultMessage_tMongoDBOutput_1 = coll_tMongoDBOutput_1
										.insert(updateObj_tMongoDBOutput_1);

								nb_line_tMongoDBOutput_1++;

								tos_count_tMongoDBOutput_1++;

								/**
								 * [tMongoDBOutput_1 main ] stop
								 */

								/**
								 * [tMongoDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tMongoDBOutput_1";

								/**
								 * [tMongoDBOutput_1 process_data_begin ] stop
								 */

								/**
								 * [tMongoDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tMongoDBOutput_1";

								/**
								 * [tMongoDBOutput_1 process_data_end ] stop
								 */

								/**
								 * [tJavaRow_1 process_data_end ] start
								 */

								currentComponent = "tJavaRow_1";

								/**
								 * [tJavaRow_1 process_data_end ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tFileInputDelimited_1 process_data_end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							/**
							 * [tFileInputDelimited_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputDelimited_1 end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

						}
						nb_line_tFileInputDelimited_1 += fid_tFileInputDelimited_1
								.getRowNumber();
					}
				} finally {
					if (!((Object) ("/Applications/Talend/workspace/departments_bkp_20190916.zip") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tMongoDBOutput_1 end ] start
				 */

				currentComponent = "tMongoDBOutput_1";

				if (mongo_tMongoDBOutput_1 != null) {

					mongo_tMongoDBOutput_1.close();

				}
				resourceMap.put("finish_tMongoDBOutput_1", true);

				globalMap.put("tMongoDBOutput_1_NB_LINE",
						nb_line_tMongoDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMongoDBOutput_1", true);
				end_Hash.put("tMongoDBOutput_1", System.currentTimeMillis());

				/**
				 * [tMongoDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tMongoDBOutput_1 finally ] start
				 */

				currentComponent = "tMongoDBOutput_1";

				if (resourceMap.get("finish_tMongoDBOutput_1") == null) {
					if (resourceMap.get("mongo_tMongoDBOutput_1") != null) {

						((com.mongodb.Mongo) resourceMap
								.get("mongo_tMongoDBOutput_1")).close();

					}
				}

				/**
				 * [tMongoDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_FIAP_files_to_mongo = new byte[0];
		static byte[] commonByteArray_FIAP_files_to_mongo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String EMPLOYEE_ID;

		public String getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String JOB_ID;

		public String getJOB_ID() {
			return this.JOB_ID;
		}

		public String DEPARTMENT_ID;

		public String getDEPARTMENT_ID() {
			return this.DEPARTMENT_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID
								.hashCode());

				result = prime
						* result
						+ ((this.START_DATE == null) ? 0 : this.START_DATE
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.EMPLOYEE_ID == null) {
				if (other.EMPLOYEE_ID != null)
					return false;

			} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))

				return false;

			if (this.START_DATE == null) {
				if (other.START_DATE != null)
					return false;

			} else if (!this.START_DATE.equals(other.START_DATE))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.START_DATE = this.START_DATE;
			other.END_DATE = this.END_DATE;
			other.JOB_ID = this.JOB_ID;
			other.DEPARTMENT_ID = this.DEPARTMENT_ID;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.START_DATE = this.START_DATE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_files_to_mongo.length) {
					if (length < 1024
							&& commonByteArray_FIAP_files_to_mongo.length == 0) {
						commonByteArray_FIAP_files_to_mongo = new byte[1024];
					} else {
						commonByteArray_FIAP_files_to_mongo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_files_to_mongo, 0, length);
				strReturn = new String(commonByteArray_FIAP_files_to_mongo, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_files_to_mongo) {

				try {

					int length = 0;

					this.EMPLOYEE_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.END_DATE = readString(dis);

					this.JOB_ID = readString(dis);

					this.DEPARTMENT_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.EMPLOYEE_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.JOB_ID, dos);

				// String

				writeString(this.DEPARTMENT_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEE_ID=" + EMPLOYEE_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",JOB_ID=" + JOB_ID);
			sb.append(",DEPARTMENT_ID=" + DEPARTMENT_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EMPLOYEE_ID,
					other.EMPLOYEE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.START_DATE,
					other.START_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_FIAP_files_to_mongo = new byte[0];
		static byte[] commonByteArray_FIAP_files_to_mongo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String EMPLOYEE_ID;

		public String getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public String START_DATE;

		public String getSTART_DATE() {
			return this.START_DATE;
		}

		public String END_DATE;

		public String getEND_DATE() {
			return this.END_DATE;
		}

		public String JOB_ID;

		public String getJOB_ID() {
			return this.JOB_ID;
		}

		public String DEPARTMENT_ID;

		public String getDEPARTMENT_ID() {
			return this.DEPARTMENT_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID
								.hashCode());

				result = prime
						* result
						+ ((this.START_DATE == null) ? 0 : this.START_DATE
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.EMPLOYEE_ID == null) {
				if (other.EMPLOYEE_ID != null)
					return false;

			} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))

				return false;

			if (this.START_DATE == null) {
				if (other.START_DATE != null)
					return false;

			} else if (!this.START_DATE.equals(other.START_DATE))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.START_DATE = this.START_DATE;
			other.END_DATE = this.END_DATE;
			other.JOB_ID = this.JOB_ID;
			other.DEPARTMENT_ID = this.DEPARTMENT_ID;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.START_DATE = this.START_DATE;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_files_to_mongo.length) {
					if (length < 1024
							&& commonByteArray_FIAP_files_to_mongo.length == 0) {
						commonByteArray_FIAP_files_to_mongo = new byte[1024];
					} else {
						commonByteArray_FIAP_files_to_mongo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_files_to_mongo, 0, length);
				strReturn = new String(commonByteArray_FIAP_files_to_mongo, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_files_to_mongo) {

				try {

					int length = 0;

					this.EMPLOYEE_ID = readString(dis);

					this.START_DATE = readString(dis);

					this.END_DATE = readString(dis);

					this.JOB_ID = readString(dis);

					this.DEPARTMENT_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.EMPLOYEE_ID, dos);

				// String

				writeString(this.START_DATE, dos);

				// String

				writeString(this.END_DATE, dos);

				// String

				writeString(this.JOB_ID, dos);

				// String

				writeString(this.DEPARTMENT_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEE_ID=" + EMPLOYEE_ID);
			sb.append(",START_DATE=" + START_DATE);
			sb.append(",END_DATE=" + END_DATE);
			sb.append(",JOB_ID=" + JOB_ID);
			sb.append(",DEPARTMENT_ID=" + DEPARTMENT_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EMPLOYEE_ID,
					other.EMPLOYEE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.START_DATE,
					other.START_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tMongoDBOutput_2 begin ] start
				 */

				ok_Hash.put("tMongoDBOutput_2", false);
				start_Hash.put("tMongoDBOutput_2", System.currentTimeMillis());

				currentComponent = "tMongoDBOutput_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tMongoDBOutput_2 = 0;

				int nb_line_tMongoDBOutput_2 = 0;

				class DBObjectUtil_tMongoDBOutput_2 {

					private com.mongodb.BasicDBObject object = null;

					// Put value to embedded document
					// If have no embedded document, put the value to root
					// document
					public void put(String parentNode, String curentName,
							Object value) {
						if (parentNode == null || "".equals(parentNode)) {
							object.put(curentName, value);
						} else {
							String objNames[] = parentNode.split("\\.");
							com.mongodb.BasicDBObject lastNode = getParentNode(
									parentNode, objNames.length - 1);
							lastNode.put(curentName, value);
							com.mongodb.BasicDBObject parenttNode = null;
							for (int i = objNames.length - 1; i >= 0; i--) {
								parenttNode = getParentNode(parentNode, i - 1);
								parenttNode.put(objNames[i], lastNode);
								lastNode = (com.mongodb.BasicDBObject) parenttNode
										.clone();
							}
							object = lastNode;
						}
					}

					// Get node(embedded document) by path configuration
					public com.mongodb.BasicDBObject getParentNode(
							String parentNode, int index) {
						com.mongodb.BasicDBObject basicDBObject = object;
						if (parentNode == null || "".equals(parentNode)) {
							return object;
						} else {
							String objNames[] = parentNode.split("\\.");
							for (int i = 0; i <= index; i++) {
								basicDBObject = (com.mongodb.BasicDBObject) basicDBObject
										.get(objNames[i]);
								if (basicDBObject == null) {
									basicDBObject = new com.mongodb.BasicDBObject();
									return basicDBObject;
								}
								if (i == index) {
									break;
								}
							}
							return basicDBObject;
						}
					}

					public void putkeyNode(String parentNode,
							String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode)
								|| ".".equals(parentNode)) {
							put(parentNode, curentName, value);
						} else {
							put("", parentNode + "." + curentName, value);
						}
					}

					public com.mongodb.BasicDBObject getObject() {
						return this.object;
					}

					public void setObject(com.mongodb.BasicDBObject object) {
						this.object = object;
					}

				}

				DBObjectUtil_tMongoDBOutput_2 updateObjectUtil_tMongoDBOutput_2 = new DBObjectUtil_tMongoDBOutput_2();
				DBObjectUtil_tMongoDBOutput_2 queryObjectUtil_tMongoDBOutput_2 = new DBObjectUtil_tMongoDBOutput_2();
				java.util.Map<String, String> pathMap_tMongoDBOutput_2 = new java.util.HashMap<String, String>();
				com.mongodb.Mongo mongo_tMongoDBOutput_2 = null;
				com.mongodb.DB db_tMongoDBOutput_2 = null;

				pathMap_tMongoDBOutput_2.put("EMPLOYEE_ID", "");

				pathMap_tMongoDBOutput_2.put("START_DATE", "");

				pathMap_tMongoDBOutput_2.put("END_DATE", "");

				pathMap_tMongoDBOutput_2.put("JOB_ID", "");

				pathMap_tMongoDBOutput_2.put("DEPARTMENT_ID", "");

				java.util.logging.Logger.getLogger("org.mongodb.driver")
						.setLevel(java.util.logging.Level.SEVERE);
				// Empty client options
				com.mongodb.MongoClientOptions clientOptions_tMongoDBOutput_2 = new com.mongodb.MongoClientOptions.Builder()
						.build();
				// Empty client credentials list
				java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBOutput_2 = new java.util.ArrayList<com.mongodb.MongoCredential>();

				com.mongodb.ServerAddress serverAddress_tMongoDBOutput_2 = new com.mongodb.ServerAddress(
						"localhost", 27017);
				mongo_tMongoDBOutput_2 = new com.mongodb.MongoClient(
						serverAddress_tMongoDBOutput_2,
						mongoCredentialList_tMongoDBOutput_2,
						clientOptions_tMongoDBOutput_2);
				resourceMap.put("mongo_tMongoDBOutput_2",
						mongo_tMongoDBOutput_2);
				db_tMongoDBOutput_2 = mongo_tMongoDBOutput_2
						.getDB("mongobands");

				com.mongodb.DBCollection coll_tMongoDBOutput_2 = db_tMongoDBOutput_2
						.getCollection("jobHistory");

				/**
				 * [tMongoDBOutput_2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = "/Applications/Talend/workspace/jobs_history_20190916.zip";
					java.util.zip.ZipInputStream zis_tFileInputDelimited_2 = null;
					try {
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
							zis_tFileInputDelimited_2 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											(java.io.InputStream) filename_tFileInputDelimited_2));
						} else {
							zis_tFileInputDelimited_2 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											new java.io.FileInputStream(
													String.valueOf(filename_tFileInputDelimited_2))));
						}
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					java.util.zip.ZipEntry entry_tFileInputDelimited_2 = null;

					while (true) {
						try {
							entry_tFileInputDelimited_2 = zis_tFileInputDelimited_2
									.getNextEntry();
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());
							break;

						}
						if (entry_tFileInputDelimited_2 == null) {
							break;
						}
						if (entry_tFileInputDelimited_2.isDirectory()) { // directory
							continue;
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
									zis_tFileInputDelimited_2, "ISO-8859-15",
									"|", "\n", true, 1, 0, -1, -1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_2 != null
								&& fid_tFileInputDelimited_2.nextRecord()) {
							rowstate_tFileInputDelimited_2.reset();

							row3 = null;

							boolean whetherReject_tFileInputDelimited_2 = false;
							row3 = new row3Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_2 = 0;

								columnIndexWithD_tFileInputDelimited_2 = 0;

								row3.EMPLOYEE_ID = fid_tFileInputDelimited_2
										.get(columnIndexWithD_tFileInputDelimited_2);

								columnIndexWithD_tFileInputDelimited_2 = 1;

								row3.START_DATE = fid_tFileInputDelimited_2
										.get(columnIndexWithD_tFileInputDelimited_2);

								columnIndexWithD_tFileInputDelimited_2 = 2;

								row3.END_DATE = fid_tFileInputDelimited_2
										.get(columnIndexWithD_tFileInputDelimited_2);

								columnIndexWithD_tFileInputDelimited_2 = 3;

								row3.JOB_ID = fid_tFileInputDelimited_2
										.get(columnIndexWithD_tFileInputDelimited_2);

								columnIndexWithD_tFileInputDelimited_2 = 4;

								row3.DEPARTMENT_ID = fid_tFileInputDelimited_2
										.get(columnIndexWithD_tFileInputDelimited_2);

								if (rowstate_tFileInputDelimited_2
										.getException() != null) {
									throw rowstate_tFileInputDelimited_2
											.getException();
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_2 = true;

								System.err.println(e.getMessage());
								row3 = null;

							}

							/**
							 * [tFileInputDelimited_2 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_2 main ] start
							 */

							currentComponent = "tFileInputDelimited_2";

							tos_count_tFileInputDelimited_2++;

							/**
							 * [tFileInputDelimited_2 main ] stop
							 */

							/**
							 * [tFileInputDelimited_2 process_data_begin ] start
							 */

							currentComponent = "tFileInputDelimited_2";

							/**
							 * [tFileInputDelimited_2 process_data_begin ] stop
							 */
							// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tJavaRow_2 main ] start
								 */

								currentComponent = "tJavaRow_2";

								// row3
								// row3

								if (execStat) {
									runStat.updateStatOnConnection("row3"
											+ iterateId, 1, 1);
								}

								// Code generated according to input schema and
								// output schema
								row4.EMPLOYEE_ID = row3.EMPLOYEE_ID;
								row4.START_DATE = row3.START_DATE;
								row4.END_DATE = row3.END_DATE;
								row4.JOB_ID = row3.JOB_ID;
								row4.DEPARTMENT_ID = row3.DEPARTMENT_ID;

								nb_line_tJavaRow_2++;

								tos_count_tJavaRow_2++;

								/**
								 * [tJavaRow_2 main ] stop
								 */

								/**
								 * [tJavaRow_2 process_data_begin ] start
								 */

								currentComponent = "tJavaRow_2";

								/**
								 * [tJavaRow_2 process_data_begin ] stop
								 */

								/**
								 * [tMongoDBOutput_2 main ] start
								 */

								currentComponent = "tMongoDBOutput_2";

								// row4
								// row4

								if (execStat) {
									runStat.updateStatOnConnection("row4"
											+ iterateId, 1, 1);
								}

								com.mongodb.WriteResult resultMessage_tMongoDBOutput_2 = null;
								updateObjectUtil_tMongoDBOutput_2
										.setObject(new com.mongodb.BasicDBObject());

								updateObjectUtil_tMongoDBOutput_2.put(
										pathMap_tMongoDBOutput_2
												.get("EMPLOYEE_ID"),
										"EMPLOYEE_ID", row4.EMPLOYEE_ID);
								updateObjectUtil_tMongoDBOutput_2.put(
										pathMap_tMongoDBOutput_2
												.get("START_DATE"),
										"START_DATE", row4.START_DATE);
								updateObjectUtil_tMongoDBOutput_2.put(
										pathMap_tMongoDBOutput_2
												.get("END_DATE"), "END_DATE",
										row4.END_DATE);
								updateObjectUtil_tMongoDBOutput_2.put(
										pathMap_tMongoDBOutput_2.get("JOB_ID"),
										"JOB_ID", row4.JOB_ID);
								updateObjectUtil_tMongoDBOutput_2.put(
										pathMap_tMongoDBOutput_2
												.get("DEPARTMENT_ID"),
										"DEPARTMENT_ID", row4.DEPARTMENT_ID);
								com.mongodb.BasicDBObject updateObj_tMongoDBOutput_2 = updateObjectUtil_tMongoDBOutput_2
										.getObject();

								resultMessage_tMongoDBOutput_2 = coll_tMongoDBOutput_2
										.insert(updateObj_tMongoDBOutput_2);

								nb_line_tMongoDBOutput_2++;

								tos_count_tMongoDBOutput_2++;

								/**
								 * [tMongoDBOutput_2 main ] stop
								 */

								/**
								 * [tMongoDBOutput_2 process_data_begin ] start
								 */

								currentComponent = "tMongoDBOutput_2";

								/**
								 * [tMongoDBOutput_2 process_data_begin ] stop
								 */

								/**
								 * [tMongoDBOutput_2 process_data_end ] start
								 */

								currentComponent = "tMongoDBOutput_2";

								/**
								 * [tMongoDBOutput_2 process_data_end ] stop
								 */

								/**
								 * [tJavaRow_2 process_data_end ] start
								 */

								currentComponent = "tJavaRow_2";

								/**
								 * [tJavaRow_2 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tFileInputDelimited_2 process_data_end ] start
							 */

							currentComponent = "tFileInputDelimited_2";

							/**
							 * [tFileInputDelimited_2 process_data_end ] stop
							 */

							/**
							 * [tFileInputDelimited_2 end ] start
							 */

							currentComponent = "tFileInputDelimited_2";

						}
						nb_line_tFileInputDelimited_2 += fid_tFileInputDelimited_2
								.getRowNumber();
					}
				} finally {
					if (!((Object) ("/Applications/Talend/workspace/jobs_history_20190916.zip") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tMongoDBOutput_2 end ] start
				 */

				currentComponent = "tMongoDBOutput_2";

				if (mongo_tMongoDBOutput_2 != null) {

					mongo_tMongoDBOutput_2.close();

				}
				resourceMap.put("finish_tMongoDBOutput_2", true);

				globalMap.put("tMongoDBOutput_2_NB_LINE",
						nb_line_tMongoDBOutput_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMongoDBOutput_2", true);
				end_Hash.put("tMongoDBOutput_2", System.currentTimeMillis());

				/**
				 * [tMongoDBOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tMongoDBOutput_2 finally ] start
				 */

				currentComponent = "tMongoDBOutput_2";

				if (resourceMap.get("finish_tMongoDBOutput_2") == null) {
					if (resourceMap.get("mongo_tMongoDBOutput_2") != null) {

						((com.mongodb.Mongo) resourceMap
								.get("mongo_tMongoDBOutput_2")).close();

					}
				}

				/**
				 * [tMongoDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_FIAP_files_to_mongo = new byte[0];
		static byte[] commonByteArray_FIAP_files_to_mongo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String JOB_ID;

		public String getJOB_ID() {
			return this.JOB_ID;
		}

		public String JOB_TITLE;

		public String getJOB_TITLE() {
			return this.JOB_TITLE;
		}

		public BigDecimal MIN_SALARY;

		public BigDecimal getMIN_SALARY() {
			return this.MIN_SALARY;
		}

		public BigDecimal MAX_SALARY;

		public BigDecimal getMAX_SALARY() {
			return this.MAX_SALARY;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.JOB_ID == null) ? 0 : this.JOB_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.JOB_ID == null) {
				if (other.JOB_ID != null)
					return false;

			} else if (!this.JOB_ID.equals(other.JOB_ID))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.JOB_ID = this.JOB_ID;
			other.JOB_TITLE = this.JOB_TITLE;
			other.MIN_SALARY = this.MIN_SALARY;
			other.MAX_SALARY = this.MAX_SALARY;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.JOB_ID = this.JOB_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_files_to_mongo.length) {
					if (length < 1024
							&& commonByteArray_FIAP_files_to_mongo.length == 0) {
						commonByteArray_FIAP_files_to_mongo = new byte[1024];
					} else {
						commonByteArray_FIAP_files_to_mongo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_files_to_mongo, 0, length);
				strReturn = new String(commonByteArray_FIAP_files_to_mongo, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_files_to_mongo) {

				try {

					int length = 0;

					this.JOB_ID = readString(dis);

					this.JOB_TITLE = readString(dis);

					this.MIN_SALARY = (BigDecimal) dis.readObject();

					this.MAX_SALARY = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.JOB_ID, dos);

				// String

				writeString(this.JOB_TITLE, dos);

				// BigDecimal

				dos.writeObject(this.MIN_SALARY);

				// BigDecimal

				dos.writeObject(this.MAX_SALARY);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("JOB_ID=" + JOB_ID);
			sb.append(",JOB_TITLE=" + JOB_TITLE);
			sb.append(",MIN_SALARY=" + String.valueOf(MIN_SALARY));
			sb.append(",MAX_SALARY=" + String.valueOf(MAX_SALARY));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.JOB_ID, other.JOB_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_FIAP_files_to_mongo = new byte[0];
		static byte[] commonByteArray_FIAP_files_to_mongo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String JOB_ID;

		public String getJOB_ID() {
			return this.JOB_ID;
		}

		public String JOB_TITLE;

		public String getJOB_TITLE() {
			return this.JOB_TITLE;
		}

		public BigDecimal MIN_SALARY;

		public BigDecimal getMIN_SALARY() {
			return this.MIN_SALARY;
		}

		public BigDecimal MAX_SALARY;

		public BigDecimal getMAX_SALARY() {
			return this.MAX_SALARY;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.JOB_ID == null) ? 0 : this.JOB_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.JOB_ID == null) {
				if (other.JOB_ID != null)
					return false;

			} else if (!this.JOB_ID.equals(other.JOB_ID))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.JOB_ID = this.JOB_ID;
			other.JOB_TITLE = this.JOB_TITLE;
			other.MIN_SALARY = this.MIN_SALARY;
			other.MAX_SALARY = this.MAX_SALARY;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.JOB_ID = this.JOB_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_files_to_mongo.length) {
					if (length < 1024
							&& commonByteArray_FIAP_files_to_mongo.length == 0) {
						commonByteArray_FIAP_files_to_mongo = new byte[1024];
					} else {
						commonByteArray_FIAP_files_to_mongo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_files_to_mongo, 0, length);
				strReturn = new String(commonByteArray_FIAP_files_to_mongo, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_files_to_mongo) {

				try {

					int length = 0;

					this.JOB_ID = readString(dis);

					this.JOB_TITLE = readString(dis);

					this.MIN_SALARY = (BigDecimal) dis.readObject();

					this.MAX_SALARY = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.JOB_ID, dos);

				// String

				writeString(this.JOB_TITLE, dos);

				// BigDecimal

				dos.writeObject(this.MIN_SALARY);

				// BigDecimal

				dos.writeObject(this.MAX_SALARY);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("JOB_ID=" + JOB_ID);
			sb.append(",JOB_TITLE=" + JOB_TITLE);
			sb.append(",MIN_SALARY=" + String.valueOf(MIN_SALARY));
			sb.append(",MAX_SALARY=" + String.valueOf(MAX_SALARY));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.JOB_ID, other.JOB_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tMongoDBOutput_3 begin ] start
				 */

				ok_Hash.put("tMongoDBOutput_3", false);
				start_Hash.put("tMongoDBOutput_3", System.currentTimeMillis());

				currentComponent = "tMongoDBOutput_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tMongoDBOutput_3 = 0;

				int nb_line_tMongoDBOutput_3 = 0;

				class DBObjectUtil_tMongoDBOutput_3 {

					private com.mongodb.BasicDBObject object = null;

					// Put value to embedded document
					// If have no embedded document, put the value to root
					// document
					public void put(String parentNode, String curentName,
							Object value) {
						if (parentNode == null || "".equals(parentNode)) {
							object.put(curentName, value);
						} else {
							String objNames[] = parentNode.split("\\.");
							com.mongodb.BasicDBObject lastNode = getParentNode(
									parentNode, objNames.length - 1);
							lastNode.put(curentName, value);
							com.mongodb.BasicDBObject parenttNode = null;
							for (int i = objNames.length - 1; i >= 0; i--) {
								parenttNode = getParentNode(parentNode, i - 1);
								parenttNode.put(objNames[i], lastNode);
								lastNode = (com.mongodb.BasicDBObject) parenttNode
										.clone();
							}
							object = lastNode;
						}
					}

					// Get node(embedded document) by path configuration
					public com.mongodb.BasicDBObject getParentNode(
							String parentNode, int index) {
						com.mongodb.BasicDBObject basicDBObject = object;
						if (parentNode == null || "".equals(parentNode)) {
							return object;
						} else {
							String objNames[] = parentNode.split("\\.");
							for (int i = 0; i <= index; i++) {
								basicDBObject = (com.mongodb.BasicDBObject) basicDBObject
										.get(objNames[i]);
								if (basicDBObject == null) {
									basicDBObject = new com.mongodb.BasicDBObject();
									return basicDBObject;
								}
								if (i == index) {
									break;
								}
							}
							return basicDBObject;
						}
					}

					public void putkeyNode(String parentNode,
							String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode)
								|| ".".equals(parentNode)) {
							put(parentNode, curentName, value);
						} else {
							put("", parentNode + "." + curentName, value);
						}
					}

					public com.mongodb.BasicDBObject getObject() {
						return this.object;
					}

					public void setObject(com.mongodb.BasicDBObject object) {
						this.object = object;
					}

				}

				DBObjectUtil_tMongoDBOutput_3 updateObjectUtil_tMongoDBOutput_3 = new DBObjectUtil_tMongoDBOutput_3();
				DBObjectUtil_tMongoDBOutput_3 queryObjectUtil_tMongoDBOutput_3 = new DBObjectUtil_tMongoDBOutput_3();
				java.util.Map<String, String> pathMap_tMongoDBOutput_3 = new java.util.HashMap<String, String>();
				com.mongodb.Mongo mongo_tMongoDBOutput_3 = null;
				com.mongodb.DB db_tMongoDBOutput_3 = null;

				pathMap_tMongoDBOutput_3.put("JOB_ID", "");

				pathMap_tMongoDBOutput_3.put("JOB_TITLE", "");

				pathMap_tMongoDBOutput_3.put("MIN_SALARY", "");

				pathMap_tMongoDBOutput_3.put("MAX_SALARY", "");

				java.util.logging.Logger.getLogger("org.mongodb.driver")
						.setLevel(java.util.logging.Level.SEVERE);
				// Empty client options
				com.mongodb.MongoClientOptions clientOptions_tMongoDBOutput_3 = new com.mongodb.MongoClientOptions.Builder()
						.build();
				// Empty client credentials list
				java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBOutput_3 = new java.util.ArrayList<com.mongodb.MongoCredential>();

				com.mongodb.ServerAddress serverAddress_tMongoDBOutput_3 = new com.mongodb.ServerAddress(
						"localhost", 27017);
				mongo_tMongoDBOutput_3 = new com.mongodb.MongoClient(
						serverAddress_tMongoDBOutput_3,
						mongoCredentialList_tMongoDBOutput_3,
						clientOptions_tMongoDBOutput_3);
				resourceMap.put("mongo_tMongoDBOutput_3",
						mongo_tMongoDBOutput_3);
				db_tMongoDBOutput_3 = mongo_tMongoDBOutput_3
						.getDB("mongobands");

				com.mongodb.DBCollection coll_tMongoDBOutput_3 = db_tMongoDBOutput_3
						.getCollection("job");

				/**
				 * [tMongoDBOutput_3 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = "/Applications/Talend/workspace/jobs_20190916.zip";
					java.util.zip.ZipInputStream zis_tFileInputDelimited_3 = null;
					try {
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
							zis_tFileInputDelimited_3 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											(java.io.InputStream) filename_tFileInputDelimited_3));
						} else {
							zis_tFileInputDelimited_3 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											new java.io.FileInputStream(
													String.valueOf(filename_tFileInputDelimited_3))));
						}
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					java.util.zip.ZipEntry entry_tFileInputDelimited_3 = null;

					while (true) {
						try {
							entry_tFileInputDelimited_3 = zis_tFileInputDelimited_3
									.getNextEntry();
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());
							break;

						}
						if (entry_tFileInputDelimited_3 == null) {
							break;
						}
						if (entry_tFileInputDelimited_3.isDirectory()) { // directory
							continue;
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
									zis_tFileInputDelimited_3, "ISO-8859-15",
									"|", "\n", true, 1, 0, -1, -1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_3 != null
								&& fid_tFileInputDelimited_3.nextRecord()) {
							rowstate_tFileInputDelimited_3.reset();

							row5 = null;

							boolean whetherReject_tFileInputDelimited_3 = false;
							row5 = new row5Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_3 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_3 = 0;

								row5.JOB_ID = fid_tFileInputDelimited_3
										.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 1;

								row5.JOB_TITLE = fid_tFileInputDelimited_3
										.get(columnIndexWithD_tFileInputDelimited_3);

								columnIndexWithD_tFileInputDelimited_3 = 2;

								temp = fid_tFileInputDelimited_3
										.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row5.MIN_SALARY = ParserUtils
												.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										rowstate_tFileInputDelimited_3
												.setException(new RuntimeException(
														String.format(
																"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
																"MIN_SALARY",
																"row5", temp,
																ex_tFileInputDelimited_3),
														ex_tFileInputDelimited_3));
									}

								} else {

									row5.MIN_SALARY = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								temp = fid_tFileInputDelimited_3
										.get(columnIndexWithD_tFileInputDelimited_3);
								if (temp.length() > 0) {

									try {

										row5.MAX_SALARY = ParserUtils
												.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_3) {
										rowstate_tFileInputDelimited_3
												.setException(new RuntimeException(
														String.format(
																"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
																"MAX_SALARY",
																"row5", temp,
																ex_tFileInputDelimited_3),
														ex_tFileInputDelimited_3));
									}

								} else {

									row5.MAX_SALARY = null;

								}

								if (rowstate_tFileInputDelimited_3
										.getException() != null) {
									throw rowstate_tFileInputDelimited_3
											.getException();
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_3 = true;

								System.err.println(e.getMessage());
								row5 = null;

							}

							/**
							 * [tFileInputDelimited_3 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_3 main ] start
							 */

							currentComponent = "tFileInputDelimited_3";

							tos_count_tFileInputDelimited_3++;

							/**
							 * [tFileInputDelimited_3 main ] stop
							 */

							/**
							 * [tFileInputDelimited_3 process_data_begin ] start
							 */

							currentComponent = "tFileInputDelimited_3";

							/**
							 * [tFileInputDelimited_3 process_data_begin ] stop
							 */
							// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tJavaRow_3 main ] start
								 */

								currentComponent = "tJavaRow_3";

								// row5
								// row5

								if (execStat) {
									runStat.updateStatOnConnection("row5"
											+ iterateId, 1, 1);
								}

								// Code generated according to input schema and
								// output schema
								row6.JOB_ID = row5.JOB_ID;
								row6.JOB_TITLE = row5.JOB_TITLE;
								row6.MIN_SALARY = row5.MIN_SALARY;
								row6.MAX_SALARY = row5.MAX_SALARY;

								nb_line_tJavaRow_3++;

								tos_count_tJavaRow_3++;

								/**
								 * [tJavaRow_3 main ] stop
								 */

								/**
								 * [tJavaRow_3 process_data_begin ] start
								 */

								currentComponent = "tJavaRow_3";

								/**
								 * [tJavaRow_3 process_data_begin ] stop
								 */

								/**
								 * [tMongoDBOutput_3 main ] start
								 */

								currentComponent = "tMongoDBOutput_3";

								// row6
								// row6

								if (execStat) {
									runStat.updateStatOnConnection("row6"
											+ iterateId, 1, 1);
								}

								com.mongodb.WriteResult resultMessage_tMongoDBOutput_3 = null;
								updateObjectUtil_tMongoDBOutput_3
										.setObject(new com.mongodb.BasicDBObject());

								updateObjectUtil_tMongoDBOutput_3.put(
										pathMap_tMongoDBOutput_3.get("JOB_ID"),
										"JOB_ID", row6.JOB_ID);
								updateObjectUtil_tMongoDBOutput_3.put(
										pathMap_tMongoDBOutput_3
												.get("JOB_TITLE"), "JOB_TITLE",
										row6.JOB_TITLE);
								updateObjectUtil_tMongoDBOutput_3.put(
										pathMap_tMongoDBOutput_3
												.get("MIN_SALARY"),
										"MIN_SALARY", row6.MIN_SALARY);
								updateObjectUtil_tMongoDBOutput_3.put(
										pathMap_tMongoDBOutput_3
												.get("MAX_SALARY"),
										"MAX_SALARY", row6.MAX_SALARY);
								com.mongodb.BasicDBObject updateObj_tMongoDBOutput_3 = updateObjectUtil_tMongoDBOutput_3
										.getObject();

								resultMessage_tMongoDBOutput_3 = coll_tMongoDBOutput_3
										.insert(updateObj_tMongoDBOutput_3);

								nb_line_tMongoDBOutput_3++;

								tos_count_tMongoDBOutput_3++;

								/**
								 * [tMongoDBOutput_3 main ] stop
								 */

								/**
								 * [tMongoDBOutput_3 process_data_begin ] start
								 */

								currentComponent = "tMongoDBOutput_3";

								/**
								 * [tMongoDBOutput_3 process_data_begin ] stop
								 */

								/**
								 * [tMongoDBOutput_3 process_data_end ] start
								 */

								currentComponent = "tMongoDBOutput_3";

								/**
								 * [tMongoDBOutput_3 process_data_end ] stop
								 */

								/**
								 * [tJavaRow_3 process_data_end ] start
								 */

								currentComponent = "tJavaRow_3";

								/**
								 * [tJavaRow_3 process_data_end ] stop
								 */

							} // End of branch "row5"

							/**
							 * [tFileInputDelimited_3 process_data_end ] start
							 */

							currentComponent = "tFileInputDelimited_3";

							/**
							 * [tFileInputDelimited_3 process_data_end ] stop
							 */

							/**
							 * [tFileInputDelimited_3 end ] start
							 */

							currentComponent = "tFileInputDelimited_3";

						}
						nb_line_tFileInputDelimited_3 += fid_tFileInputDelimited_3
								.getRowNumber();
					}
				} finally {
					if (!((Object) ("/Applications/Talend/workspace/jobs_20190916.zip") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tMongoDBOutput_3 end ] start
				 */

				currentComponent = "tMongoDBOutput_3";

				if (mongo_tMongoDBOutput_3 != null) {

					mongo_tMongoDBOutput_3.close();

				}
				resourceMap.put("finish_tMongoDBOutput_3", true);

				globalMap.put("tMongoDBOutput_3_NB_LINE",
						nb_line_tMongoDBOutput_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMongoDBOutput_3", true);
				end_Hash.put("tMongoDBOutput_3", System.currentTimeMillis());

				/**
				 * [tMongoDBOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tMongoDBOutput_3 finally ] start
				 */

				currentComponent = "tMongoDBOutput_3";

				if (resourceMap.get("finish_tMongoDBOutput_3") == null) {
					if (resourceMap.get("mongo_tMongoDBOutput_3") != null) {

						((com.mongodb.Mongo) resourceMap
								.get("mongo_tMongoDBOutput_3")).close();

					}
				}

				/**
				 * [tMongoDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_FIAP_files_to_mongo = new byte[0];
		static byte[] commonByteArray_FIAP_files_to_mongo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal LOCATION_ID;

		public BigDecimal getLOCATION_ID() {
			return this.LOCATION_ID;
		}

		public String STREET_ADDRESS;

		public String getSTREET_ADDRESS() {
			return this.STREET_ADDRESS;
		}

		public String POSTAL_CODE;

		public String getPOSTAL_CODE() {
			return this.POSTAL_CODE;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String STATE_PROVINCE;

		public String getSTATE_PROVINCE() {
			return this.STATE_PROVINCE;
		}

		public String COUNTRY_ID;

		public String getCOUNTRY_ID() {
			return this.COUNTRY_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.LOCATION_ID == null) ? 0 : this.LOCATION_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.LOCATION_ID == null) {
				if (other.LOCATION_ID != null)
					return false;

			} else if (!this.LOCATION_ID.equals(other.LOCATION_ID))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.LOCATION_ID = this.LOCATION_ID;
			other.STREET_ADDRESS = this.STREET_ADDRESS;
			other.POSTAL_CODE = this.POSTAL_CODE;
			other.CITY = this.CITY;
			other.STATE_PROVINCE = this.STATE_PROVINCE;
			other.COUNTRY_ID = this.COUNTRY_ID;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.LOCATION_ID = this.LOCATION_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_files_to_mongo.length) {
					if (length < 1024
							&& commonByteArray_FIAP_files_to_mongo.length == 0) {
						commonByteArray_FIAP_files_to_mongo = new byte[1024];
					} else {
						commonByteArray_FIAP_files_to_mongo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_files_to_mongo, 0, length);
				strReturn = new String(commonByteArray_FIAP_files_to_mongo, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_files_to_mongo) {

				try {

					int length = 0;

					this.LOCATION_ID = (BigDecimal) dis.readObject();

					this.STREET_ADDRESS = readString(dis);

					this.POSTAL_CODE = readString(dis);

					this.CITY = readString(dis);

					this.STATE_PROVINCE = readString(dis);

					this.COUNTRY_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.LOCATION_ID);

				// String

				writeString(this.STREET_ADDRESS, dos);

				// String

				writeString(this.POSTAL_CODE, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.STATE_PROVINCE, dos);

				// String

				writeString(this.COUNTRY_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LOCATION_ID=" + String.valueOf(LOCATION_ID));
			sb.append(",STREET_ADDRESS=" + STREET_ADDRESS);
			sb.append(",POSTAL_CODE=" + POSTAL_CODE);
			sb.append(",CITY=" + CITY);
			sb.append(",STATE_PROVINCE=" + STATE_PROVINCE);
			sb.append(",COUNTRY_ID=" + COUNTRY_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LOCATION_ID,
					other.LOCATION_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_FIAP_files_to_mongo = new byte[0];
		static byte[] commonByteArray_FIAP_files_to_mongo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal LOCATION_ID;

		public BigDecimal getLOCATION_ID() {
			return this.LOCATION_ID;
		}

		public String STREET_ADDRESS;

		public String getSTREET_ADDRESS() {
			return this.STREET_ADDRESS;
		}

		public String POSTAL_CODE;

		public String getPOSTAL_CODE() {
			return this.POSTAL_CODE;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String STATE_PROVINCE;

		public String getSTATE_PROVINCE() {
			return this.STATE_PROVINCE;
		}

		public String COUNTRY_ID;

		public String getCOUNTRY_ID() {
			return this.COUNTRY_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.LOCATION_ID == null) ? 0 : this.LOCATION_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.LOCATION_ID == null) {
				if (other.LOCATION_ID != null)
					return false;

			} else if (!this.LOCATION_ID.equals(other.LOCATION_ID))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.LOCATION_ID = this.LOCATION_ID;
			other.STREET_ADDRESS = this.STREET_ADDRESS;
			other.POSTAL_CODE = this.POSTAL_CODE;
			other.CITY = this.CITY;
			other.STATE_PROVINCE = this.STATE_PROVINCE;
			other.COUNTRY_ID = this.COUNTRY_ID;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.LOCATION_ID = this.LOCATION_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_files_to_mongo.length) {
					if (length < 1024
							&& commonByteArray_FIAP_files_to_mongo.length == 0) {
						commonByteArray_FIAP_files_to_mongo = new byte[1024];
					} else {
						commonByteArray_FIAP_files_to_mongo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_files_to_mongo, 0, length);
				strReturn = new String(commonByteArray_FIAP_files_to_mongo, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_files_to_mongo) {

				try {

					int length = 0;

					this.LOCATION_ID = (BigDecimal) dis.readObject();

					this.STREET_ADDRESS = readString(dis);

					this.POSTAL_CODE = readString(dis);

					this.CITY = readString(dis);

					this.STATE_PROVINCE = readString(dis);

					this.COUNTRY_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.LOCATION_ID);

				// String

				writeString(this.STREET_ADDRESS, dos);

				// String

				writeString(this.POSTAL_CODE, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.STATE_PROVINCE, dos);

				// String

				writeString(this.COUNTRY_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LOCATION_ID=" + String.valueOf(LOCATION_ID));
			sb.append(",STREET_ADDRESS=" + STREET_ADDRESS);
			sb.append(",POSTAL_CODE=" + POSTAL_CODE);
			sb.append(",CITY=" + CITY);
			sb.append(",STATE_PROVINCE=" + STATE_PROVINCE);
			sb.append(",COUNTRY_ID=" + COUNTRY_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LOCATION_ID,
					other.LOCATION_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				row10Struct row10 = new row10Struct();

				/**
				 * [tMongoDBOutput_4 begin ] start
				 */

				ok_Hash.put("tMongoDBOutput_4", false);
				start_Hash.put("tMongoDBOutput_4", System.currentTimeMillis());

				currentComponent = "tMongoDBOutput_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMongoDBOutput_4 = 0;

				int nb_line_tMongoDBOutput_4 = 0;

				class DBObjectUtil_tMongoDBOutput_4 {

					private com.mongodb.BasicDBObject object = null;

					// Put value to embedded document
					// If have no embedded document, put the value to root
					// document
					public void put(String parentNode, String curentName,
							Object value) {
						if (parentNode == null || "".equals(parentNode)) {
							object.put(curentName, value);
						} else {
							String objNames[] = parentNode.split("\\.");
							com.mongodb.BasicDBObject lastNode = getParentNode(
									parentNode, objNames.length - 1);
							lastNode.put(curentName, value);
							com.mongodb.BasicDBObject parenttNode = null;
							for (int i = objNames.length - 1; i >= 0; i--) {
								parenttNode = getParentNode(parentNode, i - 1);
								parenttNode.put(objNames[i], lastNode);
								lastNode = (com.mongodb.BasicDBObject) parenttNode
										.clone();
							}
							object = lastNode;
						}
					}

					// Get node(embedded document) by path configuration
					public com.mongodb.BasicDBObject getParentNode(
							String parentNode, int index) {
						com.mongodb.BasicDBObject basicDBObject = object;
						if (parentNode == null || "".equals(parentNode)) {
							return object;
						} else {
							String objNames[] = parentNode.split("\\.");
							for (int i = 0; i <= index; i++) {
								basicDBObject = (com.mongodb.BasicDBObject) basicDBObject
										.get(objNames[i]);
								if (basicDBObject == null) {
									basicDBObject = new com.mongodb.BasicDBObject();
									return basicDBObject;
								}
								if (i == index) {
									break;
								}
							}
							return basicDBObject;
						}
					}

					public void putkeyNode(String parentNode,
							String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode)
								|| ".".equals(parentNode)) {
							put(parentNode, curentName, value);
						} else {
							put("", parentNode + "." + curentName, value);
						}
					}

					public com.mongodb.BasicDBObject getObject() {
						return this.object;
					}

					public void setObject(com.mongodb.BasicDBObject object) {
						this.object = object;
					}

				}

				DBObjectUtil_tMongoDBOutput_4 updateObjectUtil_tMongoDBOutput_4 = new DBObjectUtil_tMongoDBOutput_4();
				DBObjectUtil_tMongoDBOutput_4 queryObjectUtil_tMongoDBOutput_4 = new DBObjectUtil_tMongoDBOutput_4();
				java.util.Map<String, String> pathMap_tMongoDBOutput_4 = new java.util.HashMap<String, String>();
				com.mongodb.Mongo mongo_tMongoDBOutput_4 = null;
				com.mongodb.DB db_tMongoDBOutput_4 = null;

				pathMap_tMongoDBOutput_4.put("LOCATION_ID", "");

				pathMap_tMongoDBOutput_4.put("STREET_ADDRESS", "");

				pathMap_tMongoDBOutput_4.put("POSTAL_CODE", "");

				pathMap_tMongoDBOutput_4.put("CITY", "");

				pathMap_tMongoDBOutput_4.put("STATE_PROVINCE", "");

				pathMap_tMongoDBOutput_4.put("COUNTRY_ID", "");

				java.util.logging.Logger.getLogger("org.mongodb.driver")
						.setLevel(java.util.logging.Level.SEVERE);
				// Empty client options
				com.mongodb.MongoClientOptions clientOptions_tMongoDBOutput_4 = new com.mongodb.MongoClientOptions.Builder()
						.build();
				// Empty client credentials list
				java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBOutput_4 = new java.util.ArrayList<com.mongodb.MongoCredential>();

				com.mongodb.ServerAddress serverAddress_tMongoDBOutput_4 = new com.mongodb.ServerAddress(
						"localhost", 27017);
				mongo_tMongoDBOutput_4 = new com.mongodb.MongoClient(
						serverAddress_tMongoDBOutput_4,
						mongoCredentialList_tMongoDBOutput_4,
						clientOptions_tMongoDBOutput_4);
				resourceMap.put("mongo_tMongoDBOutput_4",
						mongo_tMongoDBOutput_4);
				db_tMongoDBOutput_4 = mongo_tMongoDBOutput_4
						.getDB("mongobands");

				com.mongodb.DBCollection coll_tMongoDBOutput_4 = db_tMongoDBOutput_4
						.getCollection("locations");

				/**
				 * [tMongoDBOutput_4 begin ] stop
				 */

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				try {

					Object filename_tFileInputDelimited_4 = "/Applications/Talend/workspace/locations_20190916.zip";
					java.util.zip.ZipInputStream zis_tFileInputDelimited_4 = null;
					try {
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
							zis_tFileInputDelimited_4 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											(java.io.InputStream) filename_tFileInputDelimited_4));
						} else {
							zis_tFileInputDelimited_4 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											new java.io.FileInputStream(
													String.valueOf(filename_tFileInputDelimited_4))));
						}
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					java.util.zip.ZipEntry entry_tFileInputDelimited_4 = null;

					while (true) {
						try {
							entry_tFileInputDelimited_4 = zis_tFileInputDelimited_4
									.getNextEntry();
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());
							break;

						}
						if (entry_tFileInputDelimited_4 == null) {
							break;
						}
						if (entry_tFileInputDelimited_4.isDirectory()) { // directory
							continue;
						}
						try {
							fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
									zis_tFileInputDelimited_4, "ISO-8859-15",
									"|", "\n", true, 1, 0, -1, -1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_4 != null
								&& fid_tFileInputDelimited_4.nextRecord()) {
							rowstate_tFileInputDelimited_4.reset();

							row7 = null;

							boolean whetherReject_tFileInputDelimited_4 = false;
							row7 = new row7Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_4 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_4 = 0;

								temp = fid_tFileInputDelimited_4
										.get(columnIndexWithD_tFileInputDelimited_4);
								if (temp.length() > 0) {

									try {

										row7.LOCATION_ID = ParserUtils
												.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_4) {
										rowstate_tFileInputDelimited_4
												.setException(new RuntimeException(
														String.format(
																"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
																"LOCATION_ID",
																"row7", temp,
																ex_tFileInputDelimited_4),
														ex_tFileInputDelimited_4));
									}

								} else {

									row7.LOCATION_ID = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								row7.STREET_ADDRESS = fid_tFileInputDelimited_4
										.get(columnIndexWithD_tFileInputDelimited_4);

								columnIndexWithD_tFileInputDelimited_4 = 2;

								row7.POSTAL_CODE = fid_tFileInputDelimited_4
										.get(columnIndexWithD_tFileInputDelimited_4);

								columnIndexWithD_tFileInputDelimited_4 = 3;

								row7.CITY = fid_tFileInputDelimited_4
										.get(columnIndexWithD_tFileInputDelimited_4);

								columnIndexWithD_tFileInputDelimited_4 = 4;

								row7.STATE_PROVINCE = fid_tFileInputDelimited_4
										.get(columnIndexWithD_tFileInputDelimited_4);

								columnIndexWithD_tFileInputDelimited_4 = 5;

								row7.COUNTRY_ID = fid_tFileInputDelimited_4
										.get(columnIndexWithD_tFileInputDelimited_4);

								if (rowstate_tFileInputDelimited_4
										.getException() != null) {
									throw rowstate_tFileInputDelimited_4
											.getException();
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_4 = true;

								System.err.println(e.getMessage());
								row7 = null;

							}

							/**
							 * [tFileInputDelimited_4 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_4 main ] start
							 */

							currentComponent = "tFileInputDelimited_4";

							tos_count_tFileInputDelimited_4++;

							/**
							 * [tFileInputDelimited_4 main ] stop
							 */

							/**
							 * [tFileInputDelimited_4 process_data_begin ] start
							 */

							currentComponent = "tFileInputDelimited_4";

							/**
							 * [tFileInputDelimited_4 process_data_begin ] stop
							 */
							// Start of branch "row7"
							if (row7 != null) {

								/**
								 * [tJavaRow_4 main ] start
								 */

								currentComponent = "tJavaRow_4";

								// row7
								// row7

								if (execStat) {
									runStat.updateStatOnConnection("row7"
											+ iterateId, 1, 1);
								}

								// Code generated according to input schema and
								// output schema
								row10.LOCATION_ID = row7.LOCATION_ID;
								row10.STREET_ADDRESS = row7.STREET_ADDRESS;
								row10.POSTAL_CODE = row7.POSTAL_CODE;
								row10.CITY = row7.CITY;
								row10.STATE_PROVINCE = row7.STATE_PROVINCE;
								row10.COUNTRY_ID = row7.COUNTRY_ID;

								nb_line_tJavaRow_4++;

								tos_count_tJavaRow_4++;

								/**
								 * [tJavaRow_4 main ] stop
								 */

								/**
								 * [tJavaRow_4 process_data_begin ] start
								 */

								currentComponent = "tJavaRow_4";

								/**
								 * [tJavaRow_4 process_data_begin ] stop
								 */

								/**
								 * [tMongoDBOutput_4 main ] start
								 */

								currentComponent = "tMongoDBOutput_4";

								// row10
								// row10

								if (execStat) {
									runStat.updateStatOnConnection("row10"
											+ iterateId, 1, 1);
								}

								com.mongodb.WriteResult resultMessage_tMongoDBOutput_4 = null;
								updateObjectUtil_tMongoDBOutput_4
										.setObject(new com.mongodb.BasicDBObject());

								updateObjectUtil_tMongoDBOutput_4.put(
										pathMap_tMongoDBOutput_4
												.get("LOCATION_ID"),
										"LOCATION_ID", row10.LOCATION_ID);
								updateObjectUtil_tMongoDBOutput_4.put(
										pathMap_tMongoDBOutput_4
												.get("STREET_ADDRESS"),
										"STREET_ADDRESS", row10.STREET_ADDRESS);
								updateObjectUtil_tMongoDBOutput_4.put(
										pathMap_tMongoDBOutput_4
												.get("POSTAL_CODE"),
										"POSTAL_CODE", row10.POSTAL_CODE);
								updateObjectUtil_tMongoDBOutput_4.put(
										pathMap_tMongoDBOutput_4.get("CITY"),
										"CITY", row10.CITY);
								updateObjectUtil_tMongoDBOutput_4.put(
										pathMap_tMongoDBOutput_4
												.get("STATE_PROVINCE"),
										"STATE_PROVINCE", row10.STATE_PROVINCE);
								updateObjectUtil_tMongoDBOutput_4.put(
										pathMap_tMongoDBOutput_4
												.get("COUNTRY_ID"),
										"COUNTRY_ID", row10.COUNTRY_ID);
								com.mongodb.BasicDBObject updateObj_tMongoDBOutput_4 = updateObjectUtil_tMongoDBOutput_4
										.getObject();

								resultMessage_tMongoDBOutput_4 = coll_tMongoDBOutput_4
										.insert(updateObj_tMongoDBOutput_4);

								nb_line_tMongoDBOutput_4++;

								tos_count_tMongoDBOutput_4++;

								/**
								 * [tMongoDBOutput_4 main ] stop
								 */

								/**
								 * [tMongoDBOutput_4 process_data_begin ] start
								 */

								currentComponent = "tMongoDBOutput_4";

								/**
								 * [tMongoDBOutput_4 process_data_begin ] stop
								 */

								/**
								 * [tMongoDBOutput_4 process_data_end ] start
								 */

								currentComponent = "tMongoDBOutput_4";

								/**
								 * [tMongoDBOutput_4 process_data_end ] stop
								 */

								/**
								 * [tJavaRow_4 process_data_end ] start
								 */

								currentComponent = "tJavaRow_4";

								/**
								 * [tJavaRow_4 process_data_end ] stop
								 */

							} // End of branch "row7"

							/**
							 * [tFileInputDelimited_4 process_data_end ] start
							 */

							currentComponent = "tFileInputDelimited_4";

							/**
							 * [tFileInputDelimited_4 process_data_end ] stop
							 */

							/**
							 * [tFileInputDelimited_4 end ] start
							 */

							currentComponent = "tFileInputDelimited_4";

						}
						nb_line_tFileInputDelimited_4 += fid_tFileInputDelimited_4
								.getRowNumber();
					}
				} finally {
					if (!((Object) ("/Applications/Talend/workspace/locations_20190916.zip") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								nb_line_tFileInputDelimited_4);
					}

				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tMongoDBOutput_4 end ] start
				 */

				currentComponent = "tMongoDBOutput_4";

				if (mongo_tMongoDBOutput_4 != null) {

					mongo_tMongoDBOutput_4.close();

				}
				resourceMap.put("finish_tMongoDBOutput_4", true);

				globalMap.put("tMongoDBOutput_4_NB_LINE",
						nb_line_tMongoDBOutput_4);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMongoDBOutput_4", true);
				end_Hash.put("tMongoDBOutput_4", System.currentTimeMillis());

				/**
				 * [tMongoDBOutput_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tMongoDBOutput_4 finally ] start
				 */

				currentComponent = "tMongoDBOutput_4";

				if (resourceMap.get("finish_tMongoDBOutput_4") == null) {
					if (resourceMap.get("mongo_tMongoDBOutput_4") != null) {

						((com.mongodb.Mongo) resourceMap
								.get("mongo_tMongoDBOutput_4")).close();

					}
				}

				/**
				 * [tMongoDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_FIAP_files_to_mongo = new byte[0];
		static byte[] commonByteArray_FIAP_files_to_mongo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String COUNTRY_ID;

		public String getCOUNTRY_ID() {
			return this.COUNTRY_ID;
		}

		public String COUNTRY_NAME;

		public String getCOUNTRY_NAME() {
			return this.COUNTRY_NAME;
		}

		public BigDecimal REGION_ID;

		public BigDecimal getREGION_ID() {
			return this.REGION_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.COUNTRY_ID == null) ? 0 : this.COUNTRY_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.COUNTRY_ID == null) {
				if (other.COUNTRY_ID != null)
					return false;

			} else if (!this.COUNTRY_ID.equals(other.COUNTRY_ID))

				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.COUNTRY_ID = this.COUNTRY_ID;
			other.COUNTRY_NAME = this.COUNTRY_NAME;
			other.REGION_ID = this.REGION_ID;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.COUNTRY_ID = this.COUNTRY_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_files_to_mongo.length) {
					if (length < 1024
							&& commonByteArray_FIAP_files_to_mongo.length == 0) {
						commonByteArray_FIAP_files_to_mongo = new byte[1024];
					} else {
						commonByteArray_FIAP_files_to_mongo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_files_to_mongo, 0, length);
				strReturn = new String(commonByteArray_FIAP_files_to_mongo, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_files_to_mongo) {

				try {

					int length = 0;

					this.COUNTRY_ID = readString(dis);

					this.COUNTRY_NAME = readString(dis);

					this.REGION_ID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.COUNTRY_ID, dos);

				// String

				writeString(this.COUNTRY_NAME, dos);

				// BigDecimal

				dos.writeObject(this.REGION_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("COUNTRY_ID=" + COUNTRY_ID);
			sb.append(",COUNTRY_NAME=" + COUNTRY_NAME);
			sb.append(",REGION_ID=" + String.valueOf(REGION_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.COUNTRY_ID,
					other.COUNTRY_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_FIAP_files_to_mongo = new byte[0];
		static byte[] commonByteArray_FIAP_files_to_mongo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String COUNTRY_ID;

		public String getCOUNTRY_ID() {
			return this.COUNTRY_ID;
		}

		public String COUNTRY_NAME;

		public String getCOUNTRY_NAME() {
			return this.COUNTRY_NAME;
		}

		public BigDecimal REGION_ID;

		public BigDecimal getREGION_ID() {
			return this.REGION_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.COUNTRY_ID == null) ? 0 : this.COUNTRY_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.COUNTRY_ID == null) {
				if (other.COUNTRY_ID != null)
					return false;

			} else if (!this.COUNTRY_ID.equals(other.COUNTRY_ID))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.COUNTRY_ID = this.COUNTRY_ID;
			other.COUNTRY_NAME = this.COUNTRY_NAME;
			other.REGION_ID = this.REGION_ID;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.COUNTRY_ID = this.COUNTRY_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_files_to_mongo.length) {
					if (length < 1024
							&& commonByteArray_FIAP_files_to_mongo.length == 0) {
						commonByteArray_FIAP_files_to_mongo = new byte[1024];
					} else {
						commonByteArray_FIAP_files_to_mongo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_files_to_mongo, 0, length);
				strReturn = new String(commonByteArray_FIAP_files_to_mongo, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_files_to_mongo) {

				try {

					int length = 0;

					this.COUNTRY_ID = readString(dis);

					this.COUNTRY_NAME = readString(dis);

					this.REGION_ID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.COUNTRY_ID, dos);

				// String

				writeString(this.COUNTRY_NAME, dos);

				// BigDecimal

				dos.writeObject(this.REGION_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("COUNTRY_ID=" + COUNTRY_ID);
			sb.append(",COUNTRY_NAME=" + COUNTRY_NAME);
			sb.append(",REGION_ID=" + String.valueOf(REGION_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.COUNTRY_ID,
					other.COUNTRY_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();
				row11Struct row11 = new row11Struct();

				/**
				 * [tMongoDBOutput_5 begin ] start
				 */

				ok_Hash.put("tMongoDBOutput_5", false);
				start_Hash.put("tMongoDBOutput_5", System.currentTimeMillis());

				currentComponent = "tMongoDBOutput_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row11" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMongoDBOutput_5 = 0;

				int nb_line_tMongoDBOutput_5 = 0;

				class DBObjectUtil_tMongoDBOutput_5 {

					private com.mongodb.BasicDBObject object = null;

					// Put value to embedded document
					// If have no embedded document, put the value to root
					// document
					public void put(String parentNode, String curentName,
							Object value) {
						if (parentNode == null || "".equals(parentNode)) {
							object.put(curentName, value);
						} else {
							String objNames[] = parentNode.split("\\.");
							com.mongodb.BasicDBObject lastNode = getParentNode(
									parentNode, objNames.length - 1);
							lastNode.put(curentName, value);
							com.mongodb.BasicDBObject parenttNode = null;
							for (int i = objNames.length - 1; i >= 0; i--) {
								parenttNode = getParentNode(parentNode, i - 1);
								parenttNode.put(objNames[i], lastNode);
								lastNode = (com.mongodb.BasicDBObject) parenttNode
										.clone();
							}
							object = lastNode;
						}
					}

					// Get node(embedded document) by path configuration
					public com.mongodb.BasicDBObject getParentNode(
							String parentNode, int index) {
						com.mongodb.BasicDBObject basicDBObject = object;
						if (parentNode == null || "".equals(parentNode)) {
							return object;
						} else {
							String objNames[] = parentNode.split("\\.");
							for (int i = 0; i <= index; i++) {
								basicDBObject = (com.mongodb.BasicDBObject) basicDBObject
										.get(objNames[i]);
								if (basicDBObject == null) {
									basicDBObject = new com.mongodb.BasicDBObject();
									return basicDBObject;
								}
								if (i == index) {
									break;
								}
							}
							return basicDBObject;
						}
					}

					public void putkeyNode(String parentNode,
							String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode)
								|| ".".equals(parentNode)) {
							put(parentNode, curentName, value);
						} else {
							put("", parentNode + "." + curentName, value);
						}
					}

					public com.mongodb.BasicDBObject getObject() {
						return this.object;
					}

					public void setObject(com.mongodb.BasicDBObject object) {
						this.object = object;
					}

				}

				DBObjectUtil_tMongoDBOutput_5 updateObjectUtil_tMongoDBOutput_5 = new DBObjectUtil_tMongoDBOutput_5();
				DBObjectUtil_tMongoDBOutput_5 queryObjectUtil_tMongoDBOutput_5 = new DBObjectUtil_tMongoDBOutput_5();
				java.util.Map<String, String> pathMap_tMongoDBOutput_5 = new java.util.HashMap<String, String>();
				com.mongodb.Mongo mongo_tMongoDBOutput_5 = null;
				com.mongodb.DB db_tMongoDBOutput_5 = null;

				pathMap_tMongoDBOutput_5.put("COUNTRY_ID", "");

				pathMap_tMongoDBOutput_5.put("COUNTRY_NAME", "");

				pathMap_tMongoDBOutput_5.put("REGION_ID", "");

				java.util.logging.Logger.getLogger("org.mongodb.driver")
						.setLevel(java.util.logging.Level.SEVERE);
				// Empty client options
				com.mongodb.MongoClientOptions clientOptions_tMongoDBOutput_5 = new com.mongodb.MongoClientOptions.Builder()
						.build();
				// Empty client credentials list
				java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBOutput_5 = new java.util.ArrayList<com.mongodb.MongoCredential>();

				com.mongodb.ServerAddress serverAddress_tMongoDBOutput_5 = new com.mongodb.ServerAddress(
						"localhost", 27017);
				mongo_tMongoDBOutput_5 = new com.mongodb.MongoClient(
						serverAddress_tMongoDBOutput_5,
						mongoCredentialList_tMongoDBOutput_5,
						clientOptions_tMongoDBOutput_5);
				resourceMap.put("mongo_tMongoDBOutput_5",
						mongo_tMongoDBOutput_5);
				db_tMongoDBOutput_5 = mongo_tMongoDBOutput_5
						.getDB("mongobands");

				com.mongodb.DBCollection coll_tMongoDBOutput_5 = db_tMongoDBOutput_5
						.getCollection("countries");

				/**
				 * [tMongoDBOutput_5 begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());

				currentComponent = "tJavaRow_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				try {

					Object filename_tFileInputDelimited_5 = "/Applications/Talend/workspace/countries_bkp_20190916.zip";
					java.util.zip.ZipInputStream zis_tFileInputDelimited_5 = null;
					try {
						if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {
							zis_tFileInputDelimited_5 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											(java.io.InputStream) filename_tFileInputDelimited_5));
						} else {
							zis_tFileInputDelimited_5 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											new java.io.FileInputStream(
													String.valueOf(filename_tFileInputDelimited_5))));
						}
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					java.util.zip.ZipEntry entry_tFileInputDelimited_5 = null;

					while (true) {
						try {
							entry_tFileInputDelimited_5 = zis_tFileInputDelimited_5
									.getNextEntry();
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());
							break;

						}
						if (entry_tFileInputDelimited_5 == null) {
							break;
						}
						if (entry_tFileInputDelimited_5.isDirectory()) { // directory
							continue;
						}
						try {
							fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
									zis_tFileInputDelimited_5, "ISO-8859-15",
									"|", "\n", true, 1, 0, -1, -1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_5 != null
								&& fid_tFileInputDelimited_5.nextRecord()) {
							rowstate_tFileInputDelimited_5.reset();

							row8 = null;

							boolean whetherReject_tFileInputDelimited_5 = false;
							row8 = new row8Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_5 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_5 = 0;

								row8.COUNTRY_ID = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);

								columnIndexWithD_tFileInputDelimited_5 = 1;

								row8.COUNTRY_NAME = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);

								columnIndexWithD_tFileInputDelimited_5 = 2;

								temp = fid_tFileInputDelimited_5
										.get(columnIndexWithD_tFileInputDelimited_5);
								if (temp.length() > 0) {

									try {

										row8.REGION_ID = ParserUtils
												.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_5) {
										rowstate_tFileInputDelimited_5
												.setException(new RuntimeException(
														String.format(
																"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
																"REGION_ID",
																"row8", temp,
																ex_tFileInputDelimited_5),
														ex_tFileInputDelimited_5));
									}

								} else {

									row8.REGION_ID = null;

								}

								if (rowstate_tFileInputDelimited_5
										.getException() != null) {
									throw rowstate_tFileInputDelimited_5
											.getException();
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_5 = true;

								System.err.println(e.getMessage());
								row8 = null;

							}

							/**
							 * [tFileInputDelimited_5 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_5 main ] start
							 */

							currentComponent = "tFileInputDelimited_5";

							tos_count_tFileInputDelimited_5++;

							/**
							 * [tFileInputDelimited_5 main ] stop
							 */

							/**
							 * [tFileInputDelimited_5 process_data_begin ] start
							 */

							currentComponent = "tFileInputDelimited_5";

							/**
							 * [tFileInputDelimited_5 process_data_begin ] stop
							 */
							// Start of branch "row8"
							if (row8 != null) {

								/**
								 * [tJavaRow_5 main ] start
								 */

								currentComponent = "tJavaRow_5";

								// row8
								// row8

								if (execStat) {
									runStat.updateStatOnConnection("row8"
											+ iterateId, 1, 1);
								}

								// Code generated according to input schema and
								// output schema
								row11.COUNTRY_ID = row8.COUNTRY_ID;
								row11.COUNTRY_NAME = row8.COUNTRY_NAME;
								row11.REGION_ID = row8.REGION_ID;

								nb_line_tJavaRow_5++;

								tos_count_tJavaRow_5++;

								/**
								 * [tJavaRow_5 main ] stop
								 */

								/**
								 * [tJavaRow_5 process_data_begin ] start
								 */

								currentComponent = "tJavaRow_5";

								/**
								 * [tJavaRow_5 process_data_begin ] stop
								 */

								/**
								 * [tMongoDBOutput_5 main ] start
								 */

								currentComponent = "tMongoDBOutput_5";

								// row11
								// row11

								if (execStat) {
									runStat.updateStatOnConnection("row11"
											+ iterateId, 1, 1);
								}

								com.mongodb.WriteResult resultMessage_tMongoDBOutput_5 = null;
								updateObjectUtil_tMongoDBOutput_5
										.setObject(new com.mongodb.BasicDBObject());

								updateObjectUtil_tMongoDBOutput_5.put(
										pathMap_tMongoDBOutput_5
												.get("COUNTRY_ID"),
										"COUNTRY_ID", row11.COUNTRY_ID);
								updateObjectUtil_tMongoDBOutput_5.put(
										pathMap_tMongoDBOutput_5
												.get("COUNTRY_NAME"),
										"COUNTRY_NAME", row11.COUNTRY_NAME);
								updateObjectUtil_tMongoDBOutput_5.put(
										pathMap_tMongoDBOutput_5
												.get("REGION_ID"), "REGION_ID",
										row11.REGION_ID);
								com.mongodb.BasicDBObject updateObj_tMongoDBOutput_5 = updateObjectUtil_tMongoDBOutput_5
										.getObject();

								resultMessage_tMongoDBOutput_5 = coll_tMongoDBOutput_5
										.insert(updateObj_tMongoDBOutput_5);

								nb_line_tMongoDBOutput_5++;

								tos_count_tMongoDBOutput_5++;

								/**
								 * [tMongoDBOutput_5 main ] stop
								 */

								/**
								 * [tMongoDBOutput_5 process_data_begin ] start
								 */

								currentComponent = "tMongoDBOutput_5";

								/**
								 * [tMongoDBOutput_5 process_data_begin ] stop
								 */

								/**
								 * [tMongoDBOutput_5 process_data_end ] start
								 */

								currentComponent = "tMongoDBOutput_5";

								/**
								 * [tMongoDBOutput_5 process_data_end ] stop
								 */

								/**
								 * [tJavaRow_5 process_data_end ] start
								 */

								currentComponent = "tJavaRow_5";

								/**
								 * [tJavaRow_5 process_data_end ] stop
								 */

							} // End of branch "row8"

							/**
							 * [tFileInputDelimited_5 process_data_end ] start
							 */

							currentComponent = "tFileInputDelimited_5";

							/**
							 * [tFileInputDelimited_5 process_data_end ] stop
							 */

							/**
							 * [tFileInputDelimited_5 end ] start
							 */

							currentComponent = "tFileInputDelimited_5";

						}
						nb_line_tFileInputDelimited_5 += fid_tFileInputDelimited_5
								.getRowNumber();
					}
				} finally {
					if (!((Object) ("/Applications/Talend/workspace/countries_bkp_20190916.zip") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_5 != null) {
							fid_tFileInputDelimited_5.close();
						}
					}
					if (fid_tFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE",
								nb_line_tFileInputDelimited_5);
					}

				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

				/**
				 * [tMongoDBOutput_5 end ] start
				 */

				currentComponent = "tMongoDBOutput_5";

				if (mongo_tMongoDBOutput_5 != null) {

					mongo_tMongoDBOutput_5.close();

				}
				resourceMap.put("finish_tMongoDBOutput_5", true);

				globalMap.put("tMongoDBOutput_5_NB_LINE",
						nb_line_tMongoDBOutput_5);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMongoDBOutput_5", true);
				end_Hash.put("tMongoDBOutput_5", System.currentTimeMillis());

				/**
				 * [tMongoDBOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

				/**
				 * [tMongoDBOutput_5 finally ] start
				 */

				currentComponent = "tMongoDBOutput_5";

				if (resourceMap.get("finish_tMongoDBOutput_5") == null) {
					if (resourceMap.get("mongo_tMongoDBOutput_5") != null) {

						((com.mongodb.Mongo) resourceMap
								.get("mongo_tMongoDBOutput_5")).close();

					}
				}

				/**
				 * [tMongoDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_FIAP_files_to_mongo = new byte[0];
		static byte[] commonByteArray_FIAP_files_to_mongo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal REGION_ID;

		public BigDecimal getREGION_ID() {
			return this.REGION_ID;
		}

		public String REGION_NAME;

		public String getREGION_NAME() {
			return this.REGION_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.REGION_ID == null) ? 0 : this.REGION_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.REGION_ID == null) {
				if (other.REGION_ID != null)
					return false;

			} else if (!this.REGION_ID.equals(other.REGION_ID))

				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.REGION_ID = this.REGION_ID;
			other.REGION_NAME = this.REGION_NAME;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.REGION_ID = this.REGION_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_files_to_mongo.length) {
					if (length < 1024
							&& commonByteArray_FIAP_files_to_mongo.length == 0) {
						commonByteArray_FIAP_files_to_mongo = new byte[1024];
					} else {
						commonByteArray_FIAP_files_to_mongo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_files_to_mongo, 0, length);
				strReturn = new String(commonByteArray_FIAP_files_to_mongo, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_files_to_mongo) {

				try {

					int length = 0;

					this.REGION_ID = (BigDecimal) dis.readObject();

					this.REGION_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.REGION_ID);

				// String

				writeString(this.REGION_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REGION_ID=" + String.valueOf(REGION_ID));
			sb.append(",REGION_NAME=" + REGION_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.REGION_ID, other.REGION_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_FIAP_files_to_mongo = new byte[0];
		static byte[] commonByteArray_FIAP_files_to_mongo = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal REGION_ID;

		public BigDecimal getREGION_ID() {
			return this.REGION_ID;
		}

		public String REGION_NAME;

		public String getREGION_NAME() {
			return this.REGION_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.REGION_ID == null) ? 0 : this.REGION_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.REGION_ID == null) {
				if (other.REGION_ID != null)
					return false;

			} else if (!this.REGION_ID.equals(other.REGION_ID))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.REGION_ID = this.REGION_ID;
			other.REGION_NAME = this.REGION_NAME;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.REGION_ID = this.REGION_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_files_to_mongo.length) {
					if (length < 1024
							&& commonByteArray_FIAP_files_to_mongo.length == 0) {
						commonByteArray_FIAP_files_to_mongo = new byte[1024];
					} else {
						commonByteArray_FIAP_files_to_mongo = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_files_to_mongo, 0, length);
				strReturn = new String(commonByteArray_FIAP_files_to_mongo, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_files_to_mongo) {

				try {

					int length = 0;

					this.REGION_ID = (BigDecimal) dis.readObject();

					this.REGION_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.REGION_ID);

				// String

				writeString(this.REGION_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REGION_ID=" + String.valueOf(REGION_ID));
			sb.append(",REGION_NAME=" + REGION_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.REGION_ID, other.REGION_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				row12Struct row12 = new row12Struct();

				/**
				 * [tMongoDBOutput_6 begin ] start
				 */

				ok_Hash.put("tMongoDBOutput_6", false);
				start_Hash.put("tMongoDBOutput_6", System.currentTimeMillis());

				currentComponent = "tMongoDBOutput_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row12" + iterateId, 0,
								0);

					}
				}

				int tos_count_tMongoDBOutput_6 = 0;

				int nb_line_tMongoDBOutput_6 = 0;

				class DBObjectUtil_tMongoDBOutput_6 {

					private com.mongodb.BasicDBObject object = null;

					// Put value to embedded document
					// If have no embedded document, put the value to root
					// document
					public void put(String parentNode, String curentName,
							Object value) {
						if (parentNode == null || "".equals(parentNode)) {
							object.put(curentName, value);
						} else {
							String objNames[] = parentNode.split("\\.");
							com.mongodb.BasicDBObject lastNode = getParentNode(
									parentNode, objNames.length - 1);
							lastNode.put(curentName, value);
							com.mongodb.BasicDBObject parenttNode = null;
							for (int i = objNames.length - 1; i >= 0; i--) {
								parenttNode = getParentNode(parentNode, i - 1);
								parenttNode.put(objNames[i], lastNode);
								lastNode = (com.mongodb.BasicDBObject) parenttNode
										.clone();
							}
							object = lastNode;
						}
					}

					// Get node(embedded document) by path configuration
					public com.mongodb.BasicDBObject getParentNode(
							String parentNode, int index) {
						com.mongodb.BasicDBObject basicDBObject = object;
						if (parentNode == null || "".equals(parentNode)) {
							return object;
						} else {
							String objNames[] = parentNode.split("\\.");
							for (int i = 0; i <= index; i++) {
								basicDBObject = (com.mongodb.BasicDBObject) basicDBObject
										.get(objNames[i]);
								if (basicDBObject == null) {
									basicDBObject = new com.mongodb.BasicDBObject();
									return basicDBObject;
								}
								if (i == index) {
									break;
								}
							}
							return basicDBObject;
						}
					}

					public void putkeyNode(String parentNode,
							String curentName, Object value) {
						if (parentNode == null || "".equals(parentNode)
								|| ".".equals(parentNode)) {
							put(parentNode, curentName, value);
						} else {
							put("", parentNode + "." + curentName, value);
						}
					}

					public com.mongodb.BasicDBObject getObject() {
						return this.object;
					}

					public void setObject(com.mongodb.BasicDBObject object) {
						this.object = object;
					}

				}

				DBObjectUtil_tMongoDBOutput_6 updateObjectUtil_tMongoDBOutput_6 = new DBObjectUtil_tMongoDBOutput_6();
				DBObjectUtil_tMongoDBOutput_6 queryObjectUtil_tMongoDBOutput_6 = new DBObjectUtil_tMongoDBOutput_6();
				java.util.Map<String, String> pathMap_tMongoDBOutput_6 = new java.util.HashMap<String, String>();
				com.mongodb.Mongo mongo_tMongoDBOutput_6 = null;
				com.mongodb.DB db_tMongoDBOutput_6 = null;

				pathMap_tMongoDBOutput_6.put("REGION_ID", "");

				pathMap_tMongoDBOutput_6.put("REGION_NAME", "");

				java.util.logging.Logger.getLogger("org.mongodb.driver")
						.setLevel(java.util.logging.Level.SEVERE);
				// Empty client options
				com.mongodb.MongoClientOptions clientOptions_tMongoDBOutput_6 = new com.mongodb.MongoClientOptions.Builder()
						.build();
				// Empty client credentials list
				java.util.List<com.mongodb.MongoCredential> mongoCredentialList_tMongoDBOutput_6 = new java.util.ArrayList<com.mongodb.MongoCredential>();

				com.mongodb.ServerAddress serverAddress_tMongoDBOutput_6 = new com.mongodb.ServerAddress(
						"localhost", 27017);
				mongo_tMongoDBOutput_6 = new com.mongodb.MongoClient(
						serverAddress_tMongoDBOutput_6,
						mongoCredentialList_tMongoDBOutput_6,
						clientOptions_tMongoDBOutput_6);
				resourceMap.put("mongo_tMongoDBOutput_6",
						mongo_tMongoDBOutput_6);
				db_tMongoDBOutput_6 = mongo_tMongoDBOutput_6
						.getDB("mongobands");

				com.mongodb.DBCollection coll_tMongoDBOutput_6 = db_tMongoDBOutput_6
						.getCollection("regions");

				/**
				 * [tMongoDBOutput_6 begin ] stop
				 */

				/**
				 * [tJavaRow_6 begin ] start
				 */

				ok_Hash.put("tJavaRow_6", false);
				start_Hash.put("tJavaRow_6", System.currentTimeMillis());

				currentComponent = "tJavaRow_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_6 = 0;

				int nb_line_tJavaRow_6 = 0;

				/**
				 * [tJavaRow_6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				try {

					Object filename_tFileInputDelimited_6 = "/Applications/Talend/workspace/regions_20190916.zip";
					java.util.zip.ZipInputStream zis_tFileInputDelimited_6 = null;
					try {
						if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {
							zis_tFileInputDelimited_6 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											(java.io.InputStream) filename_tFileInputDelimited_6));
						} else {
							zis_tFileInputDelimited_6 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											new java.io.FileInputStream(
													String.valueOf(filename_tFileInputDelimited_6))));
						}
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}
					java.util.zip.ZipEntry entry_tFileInputDelimited_6 = null;

					while (true) {
						try {
							entry_tFileInputDelimited_6 = zis_tFileInputDelimited_6
									.getNextEntry();
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());
							break;

						}
						if (entry_tFileInputDelimited_6 == null) {
							break;
						}
						if (entry_tFileInputDelimited_6.isDirectory()) { // directory
							continue;
						}
						try {
							fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(
									zis_tFileInputDelimited_6, "ISO-8859-15",
									"|", "\n", true, 1, 0, -1, -1, false);
						} catch (java.lang.Exception e) {

							System.err.println(e.getMessage());

						}

						while (fid_tFileInputDelimited_6 != null
								&& fid_tFileInputDelimited_6.nextRecord()) {
							rowstate_tFileInputDelimited_6.reset();

							row9 = null;

							boolean whetherReject_tFileInputDelimited_6 = false;
							row9 = new row9Struct();
							try {

								int columnIndexWithD_tFileInputDelimited_6 = 0;

								String temp = "";

								columnIndexWithD_tFileInputDelimited_6 = 0;

								temp = fid_tFileInputDelimited_6
										.get(columnIndexWithD_tFileInputDelimited_6);
								if (temp.length() > 0) {

									try {

										row9.REGION_ID = ParserUtils
												.parseTo_BigDecimal(temp);

									} catch (java.lang.Exception ex_tFileInputDelimited_6) {
										rowstate_tFileInputDelimited_6
												.setException(new RuntimeException(
														String.format(
																"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
																"REGION_ID",
																"row9", temp,
																ex_tFileInputDelimited_6),
														ex_tFileInputDelimited_6));
									}

								} else {

									row9.REGION_ID = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 1;

								row9.REGION_NAME = fid_tFileInputDelimited_6
										.get(columnIndexWithD_tFileInputDelimited_6);

								if (rowstate_tFileInputDelimited_6
										.getException() != null) {
									throw rowstate_tFileInputDelimited_6
											.getException();
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_6 = true;

								System.err.println(e.getMessage());
								row9 = null;

							}

							/**
							 * [tFileInputDelimited_6 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_6 main ] start
							 */

							currentComponent = "tFileInputDelimited_6";

							tos_count_tFileInputDelimited_6++;

							/**
							 * [tFileInputDelimited_6 main ] stop
							 */

							/**
							 * [tFileInputDelimited_6 process_data_begin ] start
							 */

							currentComponent = "tFileInputDelimited_6";

							/**
							 * [tFileInputDelimited_6 process_data_begin ] stop
							 */
							// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tJavaRow_6 main ] start
								 */

								currentComponent = "tJavaRow_6";

								// row9
								// row9

								if (execStat) {
									runStat.updateStatOnConnection("row9"
											+ iterateId, 1, 1);
								}

								// Code generated according to input schema and
								// output schema
								row12.REGION_ID = row9.REGION_ID;
								row12.REGION_NAME = row9.REGION_NAME;

								nb_line_tJavaRow_6++;

								tos_count_tJavaRow_6++;

								/**
								 * [tJavaRow_6 main ] stop
								 */

								/**
								 * [tJavaRow_6 process_data_begin ] start
								 */

								currentComponent = "tJavaRow_6";

								/**
								 * [tJavaRow_6 process_data_begin ] stop
								 */

								/**
								 * [tMongoDBOutput_6 main ] start
								 */

								currentComponent = "tMongoDBOutput_6";

								// row12
								// row12

								if (execStat) {
									runStat.updateStatOnConnection("row12"
											+ iterateId, 1, 1);
								}

								com.mongodb.WriteResult resultMessage_tMongoDBOutput_6 = null;
								updateObjectUtil_tMongoDBOutput_6
										.setObject(new com.mongodb.BasicDBObject());

								updateObjectUtil_tMongoDBOutput_6.put(
										pathMap_tMongoDBOutput_6
												.get("REGION_ID"), "REGION_ID",
										row12.REGION_ID);
								updateObjectUtil_tMongoDBOutput_6.put(
										pathMap_tMongoDBOutput_6
												.get("REGION_NAME"),
										"REGION_NAME", row12.REGION_NAME);
								com.mongodb.BasicDBObject updateObj_tMongoDBOutput_6 = updateObjectUtil_tMongoDBOutput_6
										.getObject();

								resultMessage_tMongoDBOutput_6 = coll_tMongoDBOutput_6
										.insert(updateObj_tMongoDBOutput_6);

								nb_line_tMongoDBOutput_6++;

								tos_count_tMongoDBOutput_6++;

								/**
								 * [tMongoDBOutput_6 main ] stop
								 */

								/**
								 * [tMongoDBOutput_6 process_data_begin ] start
								 */

								currentComponent = "tMongoDBOutput_6";

								/**
								 * [tMongoDBOutput_6 process_data_begin ] stop
								 */

								/**
								 * [tMongoDBOutput_6 process_data_end ] start
								 */

								currentComponent = "tMongoDBOutput_6";

								/**
								 * [tMongoDBOutput_6 process_data_end ] stop
								 */

								/**
								 * [tJavaRow_6 process_data_end ] start
								 */

								currentComponent = "tJavaRow_6";

								/**
								 * [tJavaRow_6 process_data_end ] stop
								 */

							} // End of branch "row9"

							/**
							 * [tFileInputDelimited_6 process_data_end ] start
							 */

							currentComponent = "tFileInputDelimited_6";

							/**
							 * [tFileInputDelimited_6 process_data_end ] stop
							 */

							/**
							 * [tFileInputDelimited_6 end ] start
							 */

							currentComponent = "tFileInputDelimited_6";

						}
						nb_line_tFileInputDelimited_6 += fid_tFileInputDelimited_6
								.getRowNumber();
					}
				} finally {
					if (!((Object) ("/Applications/Talend/workspace/regions_20190916.zip") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_6 != null) {
							fid_tFileInputDelimited_6.close();
						}
					}
					if (fid_tFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE",
								nb_line_tFileInputDelimited_6);
					}

				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tJavaRow_6 end ] start
				 */

				currentComponent = "tJavaRow_6";

				globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_6", true);
				end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				/**
				 * [tJavaRow_6 end ] stop
				 */

				/**
				 * [tMongoDBOutput_6 end ] start
				 */

				currentComponent = "tMongoDBOutput_6";

				if (mongo_tMongoDBOutput_6 != null) {

					mongo_tMongoDBOutput_6.close();

				}
				resourceMap.put("finish_tMongoDBOutput_6", true);

				globalMap.put("tMongoDBOutput_6_NB_LINE",
						nb_line_tMongoDBOutput_6);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tMongoDBOutput_6", true);
				end_Hash.put("tMongoDBOutput_6", System.currentTimeMillis());

				/**
				 * [tMongoDBOutput_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_6 finally ] start
				 */

				currentComponent = "tFileInputDelimited_6";

				/**
				 * [tFileInputDelimited_6 finally ] stop
				 */

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

				/**
				 * [tMongoDBOutput_6 finally ] start
				 */

				currentComponent = "tMongoDBOutput_6";

				if (resourceMap.get("finish_tMongoDBOutput_6") == null) {
					if (resourceMap.get("mongo_tMongoDBOutput_6") != null) {

						((com.mongodb.Mongo) resourceMap
								.get("mongo_tMongoDBOutput_6")).close();

					}
				}

				/**
				 * [tMongoDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final files_to_mongo files_to_mongoClass = new files_to_mongo();

		int exitCode = files_to_mongoClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = files_to_mongo.class
					.getClassLoader().getResourceAsStream(
							"fiap/files_to_mongo_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = files_to_mongo.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_2.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_3) {
			globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_3.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_4) {
			globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_4.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_5) {
			globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_5.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_6) {
			globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_6.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : files_to_mongo");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 190471 characters generated by Talend Open Studio for Big Data on the
 * September 16, 2019 6:59:21 PM BRT
 ************************************************************************************************/
