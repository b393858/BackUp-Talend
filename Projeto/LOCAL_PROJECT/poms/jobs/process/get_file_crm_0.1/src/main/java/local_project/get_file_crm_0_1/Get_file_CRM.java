// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package local_project.get_file_crm_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Get_file_CRM Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class Get_file_CRM implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Get_file_CRM";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Get_file_CRM.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Get_file_CRM.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tREST_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileList_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tREST_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tREST_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLogRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tREST_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tREST_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Get_file_CRM.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Get_file_CRM.length == 0) {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM) {

				try {

					int length = 0;

					this.Body = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Get_file_CRM.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Get_file_CRM.length == 0) {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Get_file_CRM.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Get_file_CRM.length == 0) {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tREST_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tREST_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row10Struct row10 = new row10Struct();
				row10Struct row2 = row10;

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"/Users/leandro.mendes/Accenture/Raizen/tmp-crm/pre/csvfromapi.txt"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					throw new RuntimeException(
							"The particular file \""
									+ filetFileOutputDelimited_1
											.getAbsoluteFile()
									+ "\" already exist. If you want to overwrite the file, please uncheck the"
									+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								"UTF-8"));

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[1];

					public void addRow(String[] row) {

						for (int i = 0; i < 1; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 0 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);

						// last column
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() - fillChars[1].length()
								+ 2; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "Body", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tREST_1 begin ] start
				 */

				ok_Hash.put("tREST_1", false);
				start_Hash.put("tREST_1", System.currentTimeMillis());

				currentComponent = "tREST_1";

				int tos_count_tREST_1 = 0;

				String endpoint_tREST_1 = "https://dashboard.pmweb.com.br:443/api/v2/metrics/get?v=983&token=9276d698266b0e216cac27e187f1467ee666f6f0101&format=csv";

				String trustStoreFile_tREST_1 = System
						.getProperty("javax.net.ssl.trustStore");
				String trustStoreType_tREST_1 = System
						.getProperty("javax.net.ssl.trustStoreType");
				String trustStorePWD_tREST_1 = System
						.getProperty("javax.net.ssl.trustStorePassword");

				String keyStoreFile_tREST_1 = System
						.getProperty("javax.net.ssl.keyStore");
				String keyStoreType_tREST_1 = System
						.getProperty("javax.net.ssl.keyStoreType");
				String keyStorePWD_tREST_1 = System
						.getProperty("javax.net.ssl.keyStorePassword");

				com.sun.jersey.api.client.config.ClientConfig config_tREST_1 = new com.sun.jersey.api.client.config.DefaultClientConfig();
				javax.net.ssl.SSLContext ctx_tREST_1 = javax.net.ssl.SSLContext
						.getInstance("SSL");

				javax.net.ssl.TrustManager[] tms_tREST_1 = null;
				if (trustStoreFile_tREST_1 != null
						&& trustStoreType_tREST_1 != null) {
					char[] password_tREST_1 = null;
					if (trustStorePWD_tREST_1 != null)
						password_tREST_1 = trustStorePWD_tREST_1.toCharArray();
					java.security.KeyStore trustStore_tREST_1 = java.security.KeyStore
							.getInstance(trustStoreType_tREST_1);
					trustStore_tREST_1.load(new java.io.FileInputStream(
							trustStoreFile_tREST_1), password_tREST_1);

					javax.net.ssl.TrustManagerFactory tmf_tREST_1 = javax.net.ssl.TrustManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory
									.getDefaultAlgorithm());
					tmf_tREST_1.init(trustStore_tREST_1);
					tms_tREST_1 = tmf_tREST_1.getTrustManagers();
				}

				javax.net.ssl.KeyManager[] kms_tREST_1 = null;
				if (keyStoreFile_tREST_1 != null
						&& keyStoreType_tREST_1 != null) {
					char[] password_tREST_1 = null;
					if (keyStorePWD_tREST_1 != null)
						password_tREST_1 = keyStorePWD_tREST_1.toCharArray();
					java.security.KeyStore keyStore_tREST_1 = java.security.KeyStore
							.getInstance(keyStoreType_tREST_1);
					keyStore_tREST_1.load(new java.io.FileInputStream(
							keyStoreFile_tREST_1), password_tREST_1);

					javax.net.ssl.KeyManagerFactory kmf_tREST_1 = javax.net.ssl.KeyManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory
									.getDefaultAlgorithm());
					kmf_tREST_1.init(keyStore_tREST_1, password_tREST_1);
					kms_tREST_1 = kmf_tREST_1.getKeyManagers();
				}

				ctx_tREST_1.init(kms_tREST_1, tms_tREST_1, null);
				config_tREST_1
						.getProperties()
						.put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
								new com.sun.jersey.client.urlconnection.HTTPSProperties(
										new javax.net.ssl.HostnameVerifier() {

											public boolean verify(
													String hostName,
													javax.net.ssl.SSLSession session) {
												return true;
											}
										}, ctx_tREST_1));

				com.sun.jersey.api.client.Client restClient_tREST_1 = com.sun.jersey.api.client.Client
						.create(config_tREST_1);

				java.util.Map<String, Object> headers_tREST_1 = new java.util.HashMap<String, Object>();

				Object transfer_encoding_tREST_1 = headers_tREST_1
						.get("Transfer-Encoding");
				if (transfer_encoding_tREST_1 != null
						&& "chunked".equals(transfer_encoding_tREST_1)) {
					restClient_tREST_1.setChunkedEncodingSize(4096);
				}

				com.sun.jersey.api.client.WebResource restResource_tREST_1;
				if (endpoint_tREST_1 != null && !("").equals(endpoint_tREST_1)) {
					restResource_tREST_1 = restClient_tREST_1
							.resource(endpoint_tREST_1);
				} else {
					throw new IllegalArgumentException("url can't be empty!");
				}

				com.sun.jersey.api.client.ClientResponse errorResponse_tREST_1 = null;
				String restResponse_tREST_1 = "";
				try {

					com.sun.jersey.api.client.WebResource.Builder builder_tREST_1 = null;
					for (java.util.Map.Entry<String, Object> header_tREST_1 : headers_tREST_1
							.entrySet()) {
						if (builder_tREST_1 == null) {
							builder_tREST_1 = restResource_tREST_1.header(
									header_tREST_1.getKey(),
									header_tREST_1.getValue());
						} else {
							builder_tREST_1.header(header_tREST_1.getKey(),
									header_tREST_1.getValue());
						}
					}

					if (builder_tREST_1 != null) {
						restResponse_tREST_1 = builder_tREST_1
								.get(String.class);
					} else {
						restResponse_tREST_1 = restResource_tREST_1
								.get(String.class);
					}

				} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
					errorResponse_tREST_1 = ue.getResponse();
				}

				// for output

				row1 = new row1Struct();
				if (errorResponse_tREST_1 != null) {
					row1.ERROR_CODE = errorResponse_tREST_1.getStatus();
					if (row1.ERROR_CODE != 204) {
						row1.Body = errorResponse_tREST_1
								.getEntity(String.class);
					}
				} else {
					row1.Body = restResponse_tREST_1;
				}

				/**
				 * [tREST_1 begin ] stop
				 */

				/**
				 * [tREST_1 main ] start
				 */

				currentComponent = "tREST_1";

				tos_count_tREST_1++;

				/**
				 * [tREST_1 main ] stop
				 */

				/**
				 * [tREST_1 process_data_begin ] start
				 */

				currentComponent = "tREST_1";

				/**
				 * [tREST_1 process_data_begin ] stop
				 */

				/**
				 * [tJavaRow_3 main ] start
				 */

				currentComponent = "tJavaRow_3";

				// row1
				// row1

				if (execStat) {
					runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
				}

				// Code generated according to input schema and output schema
				row10.Body = row1.Body.replace(", ", ".")
						.replace(",00:", ", 00:").replace(",00", ".00");
				row10.ERROR_CODE = row1.ERROR_CODE;

				nb_line_tJavaRow_3++;

				tos_count_tJavaRow_3++;

				/**
				 * [tJavaRow_3 main ] stop
				 */

				/**
				 * [tJavaRow_3 process_data_begin ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 process_data_begin ] stop
				 */

				/**
				 * [tLogRow_1 main ] start
				 */

				currentComponent = "tLogRow_1";

				// row10
				// row10

				if (execStat) {
					runStat.updateStatOnConnection("row10" + iterateId, 1, 1);
				}

				// /////////////////////

				String[] row_tLogRow_1 = new String[1];

				if (row10.Body != null) { //
					row_tLogRow_1[0] = String.valueOf(row10.Body);

				} //

				util_tLogRow_1.addRow(row_tLogRow_1);
				nb_line_tLogRow_1++;
				// ////

				// ////

				// /////////////////////

				row2 = row10;

				tos_count_tLogRow_1++;

				/**
				 * [tLogRow_1 main ] stop
				 */

				/**
				 * [tLogRow_1 process_data_begin ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 process_data_begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 main ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				// row2
				// row2

				if (execStat) {
					runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
				}

				StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
				if (row2.Body != null) {
					sb_tFileOutputDelimited_1.append(row2.Body);
				}
				sb_tFileOutputDelimited_1
						.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

				nb_line_tFileOutputDelimited_1++;
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1
						.toString());

				tos_count_tFileOutputDelimited_1++;

				/**
				 * [tFileOutputDelimited_1 main ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 process_data_begin ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				/**
				 * [tFileOutputDelimited_1 process_data_begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 process_data_end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				/**
				 * [tFileOutputDelimited_1 process_data_end ] stop
				 */

				/**
				 * [tLogRow_1 process_data_end ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 process_data_end ] stop
				 */

				/**
				 * [tJavaRow_3 process_data_end ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 process_data_end ] stop
				 */

				/**
				 * [tREST_1 process_data_end ] start
				 */

				currentComponent = "tREST_1";

				/**
				 * [tREST_1 process_data_end ] stop
				 */

				/**
				 * [tREST_1 end ] start
				 */

				currentComponent = "tREST_1";

				ok_Hash.put("tREST_1", true);
				end_Hash.put("tREST_1", System.currentTimeMillis());

				/**
				 * [tREST_1 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1
						.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tREST_1 finally ] start
				 */

				currentComponent = "tREST_1";

				/**
				 * [tREST_1 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tREST_1_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[0];

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public String Campaign;

		public String getCampaign() {
			return this.Campaign;
		}

		public String Date_Year;

		public String getDate_Year() {
			return this.Date_Year;
		}

		public String Date_Month;

		public String getDate_Month() {
			return this.Date_Month;
		}

		public String Date_Week;

		public String getDate_Week() {
			return this.Date_Week;
		}

		public String ExtCampaignID;

		public String getExtCampaignID() {
			return this.ExtCampaignID;
		}

		public String FolderName;

		public String getFolderName() {
			return this.FolderName;
		}

		public String LaunchDate;

		public String getLaunchDate() {
			return this.LaunchDate;
		}

		public String LaunchID;

		public String getLaunchID() {
			return this.LaunchID;
		}

		public String LaunchTime;

		public String getLaunchTime() {
			return this.LaunchTime;
		}

		public String MarketingProgram;

		public String getMarketingProgram() {
			return this.MarketingProgram;
		}

		public String MarketingStrategy;

		public String getMarketingStrategy() {
			return this.MarketingStrategy;
		}

		public String ProgramName;

		public String getProgramName() {
			return this.ProgramName;
		}

		public String ProgramStage;

		public String getProgramStage() {
			return this.ProgramStage;
		}

		public String Segment;

		public String getSegment() {
			return this.Segment;
		}

		public String Subject;

		public String getSubject() {
			return this.Subject;
		}

		public String ReturnPath;

		public String getReturnPath() {
			return this.ReturnPath;
		}

		public String Classification;

		public String getClassification() {
			return this.Classification;
		}

		public String Sent;

		public String getSent() {
			return this.Sent;
		}

		public String Opens;

		public String getOpens() {
			return this.Opens;
		}

		public String Clicks;

		public String getClicks() {
			return this.Clicks;
		}

		public String Conversions;

		public String getConversions() {
			return this.Conversions;
		}

		public String Delivered;

		public String getDelivered() {
			return this.Delivered;
		}

		public String Distribution;

		public String getDistribution() {
			return this.Distribution;
		}

		public String HardBounces;

		public String getHardBounces() {
			return this.HardBounces;
		}

		public String OtherUndeliverable;

		public String getOtherUndeliverable() {
			return this.OtherUndeliverable;
		}

		public String PossibleBlock;

		public String getPossibleBlock() {
			return this.PossibleBlock;
		}

		public String SoftBounces;

		public String getSoftBounces() {
			return this.SoftBounces;
		}

		public String SpamComplaintRate;

		public String getSpamComplaintRate() {
			return this.SpamComplaintRate;
		}

		public String TotalClicks;

		public String getTotalClicks() {
			return this.TotalClicks;
		}

		public String TotalOpens;

		public String getTotalOpens() {
			return this.TotalOpens;
		}

		public String TotalOrders;

		public String getTotalOrders() {
			return this.TotalOrders;
		}

		public String SpamComplaints;

		public String getSpamComplaints() {
			return this.SpamComplaints;
		}

		public String Undeliverable;

		public String getUndeliverable() {
			return this.Undeliverable;
		}

		public String Clicks_Desktop;

		public String getClicks_Desktop() {
			return this.Clicks_Desktop;
		}

		public String Clicks_Mobile;

		public String getClicks_Mobile() {
			return this.Clicks_Mobile;
		}

		public String Clicks_Other;

		public String getClicks_Other() {
			return this.Clicks_Other;
		}

		public String UniqueConversion;

		public String getUniqueConversion() {
			return this.UniqueConversion;
		}

		public String Opens_Desktop;

		public String getOpens_Desktop() {
			return this.Opens_Desktop;
		}

		public String Opens_Mobile;

		public String getOpens_Mobile() {
			return this.Opens_Mobile;
		}

		public String Opens_Other;

		public String getOpens_Other() {
			return this.Opens_Other;
		}

		public String _Unsubscribes;

		public String get_Unsubscribes() {
			return this._Unsubscribes;
		}

		public String Bounces;

		public String getBounces() {
			return this.Bounces;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Get_file_CRM.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Get_file_CRM.length == 0) {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM) {

				try {

					int length = 0;

					this.Date = readString(dis);

					this.Campaign = readString(dis);

					this.Date_Year = readString(dis);

					this.Date_Month = readString(dis);

					this.Date_Week = readString(dis);

					this.ExtCampaignID = readString(dis);

					this.FolderName = readString(dis);

					this.LaunchDate = readString(dis);

					this.LaunchID = readString(dis);

					this.LaunchTime = readString(dis);

					this.MarketingProgram = readString(dis);

					this.MarketingStrategy = readString(dis);

					this.ProgramName = readString(dis);

					this.ProgramStage = readString(dis);

					this.Segment = readString(dis);

					this.Subject = readString(dis);

					this.ReturnPath = readString(dis);

					this.Classification = readString(dis);

					this.Sent = readString(dis);

					this.Opens = readString(dis);

					this.Clicks = readString(dis);

					this.Conversions = readString(dis);

					this.Delivered = readString(dis);

					this.Distribution = readString(dis);

					this.HardBounces = readString(dis);

					this.OtherUndeliverable = readString(dis);

					this.PossibleBlock = readString(dis);

					this.SoftBounces = readString(dis);

					this.SpamComplaintRate = readString(dis);

					this.TotalClicks = readString(dis);

					this.TotalOpens = readString(dis);

					this.TotalOrders = readString(dis);

					this.SpamComplaints = readString(dis);

					this.Undeliverable = readString(dis);

					this.Clicks_Desktop = readString(dis);

					this.Clicks_Mobile = readString(dis);

					this.Clicks_Other = readString(dis);

					this.UniqueConversion = readString(dis);

					this.Opens_Desktop = readString(dis);

					this.Opens_Mobile = readString(dis);

					this.Opens_Other = readString(dis);

					this._Unsubscribes = readString(dis);

					this.Bounces = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.Campaign, dos);

				// String

				writeString(this.Date_Year, dos);

				// String

				writeString(this.Date_Month, dos);

				// String

				writeString(this.Date_Week, dos);

				// String

				writeString(this.ExtCampaignID, dos);

				// String

				writeString(this.FolderName, dos);

				// String

				writeString(this.LaunchDate, dos);

				// String

				writeString(this.LaunchID, dos);

				// String

				writeString(this.LaunchTime, dos);

				// String

				writeString(this.MarketingProgram, dos);

				// String

				writeString(this.MarketingStrategy, dos);

				// String

				writeString(this.ProgramName, dos);

				// String

				writeString(this.ProgramStage, dos);

				// String

				writeString(this.Segment, dos);

				// String

				writeString(this.Subject, dos);

				// String

				writeString(this.ReturnPath, dos);

				// String

				writeString(this.Classification, dos);

				// String

				writeString(this.Sent, dos);

				// String

				writeString(this.Opens, dos);

				// String

				writeString(this.Clicks, dos);

				// String

				writeString(this.Conversions, dos);

				// String

				writeString(this.Delivered, dos);

				// String

				writeString(this.Distribution, dos);

				// String

				writeString(this.HardBounces, dos);

				// String

				writeString(this.OtherUndeliverable, dos);

				// String

				writeString(this.PossibleBlock, dos);

				// String

				writeString(this.SoftBounces, dos);

				// String

				writeString(this.SpamComplaintRate, dos);

				// String

				writeString(this.TotalClicks, dos);

				// String

				writeString(this.TotalOpens, dos);

				// String

				writeString(this.TotalOrders, dos);

				// String

				writeString(this.SpamComplaints, dos);

				// String

				writeString(this.Undeliverable, dos);

				// String

				writeString(this.Clicks_Desktop, dos);

				// String

				writeString(this.Clicks_Mobile, dos);

				// String

				writeString(this.Clicks_Other, dos);

				// String

				writeString(this.UniqueConversion, dos);

				// String

				writeString(this.Opens_Desktop, dos);

				// String

				writeString(this.Opens_Mobile, dos);

				// String

				writeString(this.Opens_Other, dos);

				// String

				writeString(this._Unsubscribes, dos);

				// String

				writeString(this.Bounces, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date=" + Date);
			sb.append(",Campaign=" + Campaign);
			sb.append(",Date_Year=" + Date_Year);
			sb.append(",Date_Month=" + Date_Month);
			sb.append(",Date_Week=" + Date_Week);
			sb.append(",ExtCampaignID=" + ExtCampaignID);
			sb.append(",FolderName=" + FolderName);
			sb.append(",LaunchDate=" + LaunchDate);
			sb.append(",LaunchID=" + LaunchID);
			sb.append(",LaunchTime=" + LaunchTime);
			sb.append(",MarketingProgram=" + MarketingProgram);
			sb.append(",MarketingStrategy=" + MarketingStrategy);
			sb.append(",ProgramName=" + ProgramName);
			sb.append(",ProgramStage=" + ProgramStage);
			sb.append(",Segment=" + Segment);
			sb.append(",Subject=" + Subject);
			sb.append(",ReturnPath=" + ReturnPath);
			sb.append(",Classification=" + Classification);
			sb.append(",Sent=" + Sent);
			sb.append(",Opens=" + Opens);
			sb.append(",Clicks=" + Clicks);
			sb.append(",Conversions=" + Conversions);
			sb.append(",Delivered=" + Delivered);
			sb.append(",Distribution=" + Distribution);
			sb.append(",HardBounces=" + HardBounces);
			sb.append(",OtherUndeliverable=" + OtherUndeliverable);
			sb.append(",PossibleBlock=" + PossibleBlock);
			sb.append(",SoftBounces=" + SoftBounces);
			sb.append(",SpamComplaintRate=" + SpamComplaintRate);
			sb.append(",TotalClicks=" + TotalClicks);
			sb.append(",TotalOpens=" + TotalOpens);
			sb.append(",TotalOrders=" + TotalOrders);
			sb.append(",SpamComplaints=" + SpamComplaints);
			sb.append(",Undeliverable=" + Undeliverable);
			sb.append(",Clicks_Desktop=" + Clicks_Desktop);
			sb.append(",Clicks_Mobile=" + Clicks_Mobile);
			sb.append(",Clicks_Other=" + Clicks_Other);
			sb.append(",UniqueConversion=" + UniqueConversion);
			sb.append(",Opens_Desktop=" + Opens_Desktop);
			sb.append(",Opens_Mobile=" + Opens_Mobile);
			sb.append(",Opens_Other=" + Opens_Other);
			sb.append(",_Unsubscribes=" + _Unsubscribes);
			sb.append(",Bounces=" + Bounces);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[0];

		public String _Date_;

		public String get_Date_() {
			return this._Date_;
		}

		public String _Campaign_;

		public String get_Campaign_() {
			return this._Campaign_;
		}

		public String _Date_Year_;

		public String get_Date_Year_() {
			return this._Date_Year_;
		}

		public String _Date_Month_;

		public String get_Date_Month_() {
			return this._Date_Month_;
		}

		public String _Date_Week_;

		public String get_Date_Week_() {
			return this._Date_Week_;
		}

		public String _ExtCampaignID_;

		public String get_ExtCampaignID_() {
			return this._ExtCampaignID_;
		}

		public String _FolderName_;

		public String get_FolderName_() {
			return this._FolderName_;
		}

		public String _LaunchDate_;

		public String get_LaunchDate_() {
			return this._LaunchDate_;
		}

		public String _LaunchID_;

		public String get_LaunchID_() {
			return this._LaunchID_;
		}

		public String _LaunchTime_;

		public String get_LaunchTime_() {
			return this._LaunchTime_;
		}

		public String _MarketingProgram_;

		public String get_MarketingProgram_() {
			return this._MarketingProgram_;
		}

		public String _MarketingStrategy_;

		public String get_MarketingStrategy_() {
			return this._MarketingStrategy_;
		}

		public String _ProgramName_;

		public String get_ProgramName_() {
			return this._ProgramName_;
		}

		public String _ProgramStage_;

		public String get_ProgramStage_() {
			return this._ProgramStage_;
		}

		public String _Segment_;

		public String get_Segment_() {
			return this._Segment_;
		}

		public String _Subject_;

		public String get_Subject_() {
			return this._Subject_;
		}

		public String _ReturnPath_;

		public String get_ReturnPath_() {
			return this._ReturnPath_;
		}

		public String _Classification_;

		public String get_Classification_() {
			return this._Classification_;
		}

		public String _Sent_;

		public String get_Sent_() {
			return this._Sent_;
		}

		public String _Opens_;

		public String get_Opens_() {
			return this._Opens_;
		}

		public String _Clicks_;

		public String get_Clicks_() {
			return this._Clicks_;
		}

		public String _Conversions_;

		public String get_Conversions_() {
			return this._Conversions_;
		}

		public String _Delivered_;

		public String get_Delivered_() {
			return this._Delivered_;
		}

		public String _Distribution_;

		public String get_Distribution_() {
			return this._Distribution_;
		}

		public String _HardBounces_;

		public String get_HardBounces_() {
			return this._HardBounces_;
		}

		public String _OtherUndeliverable_;

		public String get_OtherUndeliverable_() {
			return this._OtherUndeliverable_;
		}

		public String _PossibleBlock_;

		public String get_PossibleBlock_() {
			return this._PossibleBlock_;
		}

		public String _SoftBounces_;

		public String get_SoftBounces_() {
			return this._SoftBounces_;
		}

		public String _SpamComplaintRate_;

		public String get_SpamComplaintRate_() {
			return this._SpamComplaintRate_;
		}

		public String _TotalClicks_;

		public String get_TotalClicks_() {
			return this._TotalClicks_;
		}

		public String _TotalOpens_;

		public String get_TotalOpens_() {
			return this._TotalOpens_;
		}

		public String _TotalOrders_;

		public String get_TotalOrders_() {
			return this._TotalOrders_;
		}

		public String _SpamComplaints_;

		public String get_SpamComplaints_() {
			return this._SpamComplaints_;
		}

		public String _Undeliverable_;

		public String get_Undeliverable_() {
			return this._Undeliverable_;
		}

		public String _Clicks_Desktop_;

		public String get_Clicks_Desktop_() {
			return this._Clicks_Desktop_;
		}

		public String _Clicks_Mobile_;

		public String get_Clicks_Mobile_() {
			return this._Clicks_Mobile_;
		}

		public String _Clicks_Other_;

		public String get_Clicks_Other_() {
			return this._Clicks_Other_;
		}

		public String _UniqueConversion_;

		public String get_UniqueConversion_() {
			return this._UniqueConversion_;
		}

		public String _Opens_Desktop_;

		public String get_Opens_Desktop_() {
			return this._Opens_Desktop_;
		}

		public String _Opens_Mobile_;

		public String get_Opens_Mobile_() {
			return this._Opens_Mobile_;
		}

		public String _Opens_Other_;

		public String get_Opens_Other_() {
			return this._Opens_Other_;
		}

		public String _Unsubscribes_;

		public String get_Unsubscribes_() {
			return this._Unsubscribes_;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Get_file_CRM.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Get_file_CRM.length == 0) {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM) {

				try {

					int length = 0;

					this._Date_ = readString(dis);

					this._Campaign_ = readString(dis);

					this._Date_Year_ = readString(dis);

					this._Date_Month_ = readString(dis);

					this._Date_Week_ = readString(dis);

					this._ExtCampaignID_ = readString(dis);

					this._FolderName_ = readString(dis);

					this._LaunchDate_ = readString(dis);

					this._LaunchID_ = readString(dis);

					this._LaunchTime_ = readString(dis);

					this._MarketingProgram_ = readString(dis);

					this._MarketingStrategy_ = readString(dis);

					this._ProgramName_ = readString(dis);

					this._ProgramStage_ = readString(dis);

					this._Segment_ = readString(dis);

					this._Subject_ = readString(dis);

					this._ReturnPath_ = readString(dis);

					this._Classification_ = readString(dis);

					this._Sent_ = readString(dis);

					this._Opens_ = readString(dis);

					this._Clicks_ = readString(dis);

					this._Conversions_ = readString(dis);

					this._Delivered_ = readString(dis);

					this._Distribution_ = readString(dis);

					this._HardBounces_ = readString(dis);

					this._OtherUndeliverable_ = readString(dis);

					this._PossibleBlock_ = readString(dis);

					this._SoftBounces_ = readString(dis);

					this._SpamComplaintRate_ = readString(dis);

					this._TotalClicks_ = readString(dis);

					this._TotalOpens_ = readString(dis);

					this._TotalOrders_ = readString(dis);

					this._SpamComplaints_ = readString(dis);

					this._Undeliverable_ = readString(dis);

					this._Clicks_Desktop_ = readString(dis);

					this._Clicks_Mobile_ = readString(dis);

					this._Clicks_Other_ = readString(dis);

					this._UniqueConversion_ = readString(dis);

					this._Opens_Desktop_ = readString(dis);

					this._Opens_Mobile_ = readString(dis);

					this._Opens_Other_ = readString(dis);

					this._Unsubscribes_ = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._Date_, dos);

				// String

				writeString(this._Campaign_, dos);

				// String

				writeString(this._Date_Year_, dos);

				// String

				writeString(this._Date_Month_, dos);

				// String

				writeString(this._Date_Week_, dos);

				// String

				writeString(this._ExtCampaignID_, dos);

				// String

				writeString(this._FolderName_, dos);

				// String

				writeString(this._LaunchDate_, dos);

				// String

				writeString(this._LaunchID_, dos);

				// String

				writeString(this._LaunchTime_, dos);

				// String

				writeString(this._MarketingProgram_, dos);

				// String

				writeString(this._MarketingStrategy_, dos);

				// String

				writeString(this._ProgramName_, dos);

				// String

				writeString(this._ProgramStage_, dos);

				// String

				writeString(this._Segment_, dos);

				// String

				writeString(this._Subject_, dos);

				// String

				writeString(this._ReturnPath_, dos);

				// String

				writeString(this._Classification_, dos);

				// String

				writeString(this._Sent_, dos);

				// String

				writeString(this._Opens_, dos);

				// String

				writeString(this._Clicks_, dos);

				// String

				writeString(this._Conversions_, dos);

				// String

				writeString(this._Delivered_, dos);

				// String

				writeString(this._Distribution_, dos);

				// String

				writeString(this._HardBounces_, dos);

				// String

				writeString(this._OtherUndeliverable_, dos);

				// String

				writeString(this._PossibleBlock_, dos);

				// String

				writeString(this._SoftBounces_, dos);

				// String

				writeString(this._SpamComplaintRate_, dos);

				// String

				writeString(this._TotalClicks_, dos);

				// String

				writeString(this._TotalOpens_, dos);

				// String

				writeString(this._TotalOrders_, dos);

				// String

				writeString(this._SpamComplaints_, dos);

				// String

				writeString(this._Undeliverable_, dos);

				// String

				writeString(this._Clicks_Desktop_, dos);

				// String

				writeString(this._Clicks_Mobile_, dos);

				// String

				writeString(this._Clicks_Other_, dos);

				// String

				writeString(this._UniqueConversion_, dos);

				// String

				writeString(this._Opens_Desktop_, dos);

				// String

				writeString(this._Opens_Mobile_, dos);

				// String

				writeString(this._Opens_Other_, dos);

				// String

				writeString(this._Unsubscribes_, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_Date_=" + _Date_);
			sb.append(",_Campaign_=" + _Campaign_);
			sb.append(",_Date_Year_=" + _Date_Year_);
			sb.append(",_Date_Month_=" + _Date_Month_);
			sb.append(",_Date_Week_=" + _Date_Week_);
			sb.append(",_ExtCampaignID_=" + _ExtCampaignID_);
			sb.append(",_FolderName_=" + _FolderName_);
			sb.append(",_LaunchDate_=" + _LaunchDate_);
			sb.append(",_LaunchID_=" + _LaunchID_);
			sb.append(",_LaunchTime_=" + _LaunchTime_);
			sb.append(",_MarketingProgram_=" + _MarketingProgram_);
			sb.append(",_MarketingStrategy_=" + _MarketingStrategy_);
			sb.append(",_ProgramName_=" + _ProgramName_);
			sb.append(",_ProgramStage_=" + _ProgramStage_);
			sb.append(",_Segment_=" + _Segment_);
			sb.append(",_Subject_=" + _Subject_);
			sb.append(",_ReturnPath_=" + _ReturnPath_);
			sb.append(",_Classification_=" + _Classification_);
			sb.append(",_Sent_=" + _Sent_);
			sb.append(",_Opens_=" + _Opens_);
			sb.append(",_Clicks_=" + _Clicks_);
			sb.append(",_Conversions_=" + _Conversions_);
			sb.append(",_Delivered_=" + _Delivered_);
			sb.append(",_Distribution_=" + _Distribution_);
			sb.append(",_HardBounces_=" + _HardBounces_);
			sb.append(",_OtherUndeliverable_=" + _OtherUndeliverable_);
			sb.append(",_PossibleBlock_=" + _PossibleBlock_);
			sb.append(",_SoftBounces_=" + _SoftBounces_);
			sb.append(",_SpamComplaintRate_=" + _SpamComplaintRate_);
			sb.append(",_TotalClicks_=" + _TotalClicks_);
			sb.append(",_TotalOpens_=" + _TotalOpens_);
			sb.append(",_TotalOrders_=" + _TotalOrders_);
			sb.append(",_SpamComplaints_=" + _SpamComplaints_);
			sb.append(",_Undeliverable_=" + _Undeliverable_);
			sb.append(",_Clicks_Desktop_=" + _Clicks_Desktop_);
			sb.append(",_Clicks_Mobile_=" + _Clicks_Mobile_);
			sb.append(",_Clicks_Other_=" + _Clicks_Other_);
			sb.append(",_UniqueConversion_=" + _UniqueConversion_);
			sb.append(",_Opens_Desktop_=" + _Opens_Desktop_);
			sb.append(",_Opens_Mobile_=" + _Opens_Mobile_);
			sb.append(",_Opens_Other_=" + _Opens_Other_);
			sb.append(",_Unsubscribes_=" + _Unsubscribes_);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[0];

		public String _Date_;

		public String get_Date_() {
			return this._Date_;
		}

		public String _Campaign_;

		public String get_Campaign_() {
			return this._Campaign_;
		}

		public String _Date_Year_;

		public String get_Date_Year_() {
			return this._Date_Year_;
		}

		public String _Date_Month_;

		public String get_Date_Month_() {
			return this._Date_Month_;
		}

		public String _Date_Week_;

		public String get_Date_Week_() {
			return this._Date_Week_;
		}

		public String _ExtCampaignID_;

		public String get_ExtCampaignID_() {
			return this._ExtCampaignID_;
		}

		public String _FolderName_;

		public String get_FolderName_() {
			return this._FolderName_;
		}

		public String _LaunchDate_;

		public String get_LaunchDate_() {
			return this._LaunchDate_;
		}

		public String _LaunchID_;

		public String get_LaunchID_() {
			return this._LaunchID_;
		}

		public String _LaunchTime_;

		public String get_LaunchTime_() {
			return this._LaunchTime_;
		}

		public String _MarketingProgram_;

		public String get_MarketingProgram_() {
			return this._MarketingProgram_;
		}

		public String _MarketingStrategy_;

		public String get_MarketingStrategy_() {
			return this._MarketingStrategy_;
		}

		public String _ProgramName_;

		public String get_ProgramName_() {
			return this._ProgramName_;
		}

		public String _ProgramStage_;

		public String get_ProgramStage_() {
			return this._ProgramStage_;
		}

		public String _Segment_;

		public String get_Segment_() {
			return this._Segment_;
		}

		public String _Subject_;

		public String get_Subject_() {
			return this._Subject_;
		}

		public String _ReturnPath_;

		public String get_ReturnPath_() {
			return this._ReturnPath_;
		}

		public String _Classification_;

		public String get_Classification_() {
			return this._Classification_;
		}

		public String _Sent_;

		public String get_Sent_() {
			return this._Sent_;
		}

		public String _Opens_;

		public String get_Opens_() {
			return this._Opens_;
		}

		public String _Clicks_;

		public String get_Clicks_() {
			return this._Clicks_;
		}

		public String _Conversions_;

		public String get_Conversions_() {
			return this._Conversions_;
		}

		public String _Delivered_;

		public String get_Delivered_() {
			return this._Delivered_;
		}

		public String _Distribution_;

		public String get_Distribution_() {
			return this._Distribution_;
		}

		public String _HardBounces_;

		public String get_HardBounces_() {
			return this._HardBounces_;
		}

		public String _OtherUndeliverable_;

		public String get_OtherUndeliverable_() {
			return this._OtherUndeliverable_;
		}

		public String _PossibleBlock_;

		public String get_PossibleBlock_() {
			return this._PossibleBlock_;
		}

		public String _SoftBounces_;

		public String get_SoftBounces_() {
			return this._SoftBounces_;
		}

		public String _SpamComplaintRate_;

		public String get_SpamComplaintRate_() {
			return this._SpamComplaintRate_;
		}

		public String _TotalClicks_;

		public String get_TotalClicks_() {
			return this._TotalClicks_;
		}

		public String _TotalOpens_;

		public String get_TotalOpens_() {
			return this._TotalOpens_;
		}

		public String _TotalOrders_;

		public String get_TotalOrders_() {
			return this._TotalOrders_;
		}

		public String _SpamComplaints_;

		public String get_SpamComplaints_() {
			return this._SpamComplaints_;
		}

		public String _Undeliverable_;

		public String get_Undeliverable_() {
			return this._Undeliverable_;
		}

		public String _Clicks_Desktop_;

		public String get_Clicks_Desktop_() {
			return this._Clicks_Desktop_;
		}

		public String _Clicks_Mobile_;

		public String get_Clicks_Mobile_() {
			return this._Clicks_Mobile_;
		}

		public String _Clicks_Other_;

		public String get_Clicks_Other_() {
			return this._Clicks_Other_;
		}

		public String _UniqueConversion_;

		public String get_UniqueConversion_() {
			return this._UniqueConversion_;
		}

		public String _Opens_Desktop_;

		public String get_Opens_Desktop_() {
			return this._Opens_Desktop_;
		}

		public String _Opens_Mobile_;

		public String get_Opens_Mobile_() {
			return this._Opens_Mobile_;
		}

		public String _Opens_Other_;

		public String get_Opens_Other_() {
			return this._Opens_Other_;
		}

		public String _Unsubscribes_;

		public String get_Unsubscribes_() {
			return this._Unsubscribes_;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Get_file_CRM.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Get_file_CRM.length == 0) {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM) {

				try {

					int length = 0;

					this._Date_ = readString(dis);

					this._Campaign_ = readString(dis);

					this._Date_Year_ = readString(dis);

					this._Date_Month_ = readString(dis);

					this._Date_Week_ = readString(dis);

					this._ExtCampaignID_ = readString(dis);

					this._FolderName_ = readString(dis);

					this._LaunchDate_ = readString(dis);

					this._LaunchID_ = readString(dis);

					this._LaunchTime_ = readString(dis);

					this._MarketingProgram_ = readString(dis);

					this._MarketingStrategy_ = readString(dis);

					this._ProgramName_ = readString(dis);

					this._ProgramStage_ = readString(dis);

					this._Segment_ = readString(dis);

					this._Subject_ = readString(dis);

					this._ReturnPath_ = readString(dis);

					this._Classification_ = readString(dis);

					this._Sent_ = readString(dis);

					this._Opens_ = readString(dis);

					this._Clicks_ = readString(dis);

					this._Conversions_ = readString(dis);

					this._Delivered_ = readString(dis);

					this._Distribution_ = readString(dis);

					this._HardBounces_ = readString(dis);

					this._OtherUndeliverable_ = readString(dis);

					this._PossibleBlock_ = readString(dis);

					this._SoftBounces_ = readString(dis);

					this._SpamComplaintRate_ = readString(dis);

					this._TotalClicks_ = readString(dis);

					this._TotalOpens_ = readString(dis);

					this._TotalOrders_ = readString(dis);

					this._SpamComplaints_ = readString(dis);

					this._Undeliverable_ = readString(dis);

					this._Clicks_Desktop_ = readString(dis);

					this._Clicks_Mobile_ = readString(dis);

					this._Clicks_Other_ = readString(dis);

					this._UniqueConversion_ = readString(dis);

					this._Opens_Desktop_ = readString(dis);

					this._Opens_Mobile_ = readString(dis);

					this._Opens_Other_ = readString(dis);

					this._Unsubscribes_ = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._Date_, dos);

				// String

				writeString(this._Campaign_, dos);

				// String

				writeString(this._Date_Year_, dos);

				// String

				writeString(this._Date_Month_, dos);

				// String

				writeString(this._Date_Week_, dos);

				// String

				writeString(this._ExtCampaignID_, dos);

				// String

				writeString(this._FolderName_, dos);

				// String

				writeString(this._LaunchDate_, dos);

				// String

				writeString(this._LaunchID_, dos);

				// String

				writeString(this._LaunchTime_, dos);

				// String

				writeString(this._MarketingProgram_, dos);

				// String

				writeString(this._MarketingStrategy_, dos);

				// String

				writeString(this._ProgramName_, dos);

				// String

				writeString(this._ProgramStage_, dos);

				// String

				writeString(this._Segment_, dos);

				// String

				writeString(this._Subject_, dos);

				// String

				writeString(this._ReturnPath_, dos);

				// String

				writeString(this._Classification_, dos);

				// String

				writeString(this._Sent_, dos);

				// String

				writeString(this._Opens_, dos);

				// String

				writeString(this._Clicks_, dos);

				// String

				writeString(this._Conversions_, dos);

				// String

				writeString(this._Delivered_, dos);

				// String

				writeString(this._Distribution_, dos);

				// String

				writeString(this._HardBounces_, dos);

				// String

				writeString(this._OtherUndeliverable_, dos);

				// String

				writeString(this._PossibleBlock_, dos);

				// String

				writeString(this._SoftBounces_, dos);

				// String

				writeString(this._SpamComplaintRate_, dos);

				// String

				writeString(this._TotalClicks_, dos);

				// String

				writeString(this._TotalOpens_, dos);

				// String

				writeString(this._TotalOrders_, dos);

				// String

				writeString(this._SpamComplaints_, dos);

				// String

				writeString(this._Undeliverable_, dos);

				// String

				writeString(this._Clicks_Desktop_, dos);

				// String

				writeString(this._Clicks_Mobile_, dos);

				// String

				writeString(this._Clicks_Other_, dos);

				// String

				writeString(this._UniqueConversion_, dos);

				// String

				writeString(this._Opens_Desktop_, dos);

				// String

				writeString(this._Opens_Mobile_, dos);

				// String

				writeString(this._Opens_Other_, dos);

				// String

				writeString(this._Unsubscribes_, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_Date_=" + _Date_);
			sb.append(",_Campaign_=" + _Campaign_);
			sb.append(",_Date_Year_=" + _Date_Year_);
			sb.append(",_Date_Month_=" + _Date_Month_);
			sb.append(",_Date_Week_=" + _Date_Week_);
			sb.append(",_ExtCampaignID_=" + _ExtCampaignID_);
			sb.append(",_FolderName_=" + _FolderName_);
			sb.append(",_LaunchDate_=" + _LaunchDate_);
			sb.append(",_LaunchID_=" + _LaunchID_);
			sb.append(",_LaunchTime_=" + _LaunchTime_);
			sb.append(",_MarketingProgram_=" + _MarketingProgram_);
			sb.append(",_MarketingStrategy_=" + _MarketingStrategy_);
			sb.append(",_ProgramName_=" + _ProgramName_);
			sb.append(",_ProgramStage_=" + _ProgramStage_);
			sb.append(",_Segment_=" + _Segment_);
			sb.append(",_Subject_=" + _Subject_);
			sb.append(",_ReturnPath_=" + _ReturnPath_);
			sb.append(",_Classification_=" + _Classification_);
			sb.append(",_Sent_=" + _Sent_);
			sb.append(",_Opens_=" + _Opens_);
			sb.append(",_Clicks_=" + _Clicks_);
			sb.append(",_Conversions_=" + _Conversions_);
			sb.append(",_Delivered_=" + _Delivered_);
			sb.append(",_Distribution_=" + _Distribution_);
			sb.append(",_HardBounces_=" + _HardBounces_);
			sb.append(",_OtherUndeliverable_=" + _OtherUndeliverable_);
			sb.append(",_PossibleBlock_=" + _PossibleBlock_);
			sb.append(",_SoftBounces_=" + _SoftBounces_);
			sb.append(",_SpamComplaintRate_=" + _SpamComplaintRate_);
			sb.append(",_TotalClicks_=" + _TotalClicks_);
			sb.append(",_TotalOpens_=" + _TotalOpens_);
			sb.append(",_TotalOrders_=" + _TotalOrders_);
			sb.append(",_SpamComplaints_=" + _SpamComplaints_);
			sb.append(",_Undeliverable_=" + _Undeliverable_);
			sb.append(",_Clicks_Desktop_=" + _Clicks_Desktop_);
			sb.append(",_Clicks_Mobile_=" + _Clicks_Mobile_);
			sb.append(",_Clicks_Other_=" + _Clicks_Other_);
			sb.append(",_UniqueConversion_=" + _UniqueConversion_);
			sb.append(",_Opens_Desktop_=" + _Opens_Desktop_);
			sb.append(",_Opens_Mobile_=" + _Opens_Mobile_);
			sb.append(",_Opens_Other_=" + _Opens_Other_);
			sb.append(",_Unsubscribes_=" + _Unsubscribes_);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[0];

		public String _Date_;

		public String get_Date_() {
			return this._Date_;
		}

		public String _Campaign_;

		public String get_Campaign_() {
			return this._Campaign_;
		}

		public String _Date_Year_;

		public String get_Date_Year_() {
			return this._Date_Year_;
		}

		public String _Date_Month_;

		public String get_Date_Month_() {
			return this._Date_Month_;
		}

		public String _Date_Week_;

		public String get_Date_Week_() {
			return this._Date_Week_;
		}

		public String _ExtCampaignID_;

		public String get_ExtCampaignID_() {
			return this._ExtCampaignID_;
		}

		public String _FolderName_;

		public String get_FolderName_() {
			return this._FolderName_;
		}

		public String _LaunchDate_;

		public String get_LaunchDate_() {
			return this._LaunchDate_;
		}

		public String _LaunchID_;

		public String get_LaunchID_() {
			return this._LaunchID_;
		}

		public String _LaunchTime_;

		public String get_LaunchTime_() {
			return this._LaunchTime_;
		}

		public String _MarketingProgram_;

		public String get_MarketingProgram_() {
			return this._MarketingProgram_;
		}

		public String _MarketingStrategy_;

		public String get_MarketingStrategy_() {
			return this._MarketingStrategy_;
		}

		public String _ProgramName_;

		public String get_ProgramName_() {
			return this._ProgramName_;
		}

		public String _ProgramStage_;

		public String get_ProgramStage_() {
			return this._ProgramStage_;
		}

		public String _Segment_;

		public String get_Segment_() {
			return this._Segment_;
		}

		public String _Subject_;

		public String get_Subject_() {
			return this._Subject_;
		}

		public String _ReturnPath_;

		public String get_ReturnPath_() {
			return this._ReturnPath_;
		}

		public String _Classification_;

		public String get_Classification_() {
			return this._Classification_;
		}

		public String _Sent_;

		public String get_Sent_() {
			return this._Sent_;
		}

		public String _Opens_;

		public String get_Opens_() {
			return this._Opens_;
		}

		public String _Clicks_;

		public String get_Clicks_() {
			return this._Clicks_;
		}

		public String _Conversions_;

		public String get_Conversions_() {
			return this._Conversions_;
		}

		public String _Delivered_;

		public String get_Delivered_() {
			return this._Delivered_;
		}

		public String _Distribution_;

		public String get_Distribution_() {
			return this._Distribution_;
		}

		public String _HardBounces_;

		public String get_HardBounces_() {
			return this._HardBounces_;
		}

		public String _OtherUndeliverable_;

		public String get_OtherUndeliverable_() {
			return this._OtherUndeliverable_;
		}

		public String _PossibleBlock_;

		public String get_PossibleBlock_() {
			return this._PossibleBlock_;
		}

		public String _SoftBounces_;

		public String get_SoftBounces_() {
			return this._SoftBounces_;
		}

		public String _SpamComplaintRate_;

		public String get_SpamComplaintRate_() {
			return this._SpamComplaintRate_;
		}

		public String _TotalClicks_;

		public String get_TotalClicks_() {
			return this._TotalClicks_;
		}

		public String _TotalOpens_;

		public String get_TotalOpens_() {
			return this._TotalOpens_;
		}

		public String _TotalOrders_;

		public String get_TotalOrders_() {
			return this._TotalOrders_;
		}

		public String _SpamComplaints_;

		public String get_SpamComplaints_() {
			return this._SpamComplaints_;
		}

		public String _Undeliverable_;

		public String get_Undeliverable_() {
			return this._Undeliverable_;
		}

		public String _Clicks_Desktop_;

		public String get_Clicks_Desktop_() {
			return this._Clicks_Desktop_;
		}

		public String _Clicks_Mobile_;

		public String get_Clicks_Mobile_() {
			return this._Clicks_Mobile_;
		}

		public String _Clicks_Other_;

		public String get_Clicks_Other_() {
			return this._Clicks_Other_;
		}

		public String _UniqueConversion_;

		public String get_UniqueConversion_() {
			return this._UniqueConversion_;
		}

		public String _Opens_Desktop_;

		public String get_Opens_Desktop_() {
			return this._Opens_Desktop_;
		}

		public String _Opens_Mobile_;

		public String get_Opens_Mobile_() {
			return this._Opens_Mobile_;
		}

		public String _Opens_Other_;

		public String get_Opens_Other_() {
			return this._Opens_Other_;
		}

		public String _Unsubscribes_;

		public String get_Unsubscribes_() {
			return this._Unsubscribes_;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Get_file_CRM.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Get_file_CRM.length == 0) {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM) {

				try {

					int length = 0;

					this._Date_ = readString(dis);

					this._Campaign_ = readString(dis);

					this._Date_Year_ = readString(dis);

					this._Date_Month_ = readString(dis);

					this._Date_Week_ = readString(dis);

					this._ExtCampaignID_ = readString(dis);

					this._FolderName_ = readString(dis);

					this._LaunchDate_ = readString(dis);

					this._LaunchID_ = readString(dis);

					this._LaunchTime_ = readString(dis);

					this._MarketingProgram_ = readString(dis);

					this._MarketingStrategy_ = readString(dis);

					this._ProgramName_ = readString(dis);

					this._ProgramStage_ = readString(dis);

					this._Segment_ = readString(dis);

					this._Subject_ = readString(dis);

					this._ReturnPath_ = readString(dis);

					this._Classification_ = readString(dis);

					this._Sent_ = readString(dis);

					this._Opens_ = readString(dis);

					this._Clicks_ = readString(dis);

					this._Conversions_ = readString(dis);

					this._Delivered_ = readString(dis);

					this._Distribution_ = readString(dis);

					this._HardBounces_ = readString(dis);

					this._OtherUndeliverable_ = readString(dis);

					this._PossibleBlock_ = readString(dis);

					this._SoftBounces_ = readString(dis);

					this._SpamComplaintRate_ = readString(dis);

					this._TotalClicks_ = readString(dis);

					this._TotalOpens_ = readString(dis);

					this._TotalOrders_ = readString(dis);

					this._SpamComplaints_ = readString(dis);

					this._Undeliverable_ = readString(dis);

					this._Clicks_Desktop_ = readString(dis);

					this._Clicks_Mobile_ = readString(dis);

					this._Clicks_Other_ = readString(dis);

					this._UniqueConversion_ = readString(dis);

					this._Opens_Desktop_ = readString(dis);

					this._Opens_Mobile_ = readString(dis);

					this._Opens_Other_ = readString(dis);

					this._Unsubscribes_ = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._Date_, dos);

				// String

				writeString(this._Campaign_, dos);

				// String

				writeString(this._Date_Year_, dos);

				// String

				writeString(this._Date_Month_, dos);

				// String

				writeString(this._Date_Week_, dos);

				// String

				writeString(this._ExtCampaignID_, dos);

				// String

				writeString(this._FolderName_, dos);

				// String

				writeString(this._LaunchDate_, dos);

				// String

				writeString(this._LaunchID_, dos);

				// String

				writeString(this._LaunchTime_, dos);

				// String

				writeString(this._MarketingProgram_, dos);

				// String

				writeString(this._MarketingStrategy_, dos);

				// String

				writeString(this._ProgramName_, dos);

				// String

				writeString(this._ProgramStage_, dos);

				// String

				writeString(this._Segment_, dos);

				// String

				writeString(this._Subject_, dos);

				// String

				writeString(this._ReturnPath_, dos);

				// String

				writeString(this._Classification_, dos);

				// String

				writeString(this._Sent_, dos);

				// String

				writeString(this._Opens_, dos);

				// String

				writeString(this._Clicks_, dos);

				// String

				writeString(this._Conversions_, dos);

				// String

				writeString(this._Delivered_, dos);

				// String

				writeString(this._Distribution_, dos);

				// String

				writeString(this._HardBounces_, dos);

				// String

				writeString(this._OtherUndeliverable_, dos);

				// String

				writeString(this._PossibleBlock_, dos);

				// String

				writeString(this._SoftBounces_, dos);

				// String

				writeString(this._SpamComplaintRate_, dos);

				// String

				writeString(this._TotalClicks_, dos);

				// String

				writeString(this._TotalOpens_, dos);

				// String

				writeString(this._TotalOrders_, dos);

				// String

				writeString(this._SpamComplaints_, dos);

				// String

				writeString(this._Undeliverable_, dos);

				// String

				writeString(this._Clicks_Desktop_, dos);

				// String

				writeString(this._Clicks_Mobile_, dos);

				// String

				writeString(this._Clicks_Other_, dos);

				// String

				writeString(this._UniqueConversion_, dos);

				// String

				writeString(this._Opens_Desktop_, dos);

				// String

				writeString(this._Opens_Mobile_, dos);

				// String

				writeString(this._Opens_Other_, dos);

				// String

				writeString(this._Unsubscribes_, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_Date_=" + _Date_);
			sb.append(",_Campaign_=" + _Campaign_);
			sb.append(",_Date_Year_=" + _Date_Year_);
			sb.append(",_Date_Month_=" + _Date_Month_);
			sb.append(",_Date_Week_=" + _Date_Week_);
			sb.append(",_ExtCampaignID_=" + _ExtCampaignID_);
			sb.append(",_FolderName_=" + _FolderName_);
			sb.append(",_LaunchDate_=" + _LaunchDate_);
			sb.append(",_LaunchID_=" + _LaunchID_);
			sb.append(",_LaunchTime_=" + _LaunchTime_);
			sb.append(",_MarketingProgram_=" + _MarketingProgram_);
			sb.append(",_MarketingStrategy_=" + _MarketingStrategy_);
			sb.append(",_ProgramName_=" + _ProgramName_);
			sb.append(",_ProgramStage_=" + _ProgramStage_);
			sb.append(",_Segment_=" + _Segment_);
			sb.append(",_Subject_=" + _Subject_);
			sb.append(",_ReturnPath_=" + _ReturnPath_);
			sb.append(",_Classification_=" + _Classification_);
			sb.append(",_Sent_=" + _Sent_);
			sb.append(",_Opens_=" + _Opens_);
			sb.append(",_Clicks_=" + _Clicks_);
			sb.append(",_Conversions_=" + _Conversions_);
			sb.append(",_Delivered_=" + _Delivered_);
			sb.append(",_Distribution_=" + _Distribution_);
			sb.append(",_HardBounces_=" + _HardBounces_);
			sb.append(",_OtherUndeliverable_=" + _OtherUndeliverable_);
			sb.append(",_PossibleBlock_=" + _PossibleBlock_);
			sb.append(",_SoftBounces_=" + _SoftBounces_);
			sb.append(",_SpamComplaintRate_=" + _SpamComplaintRate_);
			sb.append(",_TotalClicks_=" + _TotalClicks_);
			sb.append(",_TotalOpens_=" + _TotalOpens_);
			sb.append(",_TotalOrders_=" + _TotalOrders_);
			sb.append(",_SpamComplaints_=" + _SpamComplaints_);
			sb.append(",_Undeliverable_=" + _Undeliverable_);
			sb.append(",_Clicks_Desktop_=" + _Clicks_Desktop_);
			sb.append(",_Clicks_Mobile_=" + _Clicks_Mobile_);
			sb.append(",_Clicks_Other_=" + _Clicks_Other_);
			sb.append(",_UniqueConversion_=" + _UniqueConversion_);
			sb.append(",_Opens_Desktop_=" + _Opens_Desktop_);
			sb.append(",_Opens_Mobile_=" + _Opens_Mobile_);
			sb.append(",_Opens_Other_=" + _Opens_Other_);
			sb.append(",_Unsubscribes_=" + _Unsubscribes_);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();
				row4Struct row8 = row4;
				row9Struct row9 = new row9Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"/Users/leandro.mendes/Accenture/Raizen/tmp-crm/dia/raizen-"
								+ TalendDate.formatDate("dd-MM-yyyy",
										TalendDate.getCurrentDate()) + ".txt"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					throw new RuntimeException(
							"The particular file \""
									+ filetFileOutputDelimited_2
											.getAbsoluteFile()
									+ "\" already exist. If you want to overwrite the file, please uncheck the"
									+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				String[] headColutFileOutputDelimited_2 = new String[43];
				class CSVBasicSet_tFileOutputDelimited_2 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_2[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_2 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("|");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_2[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_2 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_2[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_2[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_2 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
				csvSettings_tFileOutputDelimited_2.setFieldSeparator("|");
				csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_2,
												false), "ISO-8859-15")));
				CsvWritertFileOutputDelimited_2
						.setSeparator(csvSettings_tFileOutputDelimited_2
								.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_2
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_2.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_2.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_2.getRowDelim());
				}
				if (filetFileOutputDelimited_2.length() == 0) {
					headColutFileOutputDelimited_2[0] = "Date";
					headColutFileOutputDelimited_2[1] = "Campaign";
					headColutFileOutputDelimited_2[2] = "Date_Year";
					headColutFileOutputDelimited_2[3] = "Date_Month";
					headColutFileOutputDelimited_2[4] = "Date_Week";
					headColutFileOutputDelimited_2[5] = "ExtCampaignID";
					headColutFileOutputDelimited_2[6] = "FolderName";
					headColutFileOutputDelimited_2[7] = "LaunchDate";
					headColutFileOutputDelimited_2[8] = "LaunchID";
					headColutFileOutputDelimited_2[9] = "LaunchTime";
					headColutFileOutputDelimited_2[10] = "MarketingProgram";
					headColutFileOutputDelimited_2[11] = "MarketingStrategy";
					headColutFileOutputDelimited_2[12] = "ProgramName";
					headColutFileOutputDelimited_2[13] = "ProgramStage";
					headColutFileOutputDelimited_2[14] = "Segment";
					headColutFileOutputDelimited_2[15] = "Subject";
					headColutFileOutputDelimited_2[16] = "ReturnPath";
					headColutFileOutputDelimited_2[17] = "Classification";
					headColutFileOutputDelimited_2[18] = "Sent";
					headColutFileOutputDelimited_2[19] = "Opens";
					headColutFileOutputDelimited_2[20] = "Clicks";
					headColutFileOutputDelimited_2[21] = "Conversions";
					headColutFileOutputDelimited_2[22] = "Delivered";
					headColutFileOutputDelimited_2[23] = "Distribution";
					headColutFileOutputDelimited_2[24] = "HardBounces";
					headColutFileOutputDelimited_2[25] = "OtherUndeliverable";
					headColutFileOutputDelimited_2[26] = "PossibleBlock";
					headColutFileOutputDelimited_2[27] = "SoftBounces";
					headColutFileOutputDelimited_2[28] = "SpamComplaintRate";
					headColutFileOutputDelimited_2[29] = "TotalClicks";
					headColutFileOutputDelimited_2[30] = "TotalOpens";
					headColutFileOutputDelimited_2[31] = "TotalOrders";
					headColutFileOutputDelimited_2[32] = "SpamComplaints";
					headColutFileOutputDelimited_2[33] = "Undeliverable";
					headColutFileOutputDelimited_2[34] = "Clicks_Desktop";
					headColutFileOutputDelimited_2[35] = "Clicks_Mobile";
					headColutFileOutputDelimited_2[36] = "Clicks_Other";
					headColutFileOutputDelimited_2[37] = "UniqueConversion";
					headColutFileOutputDelimited_2[38] = "Opens_Desktop";
					headColutFileOutputDelimited_2[39] = "Opens_Mobile";
					headColutFileOutputDelimited_2[40] = "Opens_Other";
					headColutFileOutputDelimited_2[41] = "_Unsubscribes";
					headColutFileOutputDelimited_2[42] = "Bounces";
					CsvWritertFileOutputDelimited_2
							.writeNext(headColutFileOutputDelimited_2);
					CsvWritertFileOutputDelimited_2.flush();
				}
				CsvWritertFileOutputDelimited_2
						.setEscapeChar(csvSettings_tFileOutputDelimited_2
								.getEscapeChar());
				CsvWritertFileOutputDelimited_2
						.setQuoteChar(csvSettings_tFileOutputDelimited_2
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_2
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_2",
						CsvWritertFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tLogRow_2 = 0;

				// /////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[42];

					public void addRow(String[] row) {

						for (int i = 0; i < 42; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 41 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 41 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|%23$-");
							sbformat.append(colLengths[22]);
							sbformat.append("s");

							sbformat.append("|%24$-");
							sbformat.append(colLengths[23]);
							sbformat.append("s");

							sbformat.append("|%25$-");
							sbformat.append(colLengths[24]);
							sbformat.append("s");

							sbformat.append("|%26$-");
							sbformat.append(colLengths[25]);
							sbformat.append("s");

							sbformat.append("|%27$-");
							sbformat.append(colLengths[26]);
							sbformat.append("s");

							sbformat.append("|%28$-");
							sbformat.append(colLengths[27]);
							sbformat.append("s");

							sbformat.append("|%29$-");
							sbformat.append(colLengths[28]);
							sbformat.append("s");

							sbformat.append("|%30$-");
							sbformat.append(colLengths[29]);
							sbformat.append("s");

							sbformat.append("|%31$-");
							sbformat.append(colLengths[30]);
							sbformat.append("s");

							sbformat.append("|%32$-");
							sbformat.append(colLengths[31]);
							sbformat.append("s");

							sbformat.append("|%33$-");
							sbformat.append(colLengths[32]);
							sbformat.append("s");

							sbformat.append("|%34$-");
							sbformat.append(colLengths[33]);
							sbformat.append("s");

							sbformat.append("|%35$-");
							sbformat.append(colLengths[34]);
							sbformat.append("s");

							sbformat.append("|%36$-");
							sbformat.append(colLengths[35]);
							sbformat.append("s");

							sbformat.append("|%37$-");
							sbformat.append(colLengths[36]);
							sbformat.append("s");

							sbformat.append("|%38$-");
							sbformat.append(colLengths[37]);
							sbformat.append("s");

							sbformat.append("|%39$-");
							sbformat.append(colLengths[38]);
							sbformat.append("s");

							sbformat.append("|%40$-");
							sbformat.append(colLengths[39]);
							sbformat.append("s");

							sbformat.append("|%41$-");
							sbformat.append(colLengths[40]);
							sbformat.append("s");

							sbformat.append("|%42$-");
							sbformat.append(colLengths[41]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[21]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[22]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[23]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[24]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[25]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[26]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[27]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[28]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[29]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[30]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[31]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[32]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[33]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[34]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[35]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[36]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[37]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[38]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[39]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[40]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[41]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
				util_tLogRow_2.setTableName("tLogRow_2");
				util_tLogRow_2.addRow(new String[] { "_Date_", "_Campaign_",
						"_Date_Year_", "_Date_Month_", "_Date_Week_",
						"_ExtCampaignID_", "_FolderName_", "_LaunchDate_",
						"_LaunchID_", "_LaunchTime_", "_MarketingProgram_",
						"_MarketingStrategy_", "_ProgramName_",
						"_ProgramStage_", "_Segment_", "_Subject_",
						"_ReturnPath_", "_Classification_", "_Sent_",
						"_Opens_", "_Clicks_", "_Conversions_", "_Delivered_",
						"_Distribution_", "_HardBounces_",
						"_OtherUndeliverable_", "_PossibleBlock_",
						"_SoftBounces_", "_SpamComplaintRate_",
						"_TotalClicks_", "_TotalOpens_", "_TotalOrders_",
						"_SpamComplaints_", "_Undeliverable_",
						"_Clicks_Desktop_", "_Clicks_Mobile_",
						"_Clicks_Other_", "_UniqueConversion_",
						"_Opens_Desktop_", "_Opens_Mobile_", "_Opens_Other_",
						"_Unsubscribes_", });
				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
				// /////////////////////

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = ((String) globalMap
							.get("tFileOutputDelimited_1_FILE_NAME"));
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tFileOutputDelimited_1_FILE_NAME")),
								"ISO-8859-15", ",", "\n", true, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row3 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row3._Date_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row3._Campaign_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row3._Date_Year_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row3._Date_Month_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row3._Date_Week_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row3._ExtCampaignID_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row3._FolderName_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row3._LaunchDate_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row3._LaunchID_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row3._LaunchTime_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row3._MarketingProgram_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row3._MarketingStrategy_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row3._ProgramName_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row3._ProgramStage_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row3._Segment_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row3._Subject_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 16;

							row3._ReturnPath_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row3._Classification_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row3._Sent_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 19;

							row3._Opens_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 20;

							row3._Clicks_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 21;

							row3._Conversions_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 22;

							row3._Delivered_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row3._Distribution_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 24;

							row3._HardBounces_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 25;

							row3._OtherUndeliverable_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 26;

							row3._PossibleBlock_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 27;

							row3._SoftBounces_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 28;

							row3._SpamComplaintRate_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 29;

							row3._TotalClicks_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 30;

							row3._TotalOpens_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 31;

							row3._TotalOrders_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 32;

							row3._SpamComplaints_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 33;

							row3._Undeliverable_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 34;

							row3._Clicks_Desktop_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 35;

							row3._Clicks_Mobile_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 36;

							row3._Clicks_Other_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 37;

							row3._UniqueConversion_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 38;

							row3._Opens_Desktop_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 39;

							row3._Opens_Mobile_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 40;

							row3._Opens_Other_ = fid_tFileInputDelimited_1.get(
									columnIndexWithD_tFileInputDelimited_1)
									.trim();

							columnIndexWithD_tFileInputDelimited_1 = 41;

							row3._Unsubscribes_ = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1)
									.trim();

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tJavaRow_1 main ] start
							 */

							currentComponent = "tJavaRow_1";

							// row3
							// row3

							if (execStat) {
								runStat.updateStatOnConnection("row3"
										+ iterateId, 1, 1);
							}

							// Code generated according to input schema and
							// output schema
							row4._Date_ = row3._Date_;
							row4._Campaign_ = row3._Campaign_;
							row4._Date_Year_ = row3._Date_Year_;
							row4._Date_Month_ = row3._Date_Month_;
							row4._Date_Week_ = row3._Date_Week_;
							row4._ExtCampaignID_ = row3._ExtCampaignID_;
							row4._FolderName_ = row3._FolderName_;
							row4._LaunchDate_ = row3._LaunchDate_;
							row4._LaunchID_ = row3._LaunchID_;
							row4._LaunchTime_ = row3._LaunchTime_;
							row4._MarketingProgram_ = row3._MarketingProgram_;
							row4._MarketingStrategy_ = row3._MarketingStrategy_;
							row4._ProgramName_ = row3._ProgramName_;
							row4._ProgramStage_ = row3._ProgramStage_;
							row4._Segment_ = row3._Segment_;
							row4._Subject_ = row3._Subject_;
							row4._ReturnPath_ = row3._ReturnPath_;
							row4._Classification_ = row3._Classification_;
							row4._Sent_ = row3._Sent_.replace(".", ",");
							row4._Opens_ = row3._Opens_.replace(".", ",");
							row4._Clicks_ = row3._Clicks_.replace(".", ",");
							row4._Conversions_ = row3._Conversions_.replace(
									".", ",");
							row4._Delivered_ = row3._Delivered_.replace(".",
									",");
							row4._Distribution_ = row3._Distribution_.replace(
									".", ",");
							row4._HardBounces_ = row3._HardBounces_.replace(
									".", ",");
							row4._OtherUndeliverable_ = row3._OtherUndeliverable_
									.replace(".", ",");
							row4._PossibleBlock_ = row3._PossibleBlock_
									.replace(".", ",");
							row4._SoftBounces_ = row3._SoftBounces_.replace(
									".", ",");
							row4._SpamComplaintRate_ = row3._SpamComplaintRate_
									.replace(".", ",");
							row4._TotalClicks_ = row3._TotalClicks_.replace(
									".", ",");
							row4._TotalOpens_ = row3._TotalOpens_.replace(".",
									",");
							row4._TotalOrders_ = row3._TotalOrders_.replace(
									".", ",");
							row4._SpamComplaints_ = row3._SpamComplaints_
									.replace(".", ",");
							row4._Undeliverable_ = row3._Undeliverable_
									.replace(".", ",");
							row4._Clicks_Desktop_ = row3._Clicks_Desktop_
									.replace(".", ",");
							row4._Clicks_Mobile_ = row3._Clicks_Mobile_
									.replace(".", ",");
							row4._Clicks_Other_ = row3._Clicks_Other_.replace(
									".", ",");
							row4._UniqueConversion_ = row3._UniqueConversion_
									.replace(".", ",");
							row4._Opens_Desktop_ = row3._Opens_Desktop_
									.replace(".", ",");
							row4._Opens_Mobile_ = row3._Opens_Mobile_.replace(
									".", ",");
							row4._Opens_Other_ = row3._Opens_Other_.replace(
									".", ",");
							row4._Unsubscribes_ = row3._Unsubscribes_.replace(
									".", ",");

							nb_line_tJavaRow_1++;

							tos_count_tJavaRow_1++;

							/**
							 * [tJavaRow_1 main ] stop
							 */

							/**
							 * [tJavaRow_1 process_data_begin ] start
							 */

							currentComponent = "tJavaRow_1";

							/**
							 * [tJavaRow_1 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_2 main ] start
							 */

							currentComponent = "tLogRow_2";

							// row4
							// row4

							if (execStat) {
								runStat.updateStatOnConnection("row4"
										+ iterateId, 1, 1);
							}

							// /////////////////////

							String[] row_tLogRow_2 = new String[42];

							if (row4._Date_ != null) { //
								row_tLogRow_2[0] = String.valueOf(row4._Date_);

							} //

							if (row4._Campaign_ != null) { //
								row_tLogRow_2[1] = String
										.valueOf(row4._Campaign_);

							} //

							if (row4._Date_Year_ != null) { //
								row_tLogRow_2[2] = String
										.valueOf(row4._Date_Year_);

							} //

							if (row4._Date_Month_ != null) { //
								row_tLogRow_2[3] = String
										.valueOf(row4._Date_Month_);

							} //

							if (row4._Date_Week_ != null) { //
								row_tLogRow_2[4] = String
										.valueOf(row4._Date_Week_);

							} //

							if (row4._ExtCampaignID_ != null) { //
								row_tLogRow_2[5] = String
										.valueOf(row4._ExtCampaignID_);

							} //

							if (row4._FolderName_ != null) { //
								row_tLogRow_2[6] = String
										.valueOf(row4._FolderName_);

							} //

							if (row4._LaunchDate_ != null) { //
								row_tLogRow_2[7] = String
										.valueOf(row4._LaunchDate_);

							} //

							if (row4._LaunchID_ != null) { //
								row_tLogRow_2[8] = String
										.valueOf(row4._LaunchID_);

							} //

							if (row4._LaunchTime_ != null) { //
								row_tLogRow_2[9] = String
										.valueOf(row4._LaunchTime_);

							} //

							if (row4._MarketingProgram_ != null) { //
								row_tLogRow_2[10] = String
										.valueOf(row4._MarketingProgram_);

							} //

							if (row4._MarketingStrategy_ != null) { //
								row_tLogRow_2[11] = String
										.valueOf(row4._MarketingStrategy_);

							} //

							if (row4._ProgramName_ != null) { //
								row_tLogRow_2[12] = String
										.valueOf(row4._ProgramName_);

							} //

							if (row4._ProgramStage_ != null) { //
								row_tLogRow_2[13] = String
										.valueOf(row4._ProgramStage_);

							} //

							if (row4._Segment_ != null) { //
								row_tLogRow_2[14] = String
										.valueOf(row4._Segment_);

							} //

							if (row4._Subject_ != null) { //
								row_tLogRow_2[15] = String
										.valueOf(row4._Subject_);

							} //

							if (row4._ReturnPath_ != null) { //
								row_tLogRow_2[16] = String
										.valueOf(row4._ReturnPath_);

							} //

							if (row4._Classification_ != null) { //
								row_tLogRow_2[17] = String
										.valueOf(row4._Classification_);

							} //

							if (row4._Sent_ != null) { //
								row_tLogRow_2[18] = String.valueOf(row4._Sent_);

							} //

							if (row4._Opens_ != null) { //
								row_tLogRow_2[19] = String
										.valueOf(row4._Opens_);

							} //

							if (row4._Clicks_ != null) { //
								row_tLogRow_2[20] = String
										.valueOf(row4._Clicks_);

							} //

							if (row4._Conversions_ != null) { //
								row_tLogRow_2[21] = String
										.valueOf(row4._Conversions_);

							} //

							if (row4._Delivered_ != null) { //
								row_tLogRow_2[22] = String
										.valueOf(row4._Delivered_);

							} //

							if (row4._Distribution_ != null) { //
								row_tLogRow_2[23] = String
										.valueOf(row4._Distribution_);

							} //

							if (row4._HardBounces_ != null) { //
								row_tLogRow_2[24] = String
										.valueOf(row4._HardBounces_);

							} //

							if (row4._OtherUndeliverable_ != null) { //
								row_tLogRow_2[25] = String
										.valueOf(row4._OtherUndeliverable_);

							} //

							if (row4._PossibleBlock_ != null) { //
								row_tLogRow_2[26] = String
										.valueOf(row4._PossibleBlock_);

							} //

							if (row4._SoftBounces_ != null) { //
								row_tLogRow_2[27] = String
										.valueOf(row4._SoftBounces_);

							} //

							if (row4._SpamComplaintRate_ != null) { //
								row_tLogRow_2[28] = String
										.valueOf(row4._SpamComplaintRate_);

							} //

							if (row4._TotalClicks_ != null) { //
								row_tLogRow_2[29] = String
										.valueOf(row4._TotalClicks_);

							} //

							if (row4._TotalOpens_ != null) { //
								row_tLogRow_2[30] = String
										.valueOf(row4._TotalOpens_);

							} //

							if (row4._TotalOrders_ != null) { //
								row_tLogRow_2[31] = String
										.valueOf(row4._TotalOrders_);

							} //

							if (row4._SpamComplaints_ != null) { //
								row_tLogRow_2[32] = String
										.valueOf(row4._SpamComplaints_);

							} //

							if (row4._Undeliverable_ != null) { //
								row_tLogRow_2[33] = String
										.valueOf(row4._Undeliverable_);

							} //

							if (row4._Clicks_Desktop_ != null) { //
								row_tLogRow_2[34] = String
										.valueOf(row4._Clicks_Desktop_);

							} //

							if (row4._Clicks_Mobile_ != null) { //
								row_tLogRow_2[35] = String
										.valueOf(row4._Clicks_Mobile_);

							} //

							if (row4._Clicks_Other_ != null) { //
								row_tLogRow_2[36] = String
										.valueOf(row4._Clicks_Other_);

							} //

							if (row4._UniqueConversion_ != null) { //
								row_tLogRow_2[37] = String
										.valueOf(row4._UniqueConversion_);

							} //

							if (row4._Opens_Desktop_ != null) { //
								row_tLogRow_2[38] = String
										.valueOf(row4._Opens_Desktop_);

							} //

							if (row4._Opens_Mobile_ != null) { //
								row_tLogRow_2[39] = String
										.valueOf(row4._Opens_Mobile_);

							} //

							if (row4._Opens_Other_ != null) { //
								row_tLogRow_2[40] = String
										.valueOf(row4._Opens_Other_);

							} //

							if (row4._Unsubscribes_ != null) { //
								row_tLogRow_2[41] = String
										.valueOf(row4._Unsubscribes_);

							} //

							util_tLogRow_2.addRow(row_tLogRow_2);
							nb_line_tLogRow_2++;
							// ////

							// ////

							// /////////////////////

							row8 = row4;

							tos_count_tLogRow_2++;

							/**
							 * [tLogRow_2 main ] stop
							 */

							/**
							 * [tLogRow_2 process_data_begin ] start
							 */

							currentComponent = "tLogRow_2";

							/**
							 * [tLogRow_2 process_data_begin ] stop
							 */

							/**
							 * [tJavaRow_2 main ] start
							 */

							currentComponent = "tJavaRow_2";

							// row8
							// row8

							if (execStat) {
								runStat.updateStatOnConnection("row8"
										+ iterateId, 1, 1);
							}

							// Code generated according to input schema and
							// output schema
							row9.Date = row8._Date_;
							row9.Campaign = row8._Campaign_;
							row9.Date_Year = row8._Date_Year_;
							row9.Date_Month = row8._Date_Month_;
							row9.Date_Week = row8._Date_Week_;
							row9.ExtCampaignID = row8._ExtCampaignID_;
							row9.FolderName = row8._FolderName_;
							row9.LaunchDate = row8._LaunchDate_;
							row9.LaunchID = row8._LaunchID_;
							row9.LaunchTime = row8._LaunchTime_;
							row9.MarketingProgram = row8._MarketingProgram_;
							row9.MarketingStrategy = row8._MarketingStrategy_;
							row9.ProgramName = row8._ProgramName_;
							row9.ProgramStage = row8._ProgramStage_;
							row9.Segment = row8._Segment_;
							row9.Subject = row8._Subject_;
							row9.ReturnPath = row8._ReturnPath_;
							row9.Classification = row8._Classification_;
							row9.Sent = row8._Sent_;
							row9.Opens = row8._Opens_;
							row9.Clicks = row8._Clicks_;
							row9.Conversions = row8._Conversions_;
							row9.Delivered = row8._Delivered_;
							row9.Distribution = row8._Distribution_;
							row9.HardBounces = row8._HardBounces_;
							row9.OtherUndeliverable = row8._OtherUndeliverable_;
							row9.PossibleBlock = row8._PossibleBlock_;
							row9.SoftBounces = row8._SoftBounces_;
							row9.SpamComplaintRate = row8._SpamComplaintRate_;
							row9.TotalClicks = row8._TotalClicks_;
							row9.TotalOpens = row8._TotalOpens_;
							row9.TotalOrders = row8._TotalOrders_;
							row9.SpamComplaints = row8._SpamComplaints_;
							row9.Undeliverable = row8._Undeliverable_;
							row9.Clicks_Desktop = row8._Clicks_Desktop_;
							row9.Clicks_Mobile = row8._Clicks_Mobile_;
							row9.Clicks_Other = row8._Clicks_Other_;
							row9.UniqueConversion = row8._UniqueConversion_;
							row9.Opens_Desktop = row8._Opens_Desktop_;
							row9.Opens_Mobile = row8._Opens_Mobile_;
							row9.Opens_Other = row8._Opens_Other_;
							row9._Unsubscribes = row8._Unsubscribes_;
							row9.Bounces = "";

							nb_line_tJavaRow_2++;

							tos_count_tJavaRow_2++;

							/**
							 * [tJavaRow_2 main ] stop
							 */

							/**
							 * [tJavaRow_2 process_data_begin ] start
							 */

							currentComponent = "tJavaRow_2";

							/**
							 * [tJavaRow_2 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_2 main ] start
							 */

							currentComponent = "tFileOutputDelimited_2";

							// row9
							// row9

							if (execStat) {
								runStat.updateStatOnConnection("row9"
										+ iterateId, 1, 1);
							}

							String[] rowtFileOutputDelimited_2 = new String[43];
							rowtFileOutputDelimited_2[0] = row9.Date == null ? null
									: row9.Date;
							rowtFileOutputDelimited_2[1] = row9.Campaign == null ? null
									: row9.Campaign;
							rowtFileOutputDelimited_2[2] = row9.Date_Year == null ? null
									: row9.Date_Year;
							rowtFileOutputDelimited_2[3] = row9.Date_Month == null ? null
									: row9.Date_Month;
							rowtFileOutputDelimited_2[4] = row9.Date_Week == null ? null
									: row9.Date_Week;
							rowtFileOutputDelimited_2[5] = row9.ExtCampaignID == null ? null
									: row9.ExtCampaignID;
							rowtFileOutputDelimited_2[6] = row9.FolderName == null ? null
									: row9.FolderName;
							rowtFileOutputDelimited_2[7] = row9.LaunchDate == null ? null
									: row9.LaunchDate;
							rowtFileOutputDelimited_2[8] = row9.LaunchID == null ? null
									: row9.LaunchID;
							rowtFileOutputDelimited_2[9] = row9.LaunchTime == null ? null
									: row9.LaunchTime;
							rowtFileOutputDelimited_2[10] = row9.MarketingProgram == null ? null
									: row9.MarketingProgram;
							rowtFileOutputDelimited_2[11] = row9.MarketingStrategy == null ? null
									: row9.MarketingStrategy;
							rowtFileOutputDelimited_2[12] = row9.ProgramName == null ? null
									: row9.ProgramName;
							rowtFileOutputDelimited_2[13] = row9.ProgramStage == null ? null
									: row9.ProgramStage;
							rowtFileOutputDelimited_2[14] = row9.Segment == null ? null
									: row9.Segment;
							rowtFileOutputDelimited_2[15] = row9.Subject == null ? null
									: row9.Subject;
							rowtFileOutputDelimited_2[16] = row9.ReturnPath == null ? null
									: row9.ReturnPath;
							rowtFileOutputDelimited_2[17] = row9.Classification == null ? null
									: row9.Classification;
							rowtFileOutputDelimited_2[18] = row9.Sent == null ? null
									: row9.Sent;
							rowtFileOutputDelimited_2[19] = row9.Opens == null ? null
									: row9.Opens;
							rowtFileOutputDelimited_2[20] = row9.Clicks == null ? null
									: row9.Clicks;
							rowtFileOutputDelimited_2[21] = row9.Conversions == null ? null
									: row9.Conversions;
							rowtFileOutputDelimited_2[22] = row9.Delivered == null ? null
									: row9.Delivered;
							rowtFileOutputDelimited_2[23] = row9.Distribution == null ? null
									: row9.Distribution;
							rowtFileOutputDelimited_2[24] = row9.HardBounces == null ? null
									: row9.HardBounces;
							rowtFileOutputDelimited_2[25] = row9.OtherUndeliverable == null ? null
									: row9.OtherUndeliverable;
							rowtFileOutputDelimited_2[26] = row9.PossibleBlock == null ? null
									: row9.PossibleBlock;
							rowtFileOutputDelimited_2[27] = row9.SoftBounces == null ? null
									: row9.SoftBounces;
							rowtFileOutputDelimited_2[28] = row9.SpamComplaintRate == null ? null
									: row9.SpamComplaintRate;
							rowtFileOutputDelimited_2[29] = row9.TotalClicks == null ? null
									: row9.TotalClicks;
							rowtFileOutputDelimited_2[30] = row9.TotalOpens == null ? null
									: row9.TotalOpens;
							rowtFileOutputDelimited_2[31] = row9.TotalOrders == null ? null
									: row9.TotalOrders;
							rowtFileOutputDelimited_2[32] = row9.SpamComplaints == null ? null
									: row9.SpamComplaints;
							rowtFileOutputDelimited_2[33] = row9.Undeliverable == null ? null
									: row9.Undeliverable;
							rowtFileOutputDelimited_2[34] = row9.Clicks_Desktop == null ? null
									: row9.Clicks_Desktop;
							rowtFileOutputDelimited_2[35] = row9.Clicks_Mobile == null ? null
									: row9.Clicks_Mobile;
							rowtFileOutputDelimited_2[36] = row9.Clicks_Other == null ? null
									: row9.Clicks_Other;
							rowtFileOutputDelimited_2[37] = row9.UniqueConversion == null ? null
									: row9.UniqueConversion;
							rowtFileOutputDelimited_2[38] = row9.Opens_Desktop == null ? null
									: row9.Opens_Desktop;
							rowtFileOutputDelimited_2[39] = row9.Opens_Mobile == null ? null
									: row9.Opens_Mobile;
							rowtFileOutputDelimited_2[40] = row9.Opens_Other == null ? null
									: row9.Opens_Other;
							rowtFileOutputDelimited_2[41] = row9._Unsubscribes == null ? null
									: row9._Unsubscribes;
							rowtFileOutputDelimited_2[42] = row9.Bounces == null ? null
									: row9.Bounces;
							nb_line_tFileOutputDelimited_2++;
							resourceMap.put("nb_line_tFileOutputDelimited_2",
									nb_line_tFileOutputDelimited_2);
							CsvWritertFileOutputDelimited_2
									.writeNext(rowtFileOutputDelimited_2);

							tos_count_tFileOutputDelimited_2++;

							/**
							 * [tFileOutputDelimited_2 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_2 process_data_begin ]
							 * start
							 */

							currentComponent = "tFileOutputDelimited_2";

							/**
							 * [tFileOutputDelimited_2 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_2 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_2";

							/**
							 * [tFileOutputDelimited_2 process_data_end ] stop
							 */

							/**
							 * [tJavaRow_2 process_data_end ] start
							 */

							currentComponent = "tJavaRow_2";

							/**
							 * [tJavaRow_2 process_data_end ] stop
							 */

							/**
							 * [tLogRow_2 process_data_end ] start
							 */

							currentComponent = "tLogRow_2";

							/**
							 * [tLogRow_2 process_data_end ] stop
							 */

							/**
							 * [tJavaRow_1 process_data_end ] start
							 */

							currentComponent = "tJavaRow_1";

							/**
							 * [tJavaRow_1 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tFileOutputDelimited_1_FILE_NAME"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

				// ////

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				consoleOut_tLogRow_2
						.println(util_tLogRow_2.format().toString());
				consoleOut_tLogRow_2.flush();
				// ////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (CsvWritertFileOutputDelimited_2 != null) {
					CsvWritertFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_2");

					if (CsvWritertFileOutputDelimited_2 != null) {
						CsvWritertFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tFileDelete_1 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());

				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = "/Users/leandro.mendes/Accenture/Raizen/tmp-crm/pre";
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_1.add("*");
				for (final String filemask_tFileList_1 : maskList_tFileList_1) {
					String filemask_compile_tFileList_1 = filemask_tFileList_1;

					filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler
							.globToPerl5(
									filemask_tFileList_1.toCharArray(),
									org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_1);
					patternList_tFileList_1.add(fileNamePattern_tFileList_1);
				}
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
				java.io.File file_tFileList_1 = new java.io.File(
						directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
								if (fileNamePattern_tFileList_1.matcher(
										fileName_tFileList_1).matches()) {
									if (!filePath_tFileList_1.contains(file
											.getAbsolutePath())) {
										list_tFileList_1.add(file);
										filePath_tFileList_1.add(file
												.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1
						.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1
							.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1
							.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1
							.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1
							.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".")
							&& files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1
								.getName().substring(
										files_tFileList_1.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE",
							currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH",
							currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */

					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */

					/**
					 * [tFileList_1 process_data_begin ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_begin ] stop
					 */
					NB_ITERATE_tFileDelete_1++;

					if (execStat) {
						runStat.updateStatOnConnection("row4", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row3", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk3", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row9", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row10", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row2", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row1", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row8", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 1, "exec"
								+ NB_ITERATE_tFileDelete_1);
						// Thread.sleep(1000);
					}

					/**
					 * [tFileDelete_1 begin ] start
					 */

					ok_Hash.put("tFileDelete_1", false);
					start_Hash.put("tFileDelete_1", System.currentTimeMillis());

					currentComponent = "tFileDelete_1";

					int tos_count_tFileDelete_1 = 0;

					/**
					 * [tFileDelete_1 begin ] stop
					 */

					/**
					 * [tFileDelete_1 main ] start
					 */

					currentComponent = "tFileDelete_1";

					class DeleteFoldertFileDelete_1 {
						/**
						 * delete all the sub-files in 'file'
						 * 
						 * @param file
						 */
						public boolean delete(java.io.File file) {
							java.io.File[] files = file.listFiles();
							for (int i = 0; i < files.length; i++) {
								if (files[i].isFile()) {
									files[i].delete();
								} else if (files[i].isDirectory()) {
									if (!files[i].delete()) {
										delete(files[i]);
									}
								}
							}
							deleteDirectory(file);
							return file.delete();
						}

						/**
						 * delete all the sub-folders in 'file'
						 * 
						 * @param file
						 */
						private void deleteDirectory(java.io.File file) {
							java.io.File[] filed = file.listFiles();
							for (int i = 0; i < filed.length; i++) {
								if (filed[i].isDirectory()) {
									deleteDirectory(filed[i]);
								}
								filed[i].delete();
							}
						}

					}
					java.io.File file_tFileDelete_1 = new java.io.File(
							((String) globalMap
									.get("tFileList_1_CURRENT_FILEPATH")));
					if (file_tFileDelete_1.exists()
							&& file_tFileDelete_1.isFile()) {
						if (file_tFileDelete_1.delete()) {
							globalMap.put("tFileDelete_1_CURRENT_STATUS",
									"File deleted.");
						} else {
							globalMap.put("tFileDelete_1_CURRENT_STATUS",
									"No file deleted.");
							throw new RuntimeException("File "
									+ file_tFileDelete_1.getAbsolutePath()
									+ " can not be deleted.");
						}
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"File does not exist or is invalid.");
						throw new RuntimeException(
								"File "
										+ file_tFileDelete_1.getAbsolutePath()
										+ " does not exist or is invalid or is not a file.");
					}
					globalMap.put("tFileDelete_1_DELETE_PATH",
							((String) globalMap
									.get("tFileList_1_CURRENT_FILEPATH")));

					tos_count_tFileDelete_1++;

					/**
					 * [tFileDelete_1 main ] stop
					 */

					/**
					 * [tFileDelete_1 process_data_begin ] start
					 */

					currentComponent = "tFileDelete_1";

					/**
					 * [tFileDelete_1 process_data_begin ] stop
					 */

					/**
					 * [tFileDelete_1 process_data_end ] start
					 */

					currentComponent = "tFileDelete_1";

					/**
					 * [tFileDelete_1 process_data_end ] stop
					 */

					/**
					 * [tFileDelete_1 end ] start
					 */

					currentComponent = "tFileDelete_1";

					ok_Hash.put("tFileDelete_1", true);
					end_Hash.put("tFileDelete_1", System.currentTimeMillis());

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk3", 0,
								"ok");
					}
					tREST_1Process(globalMap);

					/**
					 * [tFileDelete_1 end ] stop
					 */
					if (execStat) {
						runStat.updateStatOnConnection("iterate1", 2, "exec"
								+ NB_ITERATE_tFileDelete_1);
					}

					/**
					 * [tFileList_1 process_data_end ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				/**
				 * [tFileList_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_1 finally ] start
				 */

				currentComponent = "tFileList_1";

				/**
				 * [tFileList_1 finally ] stop
				 */

				/**
				 * [tFileDelete_1 finally ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public void tFileList_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileList_2 begin ] start
				 */

				int NB_ITERATE_tFileDelete_3 = 0; // for statistics

				ok_Hash.put("tFileList_2", false);
				start_Hash.put("tFileList_2", System.currentTimeMillis());

				currentComponent = "tFileList_2";

				int tos_count_tFileList_2 = 0;

				String directory_tFileList_2 = "/Users/leandro.mendes/Accenture/Raizen/tmp-crm/pre_2018";
				final java.util.List<String> maskList_tFileList_2 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_2 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_2.add("*");
				for (final String filemask_tFileList_2 : maskList_tFileList_2) {
					String filemask_compile_tFileList_2 = filemask_tFileList_2;

					filemask_compile_tFileList_2 = org.apache.oro.text.GlobCompiler
							.globToPerl5(
									filemask_tFileList_2.toCharArray(),
									org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_2 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_2);
					patternList_tFileList_2.add(fileNamePattern_tFileList_2);
				}
				int NB_FILEtFileList_2 = 0;

				final boolean case_sensitive_tFileList_2 = true;
				final java.util.List<java.io.File> list_tFileList_2 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_2 = new java.util.HashSet<String>();
				java.io.File file_tFileList_2 = new java.io.File(
						directory_tFileList_2);

				file_tFileList_2.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_2 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_2 : patternList_tFileList_2) {
								if (fileNamePattern_tFileList_2.matcher(
										fileName_tFileList_2).matches()) {
									if (!filePath_tFileList_2.contains(file
											.getAbsolutePath())) {
										list_tFileList_2.add(file);
										filePath_tFileList_2.add(file
												.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_2);

				for (int i_tFileList_2 = 0; i_tFileList_2 < list_tFileList_2
						.size(); i_tFileList_2++) {
					java.io.File files_tFileList_2 = list_tFileList_2
							.get(i_tFileList_2);
					String fileName_tFileList_2 = files_tFileList_2.getName();

					String currentFileName_tFileList_2 = files_tFileList_2
							.getName();
					String currentFilePath_tFileList_2 = files_tFileList_2
							.getAbsolutePath();
					String currentFileDirectory_tFileList_2 = files_tFileList_2
							.getParent();
					String currentFileExtension_tFileList_2 = null;

					if (files_tFileList_2.getName().contains(".")
							&& files_tFileList_2.isFile()) {
						currentFileExtension_tFileList_2 = files_tFileList_2
								.getName().substring(
										files_tFileList_2.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_2 = "";
					}

					NB_FILEtFileList_2++;
					globalMap.put("tFileList_2_CURRENT_FILE",
							currentFileName_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEPATH",
							currentFilePath_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_2);
					globalMap.put("tFileList_2_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_2);
					globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

					/**
					 * [tFileList_2 begin ] stop
					 */

					/**
					 * [tFileList_2 main ] start
					 */

					currentComponent = "tFileList_2";

					tos_count_tFileList_2++;

					/**
					 * [tFileList_2 main ] stop
					 */

					/**
					 * [tFileList_2 process_data_begin ] start
					 */

					currentComponent = "tFileList_2";

					/**
					 * [tFileList_2 process_data_begin ] stop
					 */
					NB_ITERATE_tFileDelete_3++;

					if (execStat) {
						runStat.updateStatOnConnection("row17", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row12", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row15", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk4", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk5", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row13", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row11", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row14", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("row16", 3, 0);
					}

					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 1, "exec"
								+ NB_ITERATE_tFileDelete_3);
						// Thread.sleep(1000);
					}

					/**
					 * [tFileDelete_3 begin ] start
					 */

					ok_Hash.put("tFileDelete_3", false);
					start_Hash.put("tFileDelete_3", System.currentTimeMillis());

					currentComponent = "tFileDelete_3";

					int tos_count_tFileDelete_3 = 0;

					/**
					 * [tFileDelete_3 begin ] stop
					 */

					/**
					 * [tFileDelete_3 main ] start
					 */

					currentComponent = "tFileDelete_3";

					class DeleteFoldertFileDelete_3 {
						/**
						 * delete all the sub-files in 'file'
						 * 
						 * @param file
						 */
						public boolean delete(java.io.File file) {
							java.io.File[] files = file.listFiles();
							for (int i = 0; i < files.length; i++) {
								if (files[i].isFile()) {
									files[i].delete();
								} else if (files[i].isDirectory()) {
									if (!files[i].delete()) {
										delete(files[i]);
									}
								}
							}
							deleteDirectory(file);
							return file.delete();
						}

						/**
						 * delete all the sub-folders in 'file'
						 * 
						 * @param file
						 */
						private void deleteDirectory(java.io.File file) {
							java.io.File[] filed = file.listFiles();
							for (int i = 0; i < filed.length; i++) {
								if (filed[i].isDirectory()) {
									deleteDirectory(filed[i]);
								}
								filed[i].delete();
							}
						}

					}
					java.io.File file_tFileDelete_3 = new java.io.File(
							((String) globalMap
									.get("tFileList_2_CURRENT_FILEPATH")));
					if (file_tFileDelete_3.exists()
							&& file_tFileDelete_3.isFile()) {
						if (file_tFileDelete_3.delete()) {
							globalMap.put("tFileDelete_3_CURRENT_STATUS",
									"File deleted.");
						} else {
							globalMap.put("tFileDelete_3_CURRENT_STATUS",
									"No file deleted.");
							throw new RuntimeException("File "
									+ file_tFileDelete_3.getAbsolutePath()
									+ " can not be deleted.");
						}
					} else {
						globalMap.put("tFileDelete_3_CURRENT_STATUS",
								"File does not exist or is invalid.");
						throw new RuntimeException(
								"File "
										+ file_tFileDelete_3.getAbsolutePath()
										+ " does not exist or is invalid or is not a file.");
					}
					globalMap.put("tFileDelete_3_DELETE_PATH",
							((String) globalMap
									.get("tFileList_2_CURRENT_FILEPATH")));

					tos_count_tFileDelete_3++;

					/**
					 * [tFileDelete_3 main ] stop
					 */

					/**
					 * [tFileDelete_3 process_data_begin ] start
					 */

					currentComponent = "tFileDelete_3";

					/**
					 * [tFileDelete_3 process_data_begin ] stop
					 */

					/**
					 * [tFileDelete_3 process_data_end ] start
					 */

					currentComponent = "tFileDelete_3";

					/**
					 * [tFileDelete_3 process_data_end ] stop
					 */

					/**
					 * [tFileDelete_3 end ] start
					 */

					currentComponent = "tFileDelete_3";

					ok_Hash.put("tFileDelete_3", true);
					end_Hash.put("tFileDelete_3", System.currentTimeMillis());

					if (execStat) {
						runStat.updateStatOnConnection("OnComponentOk5", 0,
								"ok");
					}
					tREST_3Process(globalMap);

					/**
					 * [tFileDelete_3 end ] stop
					 */
					if (execStat) {
						runStat.updateStatOnConnection("iterate2", 2, "exec"
								+ NB_ITERATE_tFileDelete_3);
					}

					/**
					 * [tFileList_2 process_data_end ] start
					 */

					currentComponent = "tFileList_2";

					/**
					 * [tFileList_2 process_data_end ] stop
					 */

					/**
					 * [tFileList_2 end ] start
					 */

					currentComponent = "tFileList_2";

				}
				globalMap.put("tFileList_2_NB_FILE", NB_FILEtFileList_2);

				ok_Hash.put("tFileList_2", true);
				end_Hash.put("tFileList_2", System.currentTimeMillis());

				/**
				 * [tFileList_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_2 finally ] start
				 */

				currentComponent = "tFileList_2";

				/**
				 * [tFileList_2 finally ] stop
				 */

				/**
				 * [tFileDelete_3 finally ] start
				 */

				currentComponent = "tFileDelete_3";

				/**
				 * [tFileDelete_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_2_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Get_file_CRM.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Get_file_CRM.length == 0) {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM) {

				try {

					int length = 0;

					this.Body = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Get_file_CRM.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Get_file_CRM.length == 0) {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[0];

		public String Body;

		public String getBody() {
			return this.Body;
		}

		public Integer ERROR_CODE;

		public Integer getERROR_CODE() {
			return this.ERROR_CODE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Get_file_CRM.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Get_file_CRM.length == 0) {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM) {

				try {

					int length = 0;

					this.Body = readString(dis);

					this.ERROR_CODE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Body, dos);

				// Integer

				writeInteger(this.ERROR_CODE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Body=" + Body);
			sb.append(",ERROR_CODE=" + String.valueOf(ERROR_CODE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tREST_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tREST_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				row13Struct row13 = new row13Struct();
				row13Struct row14 = row13;

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row14" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"/Users/leandro.mendes/Accenture/Raizen/tmp-crm/pre_2018/csvfromapi.txt"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);
				if (filetFileOutputDelimited_3.exists()) {
					throw new RuntimeException(
							"The particular file \""
									+ filetFileOutputDelimited_3
											.getAbsoluteFile()
									+ "\" already exist. If you want to overwrite the file, please uncheck the"
									+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_3, false),
								"UTF-8"));

				resourceMap.put("out_tFileOutputDelimited_3",
						outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row13" + iterateId, 0,
								0);

					}
				}

				int tos_count_tLogRow_5 = 0;

				// /////////////////////

				class Util_tLogRow_5 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[1];

					public void addRow(String[] row) {

						for (int i = 0; i < 1; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 0 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);

						// last column
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() - fillChars[1].length()
								+ 2; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_5 util_tLogRow_5 = new Util_tLogRow_5();
				util_tLogRow_5.setTableName("tLogRow_5");
				util_tLogRow_5.addRow(new String[] { "Body", });
				StringBuilder strBuffer_tLogRow_5 = null;
				int nb_line_tLogRow_5 = 0;
				// /////////////////////

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row11" + iterateId, 0,
								0);

					}
				}

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tREST_3 begin ] start
				 */

				ok_Hash.put("tREST_3", false);
				start_Hash.put("tREST_3", System.currentTimeMillis());

				currentComponent = "tREST_3";

				int tos_count_tREST_3 = 0;

				String endpoint_tREST_3 = "https://dashboard.pmweb.com.br:443/api/v2/metrics/get?v=984&token=9276d698266b0e216cac27e187f1467ee666f6f0101&format=csv";

				String trustStoreFile_tREST_3 = System
						.getProperty("javax.net.ssl.trustStore");
				String trustStoreType_tREST_3 = System
						.getProperty("javax.net.ssl.trustStoreType");
				String trustStorePWD_tREST_3 = System
						.getProperty("javax.net.ssl.trustStorePassword");

				String keyStoreFile_tREST_3 = System
						.getProperty("javax.net.ssl.keyStore");
				String keyStoreType_tREST_3 = System
						.getProperty("javax.net.ssl.keyStoreType");
				String keyStorePWD_tREST_3 = System
						.getProperty("javax.net.ssl.keyStorePassword");

				com.sun.jersey.api.client.config.ClientConfig config_tREST_3 = new com.sun.jersey.api.client.config.DefaultClientConfig();
				javax.net.ssl.SSLContext ctx_tREST_3 = javax.net.ssl.SSLContext
						.getInstance("SSL");

				javax.net.ssl.TrustManager[] tms_tREST_3 = null;
				if (trustStoreFile_tREST_3 != null
						&& trustStoreType_tREST_3 != null) {
					char[] password_tREST_3 = null;
					if (trustStorePWD_tREST_3 != null)
						password_tREST_3 = trustStorePWD_tREST_3.toCharArray();
					java.security.KeyStore trustStore_tREST_3 = java.security.KeyStore
							.getInstance(trustStoreType_tREST_3);
					trustStore_tREST_3.load(new java.io.FileInputStream(
							trustStoreFile_tREST_3), password_tREST_3);

					javax.net.ssl.TrustManagerFactory tmf_tREST_3 = javax.net.ssl.TrustManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory
									.getDefaultAlgorithm());
					tmf_tREST_3.init(trustStore_tREST_3);
					tms_tREST_3 = tmf_tREST_3.getTrustManagers();
				}

				javax.net.ssl.KeyManager[] kms_tREST_3 = null;
				if (keyStoreFile_tREST_3 != null
						&& keyStoreType_tREST_3 != null) {
					char[] password_tREST_3 = null;
					if (keyStorePWD_tREST_3 != null)
						password_tREST_3 = keyStorePWD_tREST_3.toCharArray();
					java.security.KeyStore keyStore_tREST_3 = java.security.KeyStore
							.getInstance(keyStoreType_tREST_3);
					keyStore_tREST_3.load(new java.io.FileInputStream(
							keyStoreFile_tREST_3), password_tREST_3);

					javax.net.ssl.KeyManagerFactory kmf_tREST_3 = javax.net.ssl.KeyManagerFactory
							.getInstance(javax.net.ssl.KeyManagerFactory
									.getDefaultAlgorithm());
					kmf_tREST_3.init(keyStore_tREST_3, password_tREST_3);
					kms_tREST_3 = kmf_tREST_3.getKeyManagers();
				}

				ctx_tREST_3.init(kms_tREST_3, tms_tREST_3, null);
				config_tREST_3
						.getProperties()
						.put(com.sun.jersey.client.urlconnection.HTTPSProperties.PROPERTY_HTTPS_PROPERTIES,
								new com.sun.jersey.client.urlconnection.HTTPSProperties(
										new javax.net.ssl.HostnameVerifier() {

											public boolean verify(
													String hostName,
													javax.net.ssl.SSLSession session) {
												return true;
											}
										}, ctx_tREST_3));

				com.sun.jersey.api.client.Client restClient_tREST_3 = com.sun.jersey.api.client.Client
						.create(config_tREST_3);

				java.util.Map<String, Object> headers_tREST_3 = new java.util.HashMap<String, Object>();

				Object transfer_encoding_tREST_3 = headers_tREST_3
						.get("Transfer-Encoding");
				if (transfer_encoding_tREST_3 != null
						&& "chunked".equals(transfer_encoding_tREST_3)) {
					restClient_tREST_3.setChunkedEncodingSize(4096);
				}

				com.sun.jersey.api.client.WebResource restResource_tREST_3;
				if (endpoint_tREST_3 != null && !("").equals(endpoint_tREST_3)) {
					restResource_tREST_3 = restClient_tREST_3
							.resource(endpoint_tREST_3);
				} else {
					throw new IllegalArgumentException("url can't be empty!");
				}

				com.sun.jersey.api.client.ClientResponse errorResponse_tREST_3 = null;
				String restResponse_tREST_3 = "";
				try {

					com.sun.jersey.api.client.WebResource.Builder builder_tREST_3 = null;
					for (java.util.Map.Entry<String, Object> header_tREST_3 : headers_tREST_3
							.entrySet()) {
						if (builder_tREST_3 == null) {
							builder_tREST_3 = restResource_tREST_3.header(
									header_tREST_3.getKey(),
									header_tREST_3.getValue());
						} else {
							builder_tREST_3.header(header_tREST_3.getKey(),
									header_tREST_3.getValue());
						}
					}

					if (builder_tREST_3 != null) {
						restResponse_tREST_3 = builder_tREST_3
								.get(String.class);
					} else {
						restResponse_tREST_3 = restResource_tREST_3
								.get(String.class);
					}

				} catch (com.sun.jersey.api.client.UniformInterfaceException ue) {
					errorResponse_tREST_3 = ue.getResponse();
				}

				// for output

				row11 = new row11Struct();
				if (errorResponse_tREST_3 != null) {
					row11.ERROR_CODE = errorResponse_tREST_3.getStatus();
					if (row11.ERROR_CODE != 204) {
						row11.Body = errorResponse_tREST_3
								.getEntity(String.class);
					}
				} else {
					row11.Body = restResponse_tREST_3;
				}

				/**
				 * [tREST_3 begin ] stop
				 */

				/**
				 * [tREST_3 main ] start
				 */

				currentComponent = "tREST_3";

				tos_count_tREST_3++;

				/**
				 * [tREST_3 main ] stop
				 */

				/**
				 * [tREST_3 process_data_begin ] start
				 */

				currentComponent = "tREST_3";

				/**
				 * [tREST_3 process_data_begin ] stop
				 */

				/**
				 * [tJavaRow_4 main ] start
				 */

				currentComponent = "tJavaRow_4";

				// row11
				// row11

				if (execStat) {
					runStat.updateStatOnConnection("row11" + iterateId, 1, 1);
				}

				// Code generated according to input schema and output schema
				row13.Body = row11.Body.replace(", ", ".")
						.replace(",00:", ", 00:").replace(",00", ".00");
				row13.ERROR_CODE = row11.ERROR_CODE;

				nb_line_tJavaRow_4++;

				tos_count_tJavaRow_4++;

				/**
				 * [tJavaRow_4 main ] stop
				 */

				/**
				 * [tJavaRow_4 process_data_begin ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 process_data_begin ] stop
				 */

				/**
				 * [tLogRow_5 main ] start
				 */

				currentComponent = "tLogRow_5";

				// row13
				// row13

				if (execStat) {
					runStat.updateStatOnConnection("row13" + iterateId, 1, 1);
				}

				// /////////////////////

				String[] row_tLogRow_5 = new String[1];

				if (row13.Body != null) { //
					row_tLogRow_5[0] = String.valueOf(row13.Body);

				} //

				util_tLogRow_5.addRow(row_tLogRow_5);
				nb_line_tLogRow_5++;
				// ////

				// ////

				// /////////////////////

				row14 = row13;

				tos_count_tLogRow_5++;

				/**
				 * [tLogRow_5 main ] stop
				 */

				/**
				 * [tLogRow_5 process_data_begin ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 process_data_begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 main ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				// row14
				// row14

				if (execStat) {
					runStat.updateStatOnConnection("row14" + iterateId, 1, 1);
				}

				StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
				if (row14.Body != null) {
					sb_tFileOutputDelimited_3.append(row14.Body);
				}
				sb_tFileOutputDelimited_3
						.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

				nb_line_tFileOutputDelimited_3++;
				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);

				outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3
						.toString());

				tos_count_tFileOutputDelimited_3++;

				/**
				 * [tFileOutputDelimited_3 main ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 process_data_begin ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				/**
				 * [tFileOutputDelimited_3 process_data_begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 process_data_end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				/**
				 * [tFileOutputDelimited_3 process_data_end ] stop
				 */

				/**
				 * [tLogRow_5 process_data_end ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 process_data_end ] stop
				 */

				/**
				 * [tJavaRow_4 process_data_end ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 process_data_end ] stop
				 */

				/**
				 * [tREST_3 process_data_end ] start
				 */

				currentComponent = "tREST_3";

				/**
				 * [tREST_3 process_data_end ] stop
				 */

				/**
				 * [tREST_3 end ] start
				 */

				currentComponent = "tREST_3";

				ok_Hash.put("tREST_3", true);
				end_Hash.put("tREST_3", System.currentTimeMillis());

				/**
				 * [tREST_3 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

				// ////

				java.io.PrintStream consoleOut_tLogRow_5 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_5 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_5);
				}

				consoleOut_tLogRow_5
						.println(util_tLogRow_5.format().toString());
				consoleOut_tLogRow_5.flush();
				// ////
				globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row13" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE",
						nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row14" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFileInputDelimited_2Process(globalMap);

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tREST_3 finally ] start
				 */

				currentComponent = "tREST_3";

				/**
				 * [tREST_3 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tREST_3_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[0];

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public String Campaign;

		public String getCampaign() {
			return this.Campaign;
		}

		public String Date_Year;

		public String getDate_Year() {
			return this.Date_Year;
		}

		public String Date_Month;

		public String getDate_Month() {
			return this.Date_Month;
		}

		public String Date_Week;

		public String getDate_Week() {
			return this.Date_Week;
		}

		public String ExtCampaignID;

		public String getExtCampaignID() {
			return this.ExtCampaignID;
		}

		public String FolderName;

		public String getFolderName() {
			return this.FolderName;
		}

		public String LaunchDate;

		public String getLaunchDate() {
			return this.LaunchDate;
		}

		public String LaunchID;

		public String getLaunchID() {
			return this.LaunchID;
		}

		public String LaunchTime;

		public String getLaunchTime() {
			return this.LaunchTime;
		}

		public String MarketingProgram;

		public String getMarketingProgram() {
			return this.MarketingProgram;
		}

		public String MarketingStrategy;

		public String getMarketingStrategy() {
			return this.MarketingStrategy;
		}

		public String ProgramName;

		public String getProgramName() {
			return this.ProgramName;
		}

		public String ProgramStage;

		public String getProgramStage() {
			return this.ProgramStage;
		}

		public String Segment;

		public String getSegment() {
			return this.Segment;
		}

		public String Subject;

		public String getSubject() {
			return this.Subject;
		}

		public String ReturnPath;

		public String getReturnPath() {
			return this.ReturnPath;
		}

		public String Classification;

		public String getClassification() {
			return this.Classification;
		}

		public String Sent;

		public String getSent() {
			return this.Sent;
		}

		public String Opens;

		public String getOpens() {
			return this.Opens;
		}

		public String Clicks;

		public String getClicks() {
			return this.Clicks;
		}

		public String Conversions;

		public String getConversions() {
			return this.Conversions;
		}

		public String Delivered;

		public String getDelivered() {
			return this.Delivered;
		}

		public String Distribution;

		public String getDistribution() {
			return this.Distribution;
		}

		public String HardBounces;

		public String getHardBounces() {
			return this.HardBounces;
		}

		public String OtherUndeliverable;

		public String getOtherUndeliverable() {
			return this.OtherUndeliverable;
		}

		public String PossibleBlock;

		public String getPossibleBlock() {
			return this.PossibleBlock;
		}

		public String SoftBounces;

		public String getSoftBounces() {
			return this.SoftBounces;
		}

		public String SpamComplaintRate;

		public String getSpamComplaintRate() {
			return this.SpamComplaintRate;
		}

		public String TotalClicks;

		public String getTotalClicks() {
			return this.TotalClicks;
		}

		public String TotalOpens;

		public String getTotalOpens() {
			return this.TotalOpens;
		}

		public String TotalOrders;

		public String getTotalOrders() {
			return this.TotalOrders;
		}

		public String SpamComplaints;

		public String getSpamComplaints() {
			return this.SpamComplaints;
		}

		public String Undeliverable;

		public String getUndeliverable() {
			return this.Undeliverable;
		}

		public String Clicks_Desktop;

		public String getClicks_Desktop() {
			return this.Clicks_Desktop;
		}

		public String Clicks_Mobile;

		public String getClicks_Mobile() {
			return this.Clicks_Mobile;
		}

		public String Clicks_Other;

		public String getClicks_Other() {
			return this.Clicks_Other;
		}

		public String UniqueConversion;

		public String getUniqueConversion() {
			return this.UniqueConversion;
		}

		public String Opens_Desktop;

		public String getOpens_Desktop() {
			return this.Opens_Desktop;
		}

		public String Opens_Mobile;

		public String getOpens_Mobile() {
			return this.Opens_Mobile;
		}

		public String Opens_Other;

		public String getOpens_Other() {
			return this.Opens_Other;
		}

		public String _Unsubscribes;

		public String get_Unsubscribes() {
			return this._Unsubscribes;
		}

		public String Bounces;

		public String getBounces() {
			return this.Bounces;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Get_file_CRM.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Get_file_CRM.length == 0) {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM) {

				try {

					int length = 0;

					this.Date = readString(dis);

					this.Campaign = readString(dis);

					this.Date_Year = readString(dis);

					this.Date_Month = readString(dis);

					this.Date_Week = readString(dis);

					this.ExtCampaignID = readString(dis);

					this.FolderName = readString(dis);

					this.LaunchDate = readString(dis);

					this.LaunchID = readString(dis);

					this.LaunchTime = readString(dis);

					this.MarketingProgram = readString(dis);

					this.MarketingStrategy = readString(dis);

					this.ProgramName = readString(dis);

					this.ProgramStage = readString(dis);

					this.Segment = readString(dis);

					this.Subject = readString(dis);

					this.ReturnPath = readString(dis);

					this.Classification = readString(dis);

					this.Sent = readString(dis);

					this.Opens = readString(dis);

					this.Clicks = readString(dis);

					this.Conversions = readString(dis);

					this.Delivered = readString(dis);

					this.Distribution = readString(dis);

					this.HardBounces = readString(dis);

					this.OtherUndeliverable = readString(dis);

					this.PossibleBlock = readString(dis);

					this.SoftBounces = readString(dis);

					this.SpamComplaintRate = readString(dis);

					this.TotalClicks = readString(dis);

					this.TotalOpens = readString(dis);

					this.TotalOrders = readString(dis);

					this.SpamComplaints = readString(dis);

					this.Undeliverable = readString(dis);

					this.Clicks_Desktop = readString(dis);

					this.Clicks_Mobile = readString(dis);

					this.Clicks_Other = readString(dis);

					this.UniqueConversion = readString(dis);

					this.Opens_Desktop = readString(dis);

					this.Opens_Mobile = readString(dis);

					this.Opens_Other = readString(dis);

					this._Unsubscribes = readString(dis);

					this.Bounces = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.Campaign, dos);

				// String

				writeString(this.Date_Year, dos);

				// String

				writeString(this.Date_Month, dos);

				// String

				writeString(this.Date_Week, dos);

				// String

				writeString(this.ExtCampaignID, dos);

				// String

				writeString(this.FolderName, dos);

				// String

				writeString(this.LaunchDate, dos);

				// String

				writeString(this.LaunchID, dos);

				// String

				writeString(this.LaunchTime, dos);

				// String

				writeString(this.MarketingProgram, dos);

				// String

				writeString(this.MarketingStrategy, dos);

				// String

				writeString(this.ProgramName, dos);

				// String

				writeString(this.ProgramStage, dos);

				// String

				writeString(this.Segment, dos);

				// String

				writeString(this.Subject, dos);

				// String

				writeString(this.ReturnPath, dos);

				// String

				writeString(this.Classification, dos);

				// String

				writeString(this.Sent, dos);

				// String

				writeString(this.Opens, dos);

				// String

				writeString(this.Clicks, dos);

				// String

				writeString(this.Conversions, dos);

				// String

				writeString(this.Delivered, dos);

				// String

				writeString(this.Distribution, dos);

				// String

				writeString(this.HardBounces, dos);

				// String

				writeString(this.OtherUndeliverable, dos);

				// String

				writeString(this.PossibleBlock, dos);

				// String

				writeString(this.SoftBounces, dos);

				// String

				writeString(this.SpamComplaintRate, dos);

				// String

				writeString(this.TotalClicks, dos);

				// String

				writeString(this.TotalOpens, dos);

				// String

				writeString(this.TotalOrders, dos);

				// String

				writeString(this.SpamComplaints, dos);

				// String

				writeString(this.Undeliverable, dos);

				// String

				writeString(this.Clicks_Desktop, dos);

				// String

				writeString(this.Clicks_Mobile, dos);

				// String

				writeString(this.Clicks_Other, dos);

				// String

				writeString(this.UniqueConversion, dos);

				// String

				writeString(this.Opens_Desktop, dos);

				// String

				writeString(this.Opens_Mobile, dos);

				// String

				writeString(this.Opens_Other, dos);

				// String

				writeString(this._Unsubscribes, dos);

				// String

				writeString(this.Bounces, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Date=" + Date);
			sb.append(",Campaign=" + Campaign);
			sb.append(",Date_Year=" + Date_Year);
			sb.append(",Date_Month=" + Date_Month);
			sb.append(",Date_Week=" + Date_Week);
			sb.append(",ExtCampaignID=" + ExtCampaignID);
			sb.append(",FolderName=" + FolderName);
			sb.append(",LaunchDate=" + LaunchDate);
			sb.append(",LaunchID=" + LaunchID);
			sb.append(",LaunchTime=" + LaunchTime);
			sb.append(",MarketingProgram=" + MarketingProgram);
			sb.append(",MarketingStrategy=" + MarketingStrategy);
			sb.append(",ProgramName=" + ProgramName);
			sb.append(",ProgramStage=" + ProgramStage);
			sb.append(",Segment=" + Segment);
			sb.append(",Subject=" + Subject);
			sb.append(",ReturnPath=" + ReturnPath);
			sb.append(",Classification=" + Classification);
			sb.append(",Sent=" + Sent);
			sb.append(",Opens=" + Opens);
			sb.append(",Clicks=" + Clicks);
			sb.append(",Conversions=" + Conversions);
			sb.append(",Delivered=" + Delivered);
			sb.append(",Distribution=" + Distribution);
			sb.append(",HardBounces=" + HardBounces);
			sb.append(",OtherUndeliverable=" + OtherUndeliverable);
			sb.append(",PossibleBlock=" + PossibleBlock);
			sb.append(",SoftBounces=" + SoftBounces);
			sb.append(",SpamComplaintRate=" + SpamComplaintRate);
			sb.append(",TotalClicks=" + TotalClicks);
			sb.append(",TotalOpens=" + TotalOpens);
			sb.append(",TotalOrders=" + TotalOrders);
			sb.append(",SpamComplaints=" + SpamComplaints);
			sb.append(",Undeliverable=" + Undeliverable);
			sb.append(",Clicks_Desktop=" + Clicks_Desktop);
			sb.append(",Clicks_Mobile=" + Clicks_Mobile);
			sb.append(",Clicks_Other=" + Clicks_Other);
			sb.append(",UniqueConversion=" + UniqueConversion);
			sb.append(",Opens_Desktop=" + Opens_Desktop);
			sb.append(",Opens_Mobile=" + Opens_Mobile);
			sb.append(",Opens_Other=" + Opens_Other);
			sb.append(",_Unsubscribes=" + _Unsubscribes);
			sb.append(",Bounces=" + Bounces);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[0];

		public String _Date_;

		public String get_Date_() {
			return this._Date_;
		}

		public String _Campaign_;

		public String get_Campaign_() {
			return this._Campaign_;
		}

		public String _Date_Year_;

		public String get_Date_Year_() {
			return this._Date_Year_;
		}

		public String _Date_Month_;

		public String get_Date_Month_() {
			return this._Date_Month_;
		}

		public String _Date_Week_;

		public String get_Date_Week_() {
			return this._Date_Week_;
		}

		public String _ExtCampaignID_;

		public String get_ExtCampaignID_() {
			return this._ExtCampaignID_;
		}

		public String _FolderName_;

		public String get_FolderName_() {
			return this._FolderName_;
		}

		public String _LaunchDate_;

		public String get_LaunchDate_() {
			return this._LaunchDate_;
		}

		public String _LaunchID_;

		public String get_LaunchID_() {
			return this._LaunchID_;
		}

		public String _LaunchTime_;

		public String get_LaunchTime_() {
			return this._LaunchTime_;
		}

		public String _MarketingProgram_;

		public String get_MarketingProgram_() {
			return this._MarketingProgram_;
		}

		public String _MarketingStrategy_;

		public String get_MarketingStrategy_() {
			return this._MarketingStrategy_;
		}

		public String _ProgramName_;

		public String get_ProgramName_() {
			return this._ProgramName_;
		}

		public String _ProgramStage_;

		public String get_ProgramStage_() {
			return this._ProgramStage_;
		}

		public String _Segment_;

		public String get_Segment_() {
			return this._Segment_;
		}

		public String _Subject_;

		public String get_Subject_() {
			return this._Subject_;
		}

		public String _ReturnPath_;

		public String get_ReturnPath_() {
			return this._ReturnPath_;
		}

		public String _Classification_;

		public String get_Classification_() {
			return this._Classification_;
		}

		public String _Sent_;

		public String get_Sent_() {
			return this._Sent_;
		}

		public String _Opens_;

		public String get_Opens_() {
			return this._Opens_;
		}

		public String _Clicks_;

		public String get_Clicks_() {
			return this._Clicks_;
		}

		public String _Conversions_;

		public String get_Conversions_() {
			return this._Conversions_;
		}

		public String _Delivered_;

		public String get_Delivered_() {
			return this._Delivered_;
		}

		public String _Distribution_;

		public String get_Distribution_() {
			return this._Distribution_;
		}

		public String _HardBounces_;

		public String get_HardBounces_() {
			return this._HardBounces_;
		}

		public String _OtherUndeliverable_;

		public String get_OtherUndeliverable_() {
			return this._OtherUndeliverable_;
		}

		public String _PossibleBlock_;

		public String get_PossibleBlock_() {
			return this._PossibleBlock_;
		}

		public String _SoftBounces_;

		public String get_SoftBounces_() {
			return this._SoftBounces_;
		}

		public String _SpamComplaintRate_;

		public String get_SpamComplaintRate_() {
			return this._SpamComplaintRate_;
		}

		public String _TotalClicks_;

		public String get_TotalClicks_() {
			return this._TotalClicks_;
		}

		public String _TotalOpens_;

		public String get_TotalOpens_() {
			return this._TotalOpens_;
		}

		public String _TotalOrders_;

		public String get_TotalOrders_() {
			return this._TotalOrders_;
		}

		public String _SpamComplaints_;

		public String get_SpamComplaints_() {
			return this._SpamComplaints_;
		}

		public String _Undeliverable_;

		public String get_Undeliverable_() {
			return this._Undeliverable_;
		}

		public String _Clicks_Desktop_;

		public String get_Clicks_Desktop_() {
			return this._Clicks_Desktop_;
		}

		public String _Clicks_Mobile_;

		public String get_Clicks_Mobile_() {
			return this._Clicks_Mobile_;
		}

		public String _Clicks_Other_;

		public String get_Clicks_Other_() {
			return this._Clicks_Other_;
		}

		public String _UniqueConversion_;

		public String get_UniqueConversion_() {
			return this._UniqueConversion_;
		}

		public String _Opens_Desktop_;

		public String get_Opens_Desktop_() {
			return this._Opens_Desktop_;
		}

		public String _Opens_Mobile_;

		public String get_Opens_Mobile_() {
			return this._Opens_Mobile_;
		}

		public String _Opens_Other_;

		public String get_Opens_Other_() {
			return this._Opens_Other_;
		}

		public String _Unsubscribes_;

		public String get_Unsubscribes_() {
			return this._Unsubscribes_;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Get_file_CRM.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Get_file_CRM.length == 0) {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM) {

				try {

					int length = 0;

					this._Date_ = readString(dis);

					this._Campaign_ = readString(dis);

					this._Date_Year_ = readString(dis);

					this._Date_Month_ = readString(dis);

					this._Date_Week_ = readString(dis);

					this._ExtCampaignID_ = readString(dis);

					this._FolderName_ = readString(dis);

					this._LaunchDate_ = readString(dis);

					this._LaunchID_ = readString(dis);

					this._LaunchTime_ = readString(dis);

					this._MarketingProgram_ = readString(dis);

					this._MarketingStrategy_ = readString(dis);

					this._ProgramName_ = readString(dis);

					this._ProgramStage_ = readString(dis);

					this._Segment_ = readString(dis);

					this._Subject_ = readString(dis);

					this._ReturnPath_ = readString(dis);

					this._Classification_ = readString(dis);

					this._Sent_ = readString(dis);

					this._Opens_ = readString(dis);

					this._Clicks_ = readString(dis);

					this._Conversions_ = readString(dis);

					this._Delivered_ = readString(dis);

					this._Distribution_ = readString(dis);

					this._HardBounces_ = readString(dis);

					this._OtherUndeliverable_ = readString(dis);

					this._PossibleBlock_ = readString(dis);

					this._SoftBounces_ = readString(dis);

					this._SpamComplaintRate_ = readString(dis);

					this._TotalClicks_ = readString(dis);

					this._TotalOpens_ = readString(dis);

					this._TotalOrders_ = readString(dis);

					this._SpamComplaints_ = readString(dis);

					this._Undeliverable_ = readString(dis);

					this._Clicks_Desktop_ = readString(dis);

					this._Clicks_Mobile_ = readString(dis);

					this._Clicks_Other_ = readString(dis);

					this._UniqueConversion_ = readString(dis);

					this._Opens_Desktop_ = readString(dis);

					this._Opens_Mobile_ = readString(dis);

					this._Opens_Other_ = readString(dis);

					this._Unsubscribes_ = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._Date_, dos);

				// String

				writeString(this._Campaign_, dos);

				// String

				writeString(this._Date_Year_, dos);

				// String

				writeString(this._Date_Month_, dos);

				// String

				writeString(this._Date_Week_, dos);

				// String

				writeString(this._ExtCampaignID_, dos);

				// String

				writeString(this._FolderName_, dos);

				// String

				writeString(this._LaunchDate_, dos);

				// String

				writeString(this._LaunchID_, dos);

				// String

				writeString(this._LaunchTime_, dos);

				// String

				writeString(this._MarketingProgram_, dos);

				// String

				writeString(this._MarketingStrategy_, dos);

				// String

				writeString(this._ProgramName_, dos);

				// String

				writeString(this._ProgramStage_, dos);

				// String

				writeString(this._Segment_, dos);

				// String

				writeString(this._Subject_, dos);

				// String

				writeString(this._ReturnPath_, dos);

				// String

				writeString(this._Classification_, dos);

				// String

				writeString(this._Sent_, dos);

				// String

				writeString(this._Opens_, dos);

				// String

				writeString(this._Clicks_, dos);

				// String

				writeString(this._Conversions_, dos);

				// String

				writeString(this._Delivered_, dos);

				// String

				writeString(this._Distribution_, dos);

				// String

				writeString(this._HardBounces_, dos);

				// String

				writeString(this._OtherUndeliverable_, dos);

				// String

				writeString(this._PossibleBlock_, dos);

				// String

				writeString(this._SoftBounces_, dos);

				// String

				writeString(this._SpamComplaintRate_, dos);

				// String

				writeString(this._TotalClicks_, dos);

				// String

				writeString(this._TotalOpens_, dos);

				// String

				writeString(this._TotalOrders_, dos);

				// String

				writeString(this._SpamComplaints_, dos);

				// String

				writeString(this._Undeliverable_, dos);

				// String

				writeString(this._Clicks_Desktop_, dos);

				// String

				writeString(this._Clicks_Mobile_, dos);

				// String

				writeString(this._Clicks_Other_, dos);

				// String

				writeString(this._UniqueConversion_, dos);

				// String

				writeString(this._Opens_Desktop_, dos);

				// String

				writeString(this._Opens_Mobile_, dos);

				// String

				writeString(this._Opens_Other_, dos);

				// String

				writeString(this._Unsubscribes_, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_Date_=" + _Date_);
			sb.append(",_Campaign_=" + _Campaign_);
			sb.append(",_Date_Year_=" + _Date_Year_);
			sb.append(",_Date_Month_=" + _Date_Month_);
			sb.append(",_Date_Week_=" + _Date_Week_);
			sb.append(",_ExtCampaignID_=" + _ExtCampaignID_);
			sb.append(",_FolderName_=" + _FolderName_);
			sb.append(",_LaunchDate_=" + _LaunchDate_);
			sb.append(",_LaunchID_=" + _LaunchID_);
			sb.append(",_LaunchTime_=" + _LaunchTime_);
			sb.append(",_MarketingProgram_=" + _MarketingProgram_);
			sb.append(",_MarketingStrategy_=" + _MarketingStrategy_);
			sb.append(",_ProgramName_=" + _ProgramName_);
			sb.append(",_ProgramStage_=" + _ProgramStage_);
			sb.append(",_Segment_=" + _Segment_);
			sb.append(",_Subject_=" + _Subject_);
			sb.append(",_ReturnPath_=" + _ReturnPath_);
			sb.append(",_Classification_=" + _Classification_);
			sb.append(",_Sent_=" + _Sent_);
			sb.append(",_Opens_=" + _Opens_);
			sb.append(",_Clicks_=" + _Clicks_);
			sb.append(",_Conversions_=" + _Conversions_);
			sb.append(",_Delivered_=" + _Delivered_);
			sb.append(",_Distribution_=" + _Distribution_);
			sb.append(",_HardBounces_=" + _HardBounces_);
			sb.append(",_OtherUndeliverable_=" + _OtherUndeliverable_);
			sb.append(",_PossibleBlock_=" + _PossibleBlock_);
			sb.append(",_SoftBounces_=" + _SoftBounces_);
			sb.append(",_SpamComplaintRate_=" + _SpamComplaintRate_);
			sb.append(",_TotalClicks_=" + _TotalClicks_);
			sb.append(",_TotalOpens_=" + _TotalOpens_);
			sb.append(",_TotalOrders_=" + _TotalOrders_);
			sb.append(",_SpamComplaints_=" + _SpamComplaints_);
			sb.append(",_Undeliverable_=" + _Undeliverable_);
			sb.append(",_Clicks_Desktop_=" + _Clicks_Desktop_);
			sb.append(",_Clicks_Mobile_=" + _Clicks_Mobile_);
			sb.append(",_Clicks_Other_=" + _Clicks_Other_);
			sb.append(",_UniqueConversion_=" + _UniqueConversion_);
			sb.append(",_Opens_Desktop_=" + _Opens_Desktop_);
			sb.append(",_Opens_Mobile_=" + _Opens_Mobile_);
			sb.append(",_Opens_Other_=" + _Opens_Other_);
			sb.append(",_Unsubscribes_=" + _Unsubscribes_);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[0];

		public String _Date_;

		public String get_Date_() {
			return this._Date_;
		}

		public String _Campaign_;

		public String get_Campaign_() {
			return this._Campaign_;
		}

		public String _Date_Year_;

		public String get_Date_Year_() {
			return this._Date_Year_;
		}

		public String _Date_Month_;

		public String get_Date_Month_() {
			return this._Date_Month_;
		}

		public String _Date_Week_;

		public String get_Date_Week_() {
			return this._Date_Week_;
		}

		public String _ExtCampaignID_;

		public String get_ExtCampaignID_() {
			return this._ExtCampaignID_;
		}

		public String _FolderName_;

		public String get_FolderName_() {
			return this._FolderName_;
		}

		public String _LaunchDate_;

		public String get_LaunchDate_() {
			return this._LaunchDate_;
		}

		public String _LaunchID_;

		public String get_LaunchID_() {
			return this._LaunchID_;
		}

		public String _LaunchTime_;

		public String get_LaunchTime_() {
			return this._LaunchTime_;
		}

		public String _MarketingProgram_;

		public String get_MarketingProgram_() {
			return this._MarketingProgram_;
		}

		public String _MarketingStrategy_;

		public String get_MarketingStrategy_() {
			return this._MarketingStrategy_;
		}

		public String _ProgramName_;

		public String get_ProgramName_() {
			return this._ProgramName_;
		}

		public String _ProgramStage_;

		public String get_ProgramStage_() {
			return this._ProgramStage_;
		}

		public String _Segment_;

		public String get_Segment_() {
			return this._Segment_;
		}

		public String _Subject_;

		public String get_Subject_() {
			return this._Subject_;
		}

		public String _ReturnPath_;

		public String get_ReturnPath_() {
			return this._ReturnPath_;
		}

		public String _Classification_;

		public String get_Classification_() {
			return this._Classification_;
		}

		public String _Sent_;

		public String get_Sent_() {
			return this._Sent_;
		}

		public String _Opens_;

		public String get_Opens_() {
			return this._Opens_;
		}

		public String _Clicks_;

		public String get_Clicks_() {
			return this._Clicks_;
		}

		public String _Conversions_;

		public String get_Conversions_() {
			return this._Conversions_;
		}

		public String _Delivered_;

		public String get_Delivered_() {
			return this._Delivered_;
		}

		public String _Distribution_;

		public String get_Distribution_() {
			return this._Distribution_;
		}

		public String _HardBounces_;

		public String get_HardBounces_() {
			return this._HardBounces_;
		}

		public String _OtherUndeliverable_;

		public String get_OtherUndeliverable_() {
			return this._OtherUndeliverable_;
		}

		public String _PossibleBlock_;

		public String get_PossibleBlock_() {
			return this._PossibleBlock_;
		}

		public String _SoftBounces_;

		public String get_SoftBounces_() {
			return this._SoftBounces_;
		}

		public String _SpamComplaintRate_;

		public String get_SpamComplaintRate_() {
			return this._SpamComplaintRate_;
		}

		public String _TotalClicks_;

		public String get_TotalClicks_() {
			return this._TotalClicks_;
		}

		public String _TotalOpens_;

		public String get_TotalOpens_() {
			return this._TotalOpens_;
		}

		public String _TotalOrders_;

		public String get_TotalOrders_() {
			return this._TotalOrders_;
		}

		public String _SpamComplaints_;

		public String get_SpamComplaints_() {
			return this._SpamComplaints_;
		}

		public String _Undeliverable_;

		public String get_Undeliverable_() {
			return this._Undeliverable_;
		}

		public String _Clicks_Desktop_;

		public String get_Clicks_Desktop_() {
			return this._Clicks_Desktop_;
		}

		public String _Clicks_Mobile_;

		public String get_Clicks_Mobile_() {
			return this._Clicks_Mobile_;
		}

		public String _Clicks_Other_;

		public String get_Clicks_Other_() {
			return this._Clicks_Other_;
		}

		public String _UniqueConversion_;

		public String get_UniqueConversion_() {
			return this._UniqueConversion_;
		}

		public String _Opens_Desktop_;

		public String get_Opens_Desktop_() {
			return this._Opens_Desktop_;
		}

		public String _Opens_Mobile_;

		public String get_Opens_Mobile_() {
			return this._Opens_Mobile_;
		}

		public String _Opens_Other_;

		public String get_Opens_Other_() {
			return this._Opens_Other_;
		}

		public String _Unsubscribes_;

		public String get_Unsubscribes_() {
			return this._Unsubscribes_;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Get_file_CRM.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Get_file_CRM.length == 0) {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM) {

				try {

					int length = 0;

					this._Date_ = readString(dis);

					this._Campaign_ = readString(dis);

					this._Date_Year_ = readString(dis);

					this._Date_Month_ = readString(dis);

					this._Date_Week_ = readString(dis);

					this._ExtCampaignID_ = readString(dis);

					this._FolderName_ = readString(dis);

					this._LaunchDate_ = readString(dis);

					this._LaunchID_ = readString(dis);

					this._LaunchTime_ = readString(dis);

					this._MarketingProgram_ = readString(dis);

					this._MarketingStrategy_ = readString(dis);

					this._ProgramName_ = readString(dis);

					this._ProgramStage_ = readString(dis);

					this._Segment_ = readString(dis);

					this._Subject_ = readString(dis);

					this._ReturnPath_ = readString(dis);

					this._Classification_ = readString(dis);

					this._Sent_ = readString(dis);

					this._Opens_ = readString(dis);

					this._Clicks_ = readString(dis);

					this._Conversions_ = readString(dis);

					this._Delivered_ = readString(dis);

					this._Distribution_ = readString(dis);

					this._HardBounces_ = readString(dis);

					this._OtherUndeliverable_ = readString(dis);

					this._PossibleBlock_ = readString(dis);

					this._SoftBounces_ = readString(dis);

					this._SpamComplaintRate_ = readString(dis);

					this._TotalClicks_ = readString(dis);

					this._TotalOpens_ = readString(dis);

					this._TotalOrders_ = readString(dis);

					this._SpamComplaints_ = readString(dis);

					this._Undeliverable_ = readString(dis);

					this._Clicks_Desktop_ = readString(dis);

					this._Clicks_Mobile_ = readString(dis);

					this._Clicks_Other_ = readString(dis);

					this._UniqueConversion_ = readString(dis);

					this._Opens_Desktop_ = readString(dis);

					this._Opens_Mobile_ = readString(dis);

					this._Opens_Other_ = readString(dis);

					this._Unsubscribes_ = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._Date_, dos);

				// String

				writeString(this._Campaign_, dos);

				// String

				writeString(this._Date_Year_, dos);

				// String

				writeString(this._Date_Month_, dos);

				// String

				writeString(this._Date_Week_, dos);

				// String

				writeString(this._ExtCampaignID_, dos);

				// String

				writeString(this._FolderName_, dos);

				// String

				writeString(this._LaunchDate_, dos);

				// String

				writeString(this._LaunchID_, dos);

				// String

				writeString(this._LaunchTime_, dos);

				// String

				writeString(this._MarketingProgram_, dos);

				// String

				writeString(this._MarketingStrategy_, dos);

				// String

				writeString(this._ProgramName_, dos);

				// String

				writeString(this._ProgramStage_, dos);

				// String

				writeString(this._Segment_, dos);

				// String

				writeString(this._Subject_, dos);

				// String

				writeString(this._ReturnPath_, dos);

				// String

				writeString(this._Classification_, dos);

				// String

				writeString(this._Sent_, dos);

				// String

				writeString(this._Opens_, dos);

				// String

				writeString(this._Clicks_, dos);

				// String

				writeString(this._Conversions_, dos);

				// String

				writeString(this._Delivered_, dos);

				// String

				writeString(this._Distribution_, dos);

				// String

				writeString(this._HardBounces_, dos);

				// String

				writeString(this._OtherUndeliverable_, dos);

				// String

				writeString(this._PossibleBlock_, dos);

				// String

				writeString(this._SoftBounces_, dos);

				// String

				writeString(this._SpamComplaintRate_, dos);

				// String

				writeString(this._TotalClicks_, dos);

				// String

				writeString(this._TotalOpens_, dos);

				// String

				writeString(this._TotalOrders_, dos);

				// String

				writeString(this._SpamComplaints_, dos);

				// String

				writeString(this._Undeliverable_, dos);

				// String

				writeString(this._Clicks_Desktop_, dos);

				// String

				writeString(this._Clicks_Mobile_, dos);

				// String

				writeString(this._Clicks_Other_, dos);

				// String

				writeString(this._UniqueConversion_, dos);

				// String

				writeString(this._Opens_Desktop_, dos);

				// String

				writeString(this._Opens_Mobile_, dos);

				// String

				writeString(this._Opens_Other_, dos);

				// String

				writeString(this._Unsubscribes_, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_Date_=" + _Date_);
			sb.append(",_Campaign_=" + _Campaign_);
			sb.append(",_Date_Year_=" + _Date_Year_);
			sb.append(",_Date_Month_=" + _Date_Month_);
			sb.append(",_Date_Week_=" + _Date_Week_);
			sb.append(",_ExtCampaignID_=" + _ExtCampaignID_);
			sb.append(",_FolderName_=" + _FolderName_);
			sb.append(",_LaunchDate_=" + _LaunchDate_);
			sb.append(",_LaunchID_=" + _LaunchID_);
			sb.append(",_LaunchTime_=" + _LaunchTime_);
			sb.append(",_MarketingProgram_=" + _MarketingProgram_);
			sb.append(",_MarketingStrategy_=" + _MarketingStrategy_);
			sb.append(",_ProgramName_=" + _ProgramName_);
			sb.append(",_ProgramStage_=" + _ProgramStage_);
			sb.append(",_Segment_=" + _Segment_);
			sb.append(",_Subject_=" + _Subject_);
			sb.append(",_ReturnPath_=" + _ReturnPath_);
			sb.append(",_Classification_=" + _Classification_);
			sb.append(",_Sent_=" + _Sent_);
			sb.append(",_Opens_=" + _Opens_);
			sb.append(",_Clicks_=" + _Clicks_);
			sb.append(",_Conversions_=" + _Conversions_);
			sb.append(",_Delivered_=" + _Delivered_);
			sb.append(",_Distribution_=" + _Distribution_);
			sb.append(",_HardBounces_=" + _HardBounces_);
			sb.append(",_OtherUndeliverable_=" + _OtherUndeliverable_);
			sb.append(",_PossibleBlock_=" + _PossibleBlock_);
			sb.append(",_SoftBounces_=" + _SoftBounces_);
			sb.append(",_SpamComplaintRate_=" + _SpamComplaintRate_);
			sb.append(",_TotalClicks_=" + _TotalClicks_);
			sb.append(",_TotalOpens_=" + _TotalOpens_);
			sb.append(",_TotalOrders_=" + _TotalOrders_);
			sb.append(",_SpamComplaints_=" + _SpamComplaints_);
			sb.append(",_Undeliverable_=" + _Undeliverable_);
			sb.append(",_Clicks_Desktop_=" + _Clicks_Desktop_);
			sb.append(",_Clicks_Mobile_=" + _Clicks_Mobile_);
			sb.append(",_Clicks_Other_=" + _Clicks_Other_);
			sb.append(",_UniqueConversion_=" + _UniqueConversion_);
			sb.append(",_Opens_Desktop_=" + _Opens_Desktop_);
			sb.append(",_Opens_Mobile_=" + _Opens_Mobile_);
			sb.append(",_Opens_Other_=" + _Opens_Other_);
			sb.append(",_Unsubscribes_=" + _Unsubscribes_);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM = new byte[0];
		static byte[] commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[0];

		public String _Date_;

		public String get_Date_() {
			return this._Date_;
		}

		public String _Campaign_;

		public String get_Campaign_() {
			return this._Campaign_;
		}

		public String _Date_Year_;

		public String get_Date_Year_() {
			return this._Date_Year_;
		}

		public String _Date_Month_;

		public String get_Date_Month_() {
			return this._Date_Month_;
		}

		public String _Date_Week_;

		public String get_Date_Week_() {
			return this._Date_Week_;
		}

		public String _ExtCampaignID_;

		public String get_ExtCampaignID_() {
			return this._ExtCampaignID_;
		}

		public String _FolderName_;

		public String get_FolderName_() {
			return this._FolderName_;
		}

		public String _LaunchDate_;

		public String get_LaunchDate_() {
			return this._LaunchDate_;
		}

		public String _LaunchID_;

		public String get_LaunchID_() {
			return this._LaunchID_;
		}

		public String _LaunchTime_;

		public String get_LaunchTime_() {
			return this._LaunchTime_;
		}

		public String _MarketingProgram_;

		public String get_MarketingProgram_() {
			return this._MarketingProgram_;
		}

		public String _MarketingStrategy_;

		public String get_MarketingStrategy_() {
			return this._MarketingStrategy_;
		}

		public String _ProgramName_;

		public String get_ProgramName_() {
			return this._ProgramName_;
		}

		public String _ProgramStage_;

		public String get_ProgramStage_() {
			return this._ProgramStage_;
		}

		public String _Segment_;

		public String get_Segment_() {
			return this._Segment_;
		}

		public String _Subject_;

		public String get_Subject_() {
			return this._Subject_;
		}

		public String _ReturnPath_;

		public String get_ReturnPath_() {
			return this._ReturnPath_;
		}

		public String _Classification_;

		public String get_Classification_() {
			return this._Classification_;
		}

		public String _Sent_;

		public String get_Sent_() {
			return this._Sent_;
		}

		public String _Opens_;

		public String get_Opens_() {
			return this._Opens_;
		}

		public String _Clicks_;

		public String get_Clicks_() {
			return this._Clicks_;
		}

		public String _Conversions_;

		public String get_Conversions_() {
			return this._Conversions_;
		}

		public String _Delivered_;

		public String get_Delivered_() {
			return this._Delivered_;
		}

		public String _Distribution_;

		public String get_Distribution_() {
			return this._Distribution_;
		}

		public String _HardBounces_;

		public String get_HardBounces_() {
			return this._HardBounces_;
		}

		public String _OtherUndeliverable_;

		public String get_OtherUndeliverable_() {
			return this._OtherUndeliverable_;
		}

		public String _PossibleBlock_;

		public String get_PossibleBlock_() {
			return this._PossibleBlock_;
		}

		public String _SoftBounces_;

		public String get_SoftBounces_() {
			return this._SoftBounces_;
		}

		public String _SpamComplaintRate_;

		public String get_SpamComplaintRate_() {
			return this._SpamComplaintRate_;
		}

		public String _TotalClicks_;

		public String get_TotalClicks_() {
			return this._TotalClicks_;
		}

		public String _TotalOpens_;

		public String get_TotalOpens_() {
			return this._TotalOpens_;
		}

		public String _TotalOrders_;

		public String get_TotalOrders_() {
			return this._TotalOrders_;
		}

		public String _SpamComplaints_;

		public String get_SpamComplaints_() {
			return this._SpamComplaints_;
		}

		public String _Undeliverable_;

		public String get_Undeliverable_() {
			return this._Undeliverable_;
		}

		public String _Clicks_Desktop_;

		public String get_Clicks_Desktop_() {
			return this._Clicks_Desktop_;
		}

		public String _Clicks_Mobile_;

		public String get_Clicks_Mobile_() {
			return this._Clicks_Mobile_;
		}

		public String _Clicks_Other_;

		public String get_Clicks_Other_() {
			return this._Clicks_Other_;
		}

		public String _UniqueConversion_;

		public String get_UniqueConversion_() {
			return this._UniqueConversion_;
		}

		public String _Opens_Desktop_;

		public String get_Opens_Desktop_() {
			return this._Opens_Desktop_;
		}

		public String _Opens_Mobile_;

		public String get_Opens_Mobile_() {
			return this._Opens_Mobile_;
		}

		public String _Opens_Other_;

		public String get_Opens_Other_() {
			return this._Opens_Other_;
		}

		public String _Unsubscribes_;

		public String get_Unsubscribes_() {
			return this._Unsubscribes_;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_LOCAL_PROJECT_Get_file_CRM.length) {
					if (length < 1024
							&& commonByteArray_LOCAL_PROJECT_Get_file_CRM.length == 0) {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[1024];
					} else {
						commonByteArray_LOCAL_PROJECT_Get_file_CRM = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0,
						length);
				strReturn = new String(
						commonByteArray_LOCAL_PROJECT_Get_file_CRM, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_LOCAL_PROJECT_Get_file_CRM) {

				try {

					int length = 0;

					this._Date_ = readString(dis);

					this._Campaign_ = readString(dis);

					this._Date_Year_ = readString(dis);

					this._Date_Month_ = readString(dis);

					this._Date_Week_ = readString(dis);

					this._ExtCampaignID_ = readString(dis);

					this._FolderName_ = readString(dis);

					this._LaunchDate_ = readString(dis);

					this._LaunchID_ = readString(dis);

					this._LaunchTime_ = readString(dis);

					this._MarketingProgram_ = readString(dis);

					this._MarketingStrategy_ = readString(dis);

					this._ProgramName_ = readString(dis);

					this._ProgramStage_ = readString(dis);

					this._Segment_ = readString(dis);

					this._Subject_ = readString(dis);

					this._ReturnPath_ = readString(dis);

					this._Classification_ = readString(dis);

					this._Sent_ = readString(dis);

					this._Opens_ = readString(dis);

					this._Clicks_ = readString(dis);

					this._Conversions_ = readString(dis);

					this._Delivered_ = readString(dis);

					this._Distribution_ = readString(dis);

					this._HardBounces_ = readString(dis);

					this._OtherUndeliverable_ = readString(dis);

					this._PossibleBlock_ = readString(dis);

					this._SoftBounces_ = readString(dis);

					this._SpamComplaintRate_ = readString(dis);

					this._TotalClicks_ = readString(dis);

					this._TotalOpens_ = readString(dis);

					this._TotalOrders_ = readString(dis);

					this._SpamComplaints_ = readString(dis);

					this._Undeliverable_ = readString(dis);

					this._Clicks_Desktop_ = readString(dis);

					this._Clicks_Mobile_ = readString(dis);

					this._Clicks_Other_ = readString(dis);

					this._UniqueConversion_ = readString(dis);

					this._Opens_Desktop_ = readString(dis);

					this._Opens_Mobile_ = readString(dis);

					this._Opens_Other_ = readString(dis);

					this._Unsubscribes_ = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this._Date_, dos);

				// String

				writeString(this._Campaign_, dos);

				// String

				writeString(this._Date_Year_, dos);

				// String

				writeString(this._Date_Month_, dos);

				// String

				writeString(this._Date_Week_, dos);

				// String

				writeString(this._ExtCampaignID_, dos);

				// String

				writeString(this._FolderName_, dos);

				// String

				writeString(this._LaunchDate_, dos);

				// String

				writeString(this._LaunchID_, dos);

				// String

				writeString(this._LaunchTime_, dos);

				// String

				writeString(this._MarketingProgram_, dos);

				// String

				writeString(this._MarketingStrategy_, dos);

				// String

				writeString(this._ProgramName_, dos);

				// String

				writeString(this._ProgramStage_, dos);

				// String

				writeString(this._Segment_, dos);

				// String

				writeString(this._Subject_, dos);

				// String

				writeString(this._ReturnPath_, dos);

				// String

				writeString(this._Classification_, dos);

				// String

				writeString(this._Sent_, dos);

				// String

				writeString(this._Opens_, dos);

				// String

				writeString(this._Clicks_, dos);

				// String

				writeString(this._Conversions_, dos);

				// String

				writeString(this._Delivered_, dos);

				// String

				writeString(this._Distribution_, dos);

				// String

				writeString(this._HardBounces_, dos);

				// String

				writeString(this._OtherUndeliverable_, dos);

				// String

				writeString(this._PossibleBlock_, dos);

				// String

				writeString(this._SoftBounces_, dos);

				// String

				writeString(this._SpamComplaintRate_, dos);

				// String

				writeString(this._TotalClicks_, dos);

				// String

				writeString(this._TotalOpens_, dos);

				// String

				writeString(this._TotalOrders_, dos);

				// String

				writeString(this._SpamComplaints_, dos);

				// String

				writeString(this._Undeliverable_, dos);

				// String

				writeString(this._Clicks_Desktop_, dos);

				// String

				writeString(this._Clicks_Mobile_, dos);

				// String

				writeString(this._Clicks_Other_, dos);

				// String

				writeString(this._UniqueConversion_, dos);

				// String

				writeString(this._Opens_Desktop_, dos);

				// String

				writeString(this._Opens_Mobile_, dos);

				// String

				writeString(this._Opens_Other_, dos);

				// String

				writeString(this._Unsubscribes_, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("_Date_=" + _Date_);
			sb.append(",_Campaign_=" + _Campaign_);
			sb.append(",_Date_Year_=" + _Date_Year_);
			sb.append(",_Date_Month_=" + _Date_Month_);
			sb.append(",_Date_Week_=" + _Date_Week_);
			sb.append(",_ExtCampaignID_=" + _ExtCampaignID_);
			sb.append(",_FolderName_=" + _FolderName_);
			sb.append(",_LaunchDate_=" + _LaunchDate_);
			sb.append(",_LaunchID_=" + _LaunchID_);
			sb.append(",_LaunchTime_=" + _LaunchTime_);
			sb.append(",_MarketingProgram_=" + _MarketingProgram_);
			sb.append(",_MarketingStrategy_=" + _MarketingStrategy_);
			sb.append(",_ProgramName_=" + _ProgramName_);
			sb.append(",_ProgramStage_=" + _ProgramStage_);
			sb.append(",_Segment_=" + _Segment_);
			sb.append(",_Subject_=" + _Subject_);
			sb.append(",_ReturnPath_=" + _ReturnPath_);
			sb.append(",_Classification_=" + _Classification_);
			sb.append(",_Sent_=" + _Sent_);
			sb.append(",_Opens_=" + _Opens_);
			sb.append(",_Clicks_=" + _Clicks_);
			sb.append(",_Conversions_=" + _Conversions_);
			sb.append(",_Delivered_=" + _Delivered_);
			sb.append(",_Distribution_=" + _Distribution_);
			sb.append(",_HardBounces_=" + _HardBounces_);
			sb.append(",_OtherUndeliverable_=" + _OtherUndeliverable_);
			sb.append(",_PossibleBlock_=" + _PossibleBlock_);
			sb.append(",_SoftBounces_=" + _SoftBounces_);
			sb.append(",_SpamComplaintRate_=" + _SpamComplaintRate_);
			sb.append(",_TotalClicks_=" + _TotalClicks_);
			sb.append(",_TotalOpens_=" + _TotalOpens_);
			sb.append(",_TotalOrders_=" + _TotalOrders_);
			sb.append(",_SpamComplaints_=" + _SpamComplaints_);
			sb.append(",_Undeliverable_=" + _Undeliverable_);
			sb.append(",_Clicks_Desktop_=" + _Clicks_Desktop_);
			sb.append(",_Clicks_Mobile_=" + _Clicks_Mobile_);
			sb.append(",_Clicks_Other_=" + _Clicks_Other_);
			sb.append(",_UniqueConversion_=" + _UniqueConversion_);
			sb.append(",_Opens_Desktop_=" + _Opens_Desktop_);
			sb.append(",_Opens_Mobile_=" + _Opens_Mobile_);
			sb.append(",_Opens_Other_=" + _Opens_Other_);
			sb.append(",_Unsubscribes_=" + _Unsubscribes_);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();
				row15Struct row15 = new row15Struct();
				row15Struct row16 = row15;
				row17Struct row17 = new row17Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row17" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						"/Users/leandro.mendes/Accenture/Raizen/tmp-crm/dia_2018/raizen-2018-"
								+ TalendDate.formatDate("dd-MM-yyyy",
										TalendDate.getCurrentDate()) + ".txt"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);
				if (filetFileOutputDelimited_4.exists()) {
					throw new RuntimeException(
							"The particular file \""
									+ filetFileOutputDelimited_4
											.getAbsoluteFile()
									+ "\" already exist. If you want to overwrite the file, please uncheck the"
									+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				String[] headColutFileOutputDelimited_4 = new String[43];
				class CSVBasicSet_tFileOutputDelimited_4 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep)
							throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_4[] = null;

						// support passing value (property: Field Separator) by
						// 'context.fs' or 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_4 = fieldSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_4[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator("|");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_4[] = null;

						// support passing value (property: Row Separator) by
						// 'context.rs' or 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_4 = rowSep
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_4[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape,
							String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException(
									"Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_4[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_4 = strTextEnclosure
									.toCharArray();
						} else {
							throw new IllegalArgumentException(
									"Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_4[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				CSVBasicSet_tFileOutputDelimited_4 csvSettings_tFileOutputDelimited_4 = new CSVBasicSet_tFileOutputDelimited_4();
				csvSettings_tFileOutputDelimited_4.setFieldSeparator("|");
				csvSettings_tFileOutputDelimited_4.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_4.setEscapeAndTextEnclosure(
						"\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				CsvWritertFileOutputDelimited_4 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(
								new java.io.OutputStreamWriter(
										new java.io.FileOutputStream(
												fileName_tFileOutputDelimited_4,
												false), "ISO-8859-15")));
				CsvWritertFileOutputDelimited_4
						.setSeparator(csvSettings_tFileOutputDelimited_4
								.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_4
						.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_4.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_4.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_4.setLineEnd(""
							+ csvSettings_tFileOutputDelimited_4.getRowDelim());
				}
				if (filetFileOutputDelimited_4.length() == 0) {
					headColutFileOutputDelimited_4[0] = "Date";
					headColutFileOutputDelimited_4[1] = "Campaign";
					headColutFileOutputDelimited_4[2] = "Date_Year";
					headColutFileOutputDelimited_4[3] = "Date_Month";
					headColutFileOutputDelimited_4[4] = "Date_Week";
					headColutFileOutputDelimited_4[5] = "ExtCampaignID";
					headColutFileOutputDelimited_4[6] = "FolderName";
					headColutFileOutputDelimited_4[7] = "LaunchDate";
					headColutFileOutputDelimited_4[8] = "LaunchID";
					headColutFileOutputDelimited_4[9] = "LaunchTime";
					headColutFileOutputDelimited_4[10] = "MarketingProgram";
					headColutFileOutputDelimited_4[11] = "MarketingStrategy";
					headColutFileOutputDelimited_4[12] = "ProgramName";
					headColutFileOutputDelimited_4[13] = "ProgramStage";
					headColutFileOutputDelimited_4[14] = "Segment";
					headColutFileOutputDelimited_4[15] = "Subject";
					headColutFileOutputDelimited_4[16] = "ReturnPath";
					headColutFileOutputDelimited_4[17] = "Classification";
					headColutFileOutputDelimited_4[18] = "Sent";
					headColutFileOutputDelimited_4[19] = "Opens";
					headColutFileOutputDelimited_4[20] = "Clicks";
					headColutFileOutputDelimited_4[21] = "Conversions";
					headColutFileOutputDelimited_4[22] = "Delivered";
					headColutFileOutputDelimited_4[23] = "Distribution";
					headColutFileOutputDelimited_4[24] = "HardBounces";
					headColutFileOutputDelimited_4[25] = "OtherUndeliverable";
					headColutFileOutputDelimited_4[26] = "PossibleBlock";
					headColutFileOutputDelimited_4[27] = "SoftBounces";
					headColutFileOutputDelimited_4[28] = "SpamComplaintRate";
					headColutFileOutputDelimited_4[29] = "TotalClicks";
					headColutFileOutputDelimited_4[30] = "TotalOpens";
					headColutFileOutputDelimited_4[31] = "TotalOrders";
					headColutFileOutputDelimited_4[32] = "SpamComplaints";
					headColutFileOutputDelimited_4[33] = "Undeliverable";
					headColutFileOutputDelimited_4[34] = "Clicks_Desktop";
					headColutFileOutputDelimited_4[35] = "Clicks_Mobile";
					headColutFileOutputDelimited_4[36] = "Clicks_Other";
					headColutFileOutputDelimited_4[37] = "UniqueConversion";
					headColutFileOutputDelimited_4[38] = "Opens_Desktop";
					headColutFileOutputDelimited_4[39] = "Opens_Mobile";
					headColutFileOutputDelimited_4[40] = "Opens_Other";
					headColutFileOutputDelimited_4[41] = "_Unsubscribes";
					headColutFileOutputDelimited_4[42] = "Bounces";
					CsvWritertFileOutputDelimited_4
							.writeNext(headColutFileOutputDelimited_4);
					CsvWritertFileOutputDelimited_4.flush();
				}
				CsvWritertFileOutputDelimited_4
						.setEscapeChar(csvSettings_tFileOutputDelimited_4
								.getEscapeChar());
				CsvWritertFileOutputDelimited_4
						.setQuoteChar(csvSettings_tFileOutputDelimited_4
								.getTextEnclosure());
				CsvWritertFileOutputDelimited_4
						.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_4",
						CsvWritertFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4",
						nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tJavaRow_6 begin ] start
				 */

				ok_Hash.put("tJavaRow_6", false);
				start_Hash.put("tJavaRow_6", System.currentTimeMillis());

				currentComponent = "tJavaRow_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row16" + iterateId, 0,
								0);

					}
				}

				int tos_count_tJavaRow_6 = 0;

				int nb_line_tJavaRow_6 = 0;

				/**
				 * [tJavaRow_6 begin ] stop
				 */

				/**
				 * [tLogRow_6 begin ] start
				 */

				ok_Hash.put("tLogRow_6", false);
				start_Hash.put("tLogRow_6", System.currentTimeMillis());

				currentComponent = "tLogRow_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row15" + iterateId, 0,
								0);

					}
				}

				int tos_count_tLogRow_6 = 0;

				// /////////////////////

				class Util_tLogRow_6 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[42];

					public void addRow(String[] row) {

						for (int i = 0; i < 42; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 41 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 41 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|%23$-");
							sbformat.append(colLengths[22]);
							sbformat.append("s");

							sbformat.append("|%24$-");
							sbformat.append(colLengths[23]);
							sbformat.append("s");

							sbformat.append("|%25$-");
							sbformat.append(colLengths[24]);
							sbformat.append("s");

							sbformat.append("|%26$-");
							sbformat.append(colLengths[25]);
							sbformat.append("s");

							sbformat.append("|%27$-");
							sbformat.append(colLengths[26]);
							sbformat.append("s");

							sbformat.append("|%28$-");
							sbformat.append(colLengths[27]);
							sbformat.append("s");

							sbformat.append("|%29$-");
							sbformat.append(colLengths[28]);
							sbformat.append("s");

							sbformat.append("|%30$-");
							sbformat.append(colLengths[29]);
							sbformat.append("s");

							sbformat.append("|%31$-");
							sbformat.append(colLengths[30]);
							sbformat.append("s");

							sbformat.append("|%32$-");
							sbformat.append(colLengths[31]);
							sbformat.append("s");

							sbformat.append("|%33$-");
							sbformat.append(colLengths[32]);
							sbformat.append("s");

							sbformat.append("|%34$-");
							sbformat.append(colLengths[33]);
							sbformat.append("s");

							sbformat.append("|%35$-");
							sbformat.append(colLengths[34]);
							sbformat.append("s");

							sbformat.append("|%36$-");
							sbformat.append(colLengths[35]);
							sbformat.append("s");

							sbformat.append("|%37$-");
							sbformat.append(colLengths[36]);
							sbformat.append("s");

							sbformat.append("|%38$-");
							sbformat.append(colLengths[37]);
							sbformat.append("s");

							sbformat.append("|%39$-");
							sbformat.append(colLengths[38]);
							sbformat.append("s");

							sbformat.append("|%40$-");
							sbformat.append(colLengths[39]);
							sbformat.append("s");

							sbformat.append("|%41$-");
							sbformat.append(colLengths[40]);
							sbformat.append("s");

							sbformat.append("|%42$-");
							sbformat.append(colLengths[41]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[21]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[22]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[23]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[24]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[25]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[26]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[27]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[28]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[29]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[30]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[31]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[32]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[33]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[34]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[35]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[36]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[37]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[38]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[39]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[40]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[41]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_6 util_tLogRow_6 = new Util_tLogRow_6();
				util_tLogRow_6.setTableName("tLogRow_6");
				util_tLogRow_6.addRow(new String[] { "_Date_", "_Campaign_",
						"_Date_Year_", "_Date_Month_", "_Date_Week_",
						"_ExtCampaignID_", "_FolderName_", "_LaunchDate_",
						"_LaunchID_", "_LaunchTime_", "_MarketingProgram_",
						"_MarketingStrategy_", "_ProgramName_",
						"_ProgramStage_", "_Segment_", "_Subject_",
						"_ReturnPath_", "_Classification_", "_Sent_",
						"_Opens_", "_Clicks_", "_Conversions_", "_Delivered_",
						"_Distribution_", "_HardBounces_",
						"_OtherUndeliverable_", "_PossibleBlock_",
						"_SoftBounces_", "_SpamComplaintRate_",
						"_TotalClicks_", "_TotalOpens_", "_TotalOrders_",
						"_SpamComplaints_", "_Undeliverable_",
						"_Clicks_Desktop_", "_Clicks_Mobile_",
						"_Clicks_Other_", "_UniqueConversion_",
						"_Opens_Desktop_", "_Opens_Mobile_", "_Opens_Other_",
						"_Unsubscribes_", });
				StringBuilder strBuffer_tLogRow_6 = null;
				int nb_line_tLogRow_6 = 0;
				// /////////////////////

				/**
				 * [tLogRow_6 begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());

				currentComponent = "tJavaRow_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row12" + iterateId, 0,
								0);

					}
				}

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = ((String) globalMap
							.get("tFileOutputDelimited_3_FILE_NAME"));
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap
										.get("tFileOutputDelimited_3_FILE_NAME")),
								"ISO-8859-15", ",", "\n", true, 1, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row12 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row12 = new row12Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row12._Date_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row12._Campaign_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row12._Date_Year_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row12._Date_Month_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row12._Date_Week_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 5;

							row12._ExtCampaignID_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 6;

							row12._FolderName_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 7;

							row12._LaunchDate_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 8;

							row12._LaunchID_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 9;

							row12._LaunchTime_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 10;

							row12._MarketingProgram_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 11;

							row12._MarketingStrategy_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 12;

							row12._ProgramName_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 13;

							row12._ProgramStage_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 14;

							row12._Segment_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 15;

							row12._Subject_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 16;

							row12._ReturnPath_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 17;

							row12._Classification_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 18;

							row12._Sent_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 19;

							row12._Opens_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 20;

							row12._Clicks_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 21;

							row12._Conversions_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 22;

							row12._Delivered_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 23;

							row12._Distribution_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 24;

							row12._HardBounces_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 25;

							row12._OtherUndeliverable_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 26;

							row12._PossibleBlock_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 27;

							row12._SoftBounces_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 28;

							row12._SpamComplaintRate_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 29;

							row12._TotalClicks_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 30;

							row12._TotalOpens_ = fid_tFileInputDelimited_2.get(
									columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 31;

							row12._TotalOrders_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 32;

							row12._SpamComplaints_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 33;

							row12._Undeliverable_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 34;

							row12._Clicks_Desktop_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 35;

							row12._Clicks_Mobile_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 36;

							row12._Clicks_Other_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 37;

							row12._UniqueConversion_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 38;

							row12._Opens_Desktop_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 39;

							row12._Opens_Mobile_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 40;

							row12._Opens_Other_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							columnIndexWithD_tFileInputDelimited_2 = 41;

							row12._Unsubscribes_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2)
									.trim();

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row12 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
						// Start of branch "row12"
						if (row12 != null) {

							/**
							 * [tJavaRow_5 main ] start
							 */

							currentComponent = "tJavaRow_5";

							// row12
							// row12

							if (execStat) {
								runStat.updateStatOnConnection("row12"
										+ iterateId, 1, 1);
							}

							// Code generated according to input schema and
							// output schema
							row15._Date_ = row12._Date_;
							row15._Campaign_ = row12._Campaign_;
							row15._Date_Year_ = row12._Date_Year_;
							row15._Date_Month_ = row12._Date_Month_;
							row15._Date_Week_ = row12._Date_Week_;
							row15._ExtCampaignID_ = row12._ExtCampaignID_;
							row15._FolderName_ = row12._FolderName_;
							row15._LaunchDate_ = row12._LaunchDate_;
							row15._LaunchID_ = row12._LaunchID_;
							row15._LaunchTime_ = row12._LaunchTime_;
							row15._MarketingProgram_ = row12._MarketingProgram_;
							row15._MarketingStrategy_ = row12._MarketingStrategy_;
							row15._ProgramName_ = row12._ProgramName_;
							row15._ProgramStage_ = row12._ProgramStage_;
							row15._Segment_ = row12._Segment_;
							row15._Subject_ = row12._Subject_;
							row15._ReturnPath_ = row12._ReturnPath_;
							row15._Classification_ = row12._Classification_;
							row15._Sent_ = row12._Sent_.replace(".", ",");
							row15._Opens_ = row12._Opens_.replace(".", ",");
							row15._Clicks_ = row12._Clicks_.replace(".", ",");
							row15._Conversions_ = row12._Conversions_.replace(
									".", ",");
							row15._Delivered_ = row12._Delivered_.replace(".",
									",");
							row15._Distribution_ = row12._Distribution_
									.replace(".", ",");
							row15._HardBounces_ = row12._HardBounces_.replace(
									".", ",");
							row15._OtherUndeliverable_ = row12._OtherUndeliverable_
									.replace(".", ",");
							row15._PossibleBlock_ = row12._PossibleBlock_
									.replace(".", ",");
							row15._SoftBounces_ = row12._SoftBounces_.replace(
									".", ",");
							row15._SpamComplaintRate_ = row12._SpamComplaintRate_
									.replace(".", ",");
							row15._TotalClicks_ = row12._TotalClicks_.replace(
									".", ",");
							row15._TotalOpens_ = row12._TotalOpens_.replace(
									".", ",");
							row15._TotalOrders_ = row12._TotalOrders_.replace(
									".", ",");
							row15._SpamComplaints_ = row12._SpamComplaints_
									.replace(".", ",");
							row15._Undeliverable_ = row12._Undeliverable_
									.replace(".", ",");
							row15._Clicks_Desktop_ = row12._Clicks_Desktop_
									.replace(".", ",");
							row15._Clicks_Mobile_ = row12._Clicks_Mobile_
									.replace(".", ",");
							row15._Clicks_Other_ = row12._Clicks_Other_
									.replace(".", ",");
							row15._UniqueConversion_ = row12._UniqueConversion_
									.replace(".", ",");
							row15._Opens_Desktop_ = row12._Opens_Desktop_
									.replace(".", ",");
							row15._Opens_Mobile_ = row12._Opens_Mobile_
									.replace(".", ",");
							row15._Opens_Other_ = row12._Opens_Other_.replace(
									".", ",");
							row15._Unsubscribes_ = row12._Unsubscribes_
									.replace(".", ",");

							nb_line_tJavaRow_5++;

							tos_count_tJavaRow_5++;

							/**
							 * [tJavaRow_5 main ] stop
							 */

							/**
							 * [tJavaRow_5 process_data_begin ] start
							 */

							currentComponent = "tJavaRow_5";

							/**
							 * [tJavaRow_5 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_6 main ] start
							 */

							currentComponent = "tLogRow_6";

							// row15
							// row15

							if (execStat) {
								runStat.updateStatOnConnection("row15"
										+ iterateId, 1, 1);
							}

							// /////////////////////

							String[] row_tLogRow_6 = new String[42];

							if (row15._Date_ != null) { //
								row_tLogRow_6[0] = String.valueOf(row15._Date_);

							} //

							if (row15._Campaign_ != null) { //
								row_tLogRow_6[1] = String
										.valueOf(row15._Campaign_);

							} //

							if (row15._Date_Year_ != null) { //
								row_tLogRow_6[2] = String
										.valueOf(row15._Date_Year_);

							} //

							if (row15._Date_Month_ != null) { //
								row_tLogRow_6[3] = String
										.valueOf(row15._Date_Month_);

							} //

							if (row15._Date_Week_ != null) { //
								row_tLogRow_6[4] = String
										.valueOf(row15._Date_Week_);

							} //

							if (row15._ExtCampaignID_ != null) { //
								row_tLogRow_6[5] = String
										.valueOf(row15._ExtCampaignID_);

							} //

							if (row15._FolderName_ != null) { //
								row_tLogRow_6[6] = String
										.valueOf(row15._FolderName_);

							} //

							if (row15._LaunchDate_ != null) { //
								row_tLogRow_6[7] = String
										.valueOf(row15._LaunchDate_);

							} //

							if (row15._LaunchID_ != null) { //
								row_tLogRow_6[8] = String
										.valueOf(row15._LaunchID_);

							} //

							if (row15._LaunchTime_ != null) { //
								row_tLogRow_6[9] = String
										.valueOf(row15._LaunchTime_);

							} //

							if (row15._MarketingProgram_ != null) { //
								row_tLogRow_6[10] = String
										.valueOf(row15._MarketingProgram_);

							} //

							if (row15._MarketingStrategy_ != null) { //
								row_tLogRow_6[11] = String
										.valueOf(row15._MarketingStrategy_);

							} //

							if (row15._ProgramName_ != null) { //
								row_tLogRow_6[12] = String
										.valueOf(row15._ProgramName_);

							} //

							if (row15._ProgramStage_ != null) { //
								row_tLogRow_6[13] = String
										.valueOf(row15._ProgramStage_);

							} //

							if (row15._Segment_ != null) { //
								row_tLogRow_6[14] = String
										.valueOf(row15._Segment_);

							} //

							if (row15._Subject_ != null) { //
								row_tLogRow_6[15] = String
										.valueOf(row15._Subject_);

							} //

							if (row15._ReturnPath_ != null) { //
								row_tLogRow_6[16] = String
										.valueOf(row15._ReturnPath_);

							} //

							if (row15._Classification_ != null) { //
								row_tLogRow_6[17] = String
										.valueOf(row15._Classification_);

							} //

							if (row15._Sent_ != null) { //
								row_tLogRow_6[18] = String
										.valueOf(row15._Sent_);

							} //

							if (row15._Opens_ != null) { //
								row_tLogRow_6[19] = String
										.valueOf(row15._Opens_);

							} //

							if (row15._Clicks_ != null) { //
								row_tLogRow_6[20] = String
										.valueOf(row15._Clicks_);

							} //

							if (row15._Conversions_ != null) { //
								row_tLogRow_6[21] = String
										.valueOf(row15._Conversions_);

							} //

							if (row15._Delivered_ != null) { //
								row_tLogRow_6[22] = String
										.valueOf(row15._Delivered_);

							} //

							if (row15._Distribution_ != null) { //
								row_tLogRow_6[23] = String
										.valueOf(row15._Distribution_);

							} //

							if (row15._HardBounces_ != null) { //
								row_tLogRow_6[24] = String
										.valueOf(row15._HardBounces_);

							} //

							if (row15._OtherUndeliverable_ != null) { //
								row_tLogRow_6[25] = String
										.valueOf(row15._OtherUndeliverable_);

							} //

							if (row15._PossibleBlock_ != null) { //
								row_tLogRow_6[26] = String
										.valueOf(row15._PossibleBlock_);

							} //

							if (row15._SoftBounces_ != null) { //
								row_tLogRow_6[27] = String
										.valueOf(row15._SoftBounces_);

							} //

							if (row15._SpamComplaintRate_ != null) { //
								row_tLogRow_6[28] = String
										.valueOf(row15._SpamComplaintRate_);

							} //

							if (row15._TotalClicks_ != null) { //
								row_tLogRow_6[29] = String
										.valueOf(row15._TotalClicks_);

							} //

							if (row15._TotalOpens_ != null) { //
								row_tLogRow_6[30] = String
										.valueOf(row15._TotalOpens_);

							} //

							if (row15._TotalOrders_ != null) { //
								row_tLogRow_6[31] = String
										.valueOf(row15._TotalOrders_);

							} //

							if (row15._SpamComplaints_ != null) { //
								row_tLogRow_6[32] = String
										.valueOf(row15._SpamComplaints_);

							} //

							if (row15._Undeliverable_ != null) { //
								row_tLogRow_6[33] = String
										.valueOf(row15._Undeliverable_);

							} //

							if (row15._Clicks_Desktop_ != null) { //
								row_tLogRow_6[34] = String
										.valueOf(row15._Clicks_Desktop_);

							} //

							if (row15._Clicks_Mobile_ != null) { //
								row_tLogRow_6[35] = String
										.valueOf(row15._Clicks_Mobile_);

							} //

							if (row15._Clicks_Other_ != null) { //
								row_tLogRow_6[36] = String
										.valueOf(row15._Clicks_Other_);

							} //

							if (row15._UniqueConversion_ != null) { //
								row_tLogRow_6[37] = String
										.valueOf(row15._UniqueConversion_);

							} //

							if (row15._Opens_Desktop_ != null) { //
								row_tLogRow_6[38] = String
										.valueOf(row15._Opens_Desktop_);

							} //

							if (row15._Opens_Mobile_ != null) { //
								row_tLogRow_6[39] = String
										.valueOf(row15._Opens_Mobile_);

							} //

							if (row15._Opens_Other_ != null) { //
								row_tLogRow_6[40] = String
										.valueOf(row15._Opens_Other_);

							} //

							if (row15._Unsubscribes_ != null) { //
								row_tLogRow_6[41] = String
										.valueOf(row15._Unsubscribes_);

							} //

							util_tLogRow_6.addRow(row_tLogRow_6);
							nb_line_tLogRow_6++;
							// ////

							// ////

							// /////////////////////

							row16 = row15;

							tos_count_tLogRow_6++;

							/**
							 * [tLogRow_6 main ] stop
							 */

							/**
							 * [tLogRow_6 process_data_begin ] start
							 */

							currentComponent = "tLogRow_6";

							/**
							 * [tLogRow_6 process_data_begin ] stop
							 */

							/**
							 * [tJavaRow_6 main ] start
							 */

							currentComponent = "tJavaRow_6";

							// row16
							// row16

							if (execStat) {
								runStat.updateStatOnConnection("row16"
										+ iterateId, 1, 1);
							}

							// Code generated according to input schema and
							// output schema
							row17.Date = row16._Date_;
							row17.Campaign = row16._Campaign_;
							row17.Date_Year = row16._Date_Year_;
							row17.Date_Month = row16._Date_Month_;
							row17.Date_Week = row16._Date_Week_;
							row17.ExtCampaignID = row16._ExtCampaignID_;
							row17.FolderName = row16._FolderName_;
							row17.LaunchDate = row16._LaunchDate_;
							row17.LaunchID = row16._LaunchID_;
							row17.LaunchTime = row16._LaunchTime_;
							row17.MarketingProgram = row16._MarketingProgram_;
							row17.MarketingStrategy = row16._MarketingStrategy_;
							row17.ProgramName = row16._ProgramName_;
							row17.ProgramStage = row16._ProgramStage_;
							row17.Segment = row16._Segment_;
							row17.Subject = row16._Subject_;
							row17.ReturnPath = row16._ReturnPath_;
							row17.Classification = row16._Classification_;
							row17.Sent = row16._Sent_;
							row17.Opens = row16._Opens_;
							row17.Clicks = row16._Clicks_;
							row17.Conversions = row16._Conversions_;
							row17.Delivered = row16._Delivered_;
							row17.Distribution = row16._Distribution_;
							row17.HardBounces = row16._HardBounces_;
							row17.OtherUndeliverable = row16._OtherUndeliverable_;
							row17.PossibleBlock = row16._PossibleBlock_;
							row17.SoftBounces = row16._SoftBounces_;
							row17.SpamComplaintRate = row16._SpamComplaintRate_;
							row17.TotalClicks = row16._TotalClicks_;
							row17.TotalOpens = row16._TotalOpens_;
							row17.TotalOrders = row16._TotalOrders_;
							row17.SpamComplaints = row16._SpamComplaints_;
							row17.Undeliverable = row16._Undeliverable_;
							row17.Clicks_Desktop = row16._Clicks_Desktop_;
							row17.Clicks_Mobile = row16._Clicks_Mobile_;
							row17.Clicks_Other = row16._Clicks_Other_;
							row17.UniqueConversion = row16._UniqueConversion_;
							row17.Opens_Desktop = row16._Opens_Desktop_;
							row17.Opens_Mobile = row16._Opens_Mobile_;
							row17.Opens_Other = row16._Opens_Other_;
							row17._Unsubscribes = row16._Unsubscribes_;
							row17.Bounces = "";

							nb_line_tJavaRow_6++;

							tos_count_tJavaRow_6++;

							/**
							 * [tJavaRow_6 main ] stop
							 */

							/**
							 * [tJavaRow_6 process_data_begin ] start
							 */

							currentComponent = "tJavaRow_6";

							/**
							 * [tJavaRow_6 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_4 main ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							// row17
							// row17

							if (execStat) {
								runStat.updateStatOnConnection("row17"
										+ iterateId, 1, 1);
							}

							String[] rowtFileOutputDelimited_4 = new String[43];
							rowtFileOutputDelimited_4[0] = row17.Date == null ? null
									: row17.Date;
							rowtFileOutputDelimited_4[1] = row17.Campaign == null ? null
									: row17.Campaign;
							rowtFileOutputDelimited_4[2] = row17.Date_Year == null ? null
									: row17.Date_Year;
							rowtFileOutputDelimited_4[3] = row17.Date_Month == null ? null
									: row17.Date_Month;
							rowtFileOutputDelimited_4[4] = row17.Date_Week == null ? null
									: row17.Date_Week;
							rowtFileOutputDelimited_4[5] = row17.ExtCampaignID == null ? null
									: row17.ExtCampaignID;
							rowtFileOutputDelimited_4[6] = row17.FolderName == null ? null
									: row17.FolderName;
							rowtFileOutputDelimited_4[7] = row17.LaunchDate == null ? null
									: row17.LaunchDate;
							rowtFileOutputDelimited_4[8] = row17.LaunchID == null ? null
									: row17.LaunchID;
							rowtFileOutputDelimited_4[9] = row17.LaunchTime == null ? null
									: row17.LaunchTime;
							rowtFileOutputDelimited_4[10] = row17.MarketingProgram == null ? null
									: row17.MarketingProgram;
							rowtFileOutputDelimited_4[11] = row17.MarketingStrategy == null ? null
									: row17.MarketingStrategy;
							rowtFileOutputDelimited_4[12] = row17.ProgramName == null ? null
									: row17.ProgramName;
							rowtFileOutputDelimited_4[13] = row17.ProgramStage == null ? null
									: row17.ProgramStage;
							rowtFileOutputDelimited_4[14] = row17.Segment == null ? null
									: row17.Segment;
							rowtFileOutputDelimited_4[15] = row17.Subject == null ? null
									: row17.Subject;
							rowtFileOutputDelimited_4[16] = row17.ReturnPath == null ? null
									: row17.ReturnPath;
							rowtFileOutputDelimited_4[17] = row17.Classification == null ? null
									: row17.Classification;
							rowtFileOutputDelimited_4[18] = row17.Sent == null ? null
									: row17.Sent;
							rowtFileOutputDelimited_4[19] = row17.Opens == null ? null
									: row17.Opens;
							rowtFileOutputDelimited_4[20] = row17.Clicks == null ? null
									: row17.Clicks;
							rowtFileOutputDelimited_4[21] = row17.Conversions == null ? null
									: row17.Conversions;
							rowtFileOutputDelimited_4[22] = row17.Delivered == null ? null
									: row17.Delivered;
							rowtFileOutputDelimited_4[23] = row17.Distribution == null ? null
									: row17.Distribution;
							rowtFileOutputDelimited_4[24] = row17.HardBounces == null ? null
									: row17.HardBounces;
							rowtFileOutputDelimited_4[25] = row17.OtherUndeliverable == null ? null
									: row17.OtherUndeliverable;
							rowtFileOutputDelimited_4[26] = row17.PossibleBlock == null ? null
									: row17.PossibleBlock;
							rowtFileOutputDelimited_4[27] = row17.SoftBounces == null ? null
									: row17.SoftBounces;
							rowtFileOutputDelimited_4[28] = row17.SpamComplaintRate == null ? null
									: row17.SpamComplaintRate;
							rowtFileOutputDelimited_4[29] = row17.TotalClicks == null ? null
									: row17.TotalClicks;
							rowtFileOutputDelimited_4[30] = row17.TotalOpens == null ? null
									: row17.TotalOpens;
							rowtFileOutputDelimited_4[31] = row17.TotalOrders == null ? null
									: row17.TotalOrders;
							rowtFileOutputDelimited_4[32] = row17.SpamComplaints == null ? null
									: row17.SpamComplaints;
							rowtFileOutputDelimited_4[33] = row17.Undeliverable == null ? null
									: row17.Undeliverable;
							rowtFileOutputDelimited_4[34] = row17.Clicks_Desktop == null ? null
									: row17.Clicks_Desktop;
							rowtFileOutputDelimited_4[35] = row17.Clicks_Mobile == null ? null
									: row17.Clicks_Mobile;
							rowtFileOutputDelimited_4[36] = row17.Clicks_Other == null ? null
									: row17.Clicks_Other;
							rowtFileOutputDelimited_4[37] = row17.UniqueConversion == null ? null
									: row17.UniqueConversion;
							rowtFileOutputDelimited_4[38] = row17.Opens_Desktop == null ? null
									: row17.Opens_Desktop;
							rowtFileOutputDelimited_4[39] = row17.Opens_Mobile == null ? null
									: row17.Opens_Mobile;
							rowtFileOutputDelimited_4[40] = row17.Opens_Other == null ? null
									: row17.Opens_Other;
							rowtFileOutputDelimited_4[41] = row17._Unsubscribes == null ? null
									: row17._Unsubscribes;
							rowtFileOutputDelimited_4[42] = row17.Bounces == null ? null
									: row17.Bounces;
							nb_line_tFileOutputDelimited_4++;
							resourceMap.put("nb_line_tFileOutputDelimited_4",
									nb_line_tFileOutputDelimited_4);
							CsvWritertFileOutputDelimited_4
									.writeNext(rowtFileOutputDelimited_4);

							tos_count_tFileOutputDelimited_4++;

							/**
							 * [tFileOutputDelimited_4 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_4 process_data_begin ]
							 * start
							 */

							currentComponent = "tFileOutputDelimited_4";

							/**
							 * [tFileOutputDelimited_4 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_4 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							/**
							 * [tFileOutputDelimited_4 process_data_end ] stop
							 */

							/**
							 * [tJavaRow_6 process_data_end ] start
							 */

							currentComponent = "tJavaRow_6";

							/**
							 * [tJavaRow_6 process_data_end ] stop
							 */

							/**
							 * [tLogRow_6 process_data_end ] start
							 */

							currentComponent = "tLogRow_6";

							/**
							 * [tLogRow_6 process_data_end ] stop
							 */

							/**
							 * [tJavaRow_5 process_data_end ] start
							 */

							currentComponent = "tJavaRow_5";

							/**
							 * [tJavaRow_5 process_data_end ] stop
							 */

						} // End of branch "row12"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tFileOutputDelimited_3_FILE_NAME"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

				/**
				 * [tLogRow_6 end ] start
				 */

				currentComponent = "tLogRow_6";

				// ////

				java.io.PrintStream consoleOut_tLogRow_6 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_6 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_6);
				}

				consoleOut_tLogRow_6
						.println(util_tLogRow_6.format().toString());
				consoleOut_tLogRow_6.flush();
				// ////
				globalMap.put("tLogRow_6_NB_LINE", nb_line_tLogRow_6);

				// /////////////////////

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row15" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tLogRow_6", true);
				end_Hash.put("tLogRow_6", System.currentTimeMillis());

				/**
				 * [tLogRow_6 end ] stop
				 */

				/**
				 * [tJavaRow_6 end ] start
				 */

				currentComponent = "tJavaRow_6";

				globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row16" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tJavaRow_6", true);
				end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				/**
				 * [tJavaRow_6 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (CsvWritertFileOutputDelimited_4 != null) {
					CsvWritertFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE",
						nb_line_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row17" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

				/**
				 * [tLogRow_6 finally ] start
				 */

				currentComponent = "tLogRow_6";

				/**
				 * [tLogRow_6 finally ] stop
				 */

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_4 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_4");

					if (CsvWritertFileOutputDelimited_4 != null) {
						CsvWritertFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Get_file_CRM Get_file_CRMClass = new Get_file_CRM();

		int exitCode = Get_file_CRMClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Get_file_CRM.class.getClassLoader()
					.getResourceAsStream(
							"local_project/get_file_crm_0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = Get_file_CRM.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileList_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileList_1) {
			globalMap.put("tFileList_1_SUBPROCESS_STATE", -1);

			e_tFileList_1.printStackTrace();

		}
		try {
			errorCode = null;
			tFileList_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileList_2) {
			globalMap.put("tFileList_2_SUBPROCESS_STATE", -1);

			e_tFileList_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Get_file_CRM");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 377639 characters generated by Talend Open Studio for Big Data on the August
 * 21, 2019 2:49:17 PM BRT
 ************************************************************************************************/
