package org.talend.designer.codegen.translators.bigdata.dbfs;

import org.talend.core.model.process.INode;
import org.talend.core.model.process.ElementParameterParser;
import org.talend.designer.codegen.config.CodeGeneratorArgument;

public class TDBFSGetMainJava
{
  protected static String nl;
  public static synchronized TDBFSGetMainJava create(String lineSeparator)
  {
    nl = lineSeparator;
    TDBFSGetMainJava result = new TDBFSGetMainJava();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "\t" + NL + "\tjava.util.Set<String> keySet_";
  protected final String TEXT_3 = " = map_";
  protected final String TEXT_4 = ".keySet();" + NL + "    for (String key_";
  protected final String TEXT_5 = " : keySet_";
  protected final String TEXT_6 = "){     " + NL + "\t\tString tempdir_";
  protected final String TEXT_7 = " =  ";
  protected final String TEXT_8 = ";" + NL + "\t\tString filemask_";
  protected final String TEXT_9 = " = key_";
  protected final String TEXT_10 = "; " + NL + "\t\tString dir_";
  protected final String TEXT_11 = " = null;\t" + NL + "\t\tString mask_";
  protected final String TEXT_12 = " = filemask_";
  protected final String TEXT_13 = ".replaceAll(\"\\\\\\\\\", \"/\") ;\t" + NL + "\t\tint i_";
  protected final String TEXT_14 = " = mask_";
  protected final String TEXT_15 = ".lastIndexOf('/');" + NL + "  \t\tif (i_";
  protected final String TEXT_16 = "!=-1){" + NL + "\t\t\tdir_";
  protected final String TEXT_17 = " = mask_";
  protected final String TEXT_18 = ".substring(0, i_";
  protected final String TEXT_19 = "); " + NL + "\t\t\tmask_";
  protected final String TEXT_20 = " = mask_";
  protected final String TEXT_21 = ".substring(i_";
  protected final String TEXT_22 = "+1);\t " + NL + "    \t}" + NL + "    \tif (dir_";
  protected final String TEXT_23 = " != null && !dir_";
  protected final String TEXT_24 = ".isEmpty()) tempdir_";
  protected final String TEXT_25 = " = tempdir_";
  protected final String TEXT_26 = " + \"/\" + dir_";
  protected final String TEXT_27 = ";  " + NL + "    \tmask_";
  protected final String TEXT_28 = " = mask_";
  protected final String TEXT_29 = ".replaceAll(\"\\\\.\", \"\\\\\\\\.\").replaceAll(\"\\\\*\", \".*\");" + NL + "    \tfinal String finalMask_";
  protected final String TEXT_30 = " = mask_";
  protected final String TEXT_31 = ";" + NL + "    \t" + NL + "    \tif(!dbfs_";
  protected final String TEXT_32 = ".exists(tempdir_";
  protected final String TEXT_33 = ")){" + NL + "\t\t\tSystem.err.println(\"No match file(\"+key_";
  protected final String TEXT_34 = "+\") exists!\");" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_35 = NL + "       \t\tlog.error(\"";
  protected final String TEXT_36 = " - No match file(\"+key_";
  protected final String TEXT_37 = "+\") exists.\");" + NL + "        \t";
  protected final String TEXT_38 = NL + "\t\t} else {" + NL + "\t\t\tString localFilePath_";
  protected final String TEXT_39 = " = \"\";" + NL + "\t\t" + NL + "\t\t\torg.talend.bigdata.launcher.fs.DatabricksFileSystem.FileInfo remoteDirStatus_";
  protected final String TEXT_40 = " = dbfs_";
  protected final String TEXT_41 = ".getStatus(tempdir_";
  protected final String TEXT_42 = ");" + NL + "\t\t\tif(remoteDirStatus_";
  protected final String TEXT_43 = " == null) throw new RuntimeException(\"File or folder does not exist on DBFS : \" + tempdir_";
  protected final String TEXT_44 = ");" + NL + "\t\t\tboolean success_";
  protected final String TEXT_45 = " = false;" + NL + "\t    \tif(remoteDirStatus_";
  protected final String TEXT_46 = ".is_dir){ // Is a directory so we'll list its files / folders" + NL + "\t\t\t\tfor(org.talend.bigdata.launcher.fs.DatabricksFileSystem.FileInfo fileInfo : dbfs_";
  protected final String TEXT_47 = ".list(remoteDirStatus_";
  protected final String TEXT_48 = ".path, ";
  protected final String TEXT_49 = ")) {" + NL + "\t\t\t\t\tif(fileInfo.is_dir) {" + NL + "\t\t\t\t\t\t// create directory" + NL + "\t\t\t\t\t} else if(java.util.regex.Pattern.compile(finalMask_";
  protected final String TEXT_50 = ").matcher(java.nio.file.Paths.get(fileInfo.path).getFileName().toString()).find()) {" + NL + "\t\t\t\t\t\t// copy file" + NL + "\t\t\t\t\t\tint baseRemotePathLength_";
  protected final String TEXT_51 = " = java.nio.file.Paths.get(";
  protected final String TEXT_52 = ").getNameCount();" + NL + "\t\t\t\t\t\tint remotePathLength_";
  protected final String TEXT_53 = " = java.nio.file.Paths.get(fileInfo.path).getNameCount();" + NL + "\t\t\t\t\t\tString remoteStrippedPath_";
  protected final String TEXT_54 = " = java.nio.file.Paths.get(fileInfo.path).subpath(baseRemotePathLength_";
  protected final String TEXT_55 = ", remotePathLength_";
  protected final String TEXT_56 = ").toString().replaceAll(\"\\\\\\\\\", \"/\");" + NL + "\t\t\t\t\t\tif(map_";
  protected final String TEXT_57 = ".get(key_";
  protected final String TEXT_58 = ") != null && !map_";
  protected final String TEXT_59 = ".get(key_";
  protected final String TEXT_60 = ").isEmpty()) {" + NL + "\t\t\t\t\t\t\tremoteStrippedPath_";
  protected final String TEXT_61 = " = remoteStrippedPath_";
  protected final String TEXT_62 = ".replaceAll(java.nio.file.Paths.get(fileInfo.path).getFileName().toString(), map_";
  protected final String TEXT_63 = ".get(key_";
  protected final String TEXT_64 = "));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tlocalFilePath_";
  protected final String TEXT_65 = " = java.nio.file.Paths.get(";
  protected final String TEXT_66 = ").resolve(remoteStrippedPath_";
  protected final String TEXT_67 = ").toString().replaceAll(\"\\\\\\\\\", \"/\");" + NL + "\t\t\t\t\t\tdbfs_";
  protected final String TEXT_68 = ".copyToLocal(fileInfo.path, localFilePath_";
  protected final String TEXT_69 = ", ";
  protected final String TEXT_70 = ");" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuccess_";
  protected final String TEXT_71 = " = true;" + NL + "\t    \t} else { // Is a file so we'll download it directly" + NL + "\t    \t\tdbfs_";
  protected final String TEXT_72 = ".copyToLocal(remoteDirStatus_";
  protected final String TEXT_73 = ".path, localFilePath_";
  protected final String TEXT_74 = ", ";
  protected final String TEXT_75 = ");" + NL + "\t    \t\tsuccess_";
  protected final String TEXT_76 = " = true;" + NL + "\t    \t}" + NL + "\t    \t" + NL + "\t    \tif(success_";
  protected final String TEXT_77 = ") {" + NL + "\t\t\t\t//msg_";
  protected final String TEXT_78 = ".add(\"file: \" + path_";
  protected final String TEXT_79 = ".toString() + \", size: \" + fileutil_";
  protected final String TEXT_80 = ".getSize() + \" bytes download successfully\");" + NL + "\t\t\t\t//nb_success_";
  protected final String TEXT_81 = "++;" + NL + "\t\t\t}" + NL + "\t\t" + NL + "\t\t" + NL + "\t\t" + NL + "\t\t" + NL + "\t\t" + NL + "\t\t" + NL + "\t\t" + NL + "\t\t" + NL + "\t\t" + NL + "\t\t" + NL + "\t\t\t/*" + NL + "\t    \tfor(org.apache.hadoop.fs.Path path_";
  protected final String TEXT_82 = " : filePathList_";
  protected final String TEXT_83 = "){" + NL + "\t\t\t\tif(path_";
  protected final String TEXT_84 = ".getName().matches(finalMask_";
  protected final String TEXT_85 = ")){" + NL + "\t\t\t\t\t" + NL + "\t\t\t\t\ttry{" + NL + "\t\t\t\t\t\tFileUtil_";
  protected final String TEXT_86 = " fileutil_";
  protected final String TEXT_87 = " = new FileUtil_";
  protected final String TEXT_88 = "();" + NL + "\t\t\t\t\t\t fileutil_";
  protected final String TEXT_89 = ".copyToLocal(fs_";
  protected final String TEXT_90 = ", path_";
  protected final String TEXT_91 = ", new java.io.File(localFilePath_";
  protected final String TEXT_92 = ")," + NL + "    \t\t\t\t\t\t";
  protected final String TEXT_93 = ", false, ";
  protected final String TEXT_94 = ");" + NL + "\t\t\t\t\t}catch(java.io.IOException e){" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_95 = NL + "            \t\t\tthrow(e);" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_96 = NL + "\t\t\t\t\t\tSystem.err.print(e.getMessage());" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_97 = NL + "\t\t\t\t\t\tlog.error(\"";
  protected final String TEXT_98 = " - \" +e.getMessage());" + NL + "\t\t\t\t\t\t\t\t";
  protected final String TEXT_99 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tnb_file_";
  protected final String TEXT_100 = "++;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\t*/" + NL + "\t\t}" + NL + "\t}";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    stringBuffer.append(TEXT_1);
    
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	
	String localdir = ElementParameterParser.getValue(node, "__LOCALDIR__");
	boolean dieOnError = ElementParameterParser.getBooleanValue(node, "__DIE_ON_ERROR__");
	boolean overwrite = ElementParameterParser.getBooleanValue(node, "__OVERWRITE__");
	String remotedir = ElementParameterParser.getValue(node, "__DATABRICKS_DBFS_FOLDER__");
	boolean includeSubDir = ElementParameterParser.getBooleanValue(node, "__INCLUDSUBDIR__");
	
	boolean isLog4jEnabled = ElementParameterParser.getBooleanValue(node.getProcess(), "__LOG4J_ACTIVATE__");

    stringBuffer.append(TEXT_2);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_3);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_4);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_5);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_6);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_7);
    stringBuffer.append(remotedir);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_9);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_10);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_11);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_12);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_13);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_14);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_15);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_16);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_17);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_18);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_19);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_20);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_21);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_22);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_23);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_24);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_25);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_26);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_27);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_28);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_29);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_30);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_31);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_32);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_33);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_34);
    if(isLog4jEnabled) {
    stringBuffer.append(TEXT_35);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_37);
    }
    stringBuffer.append(TEXT_38);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_39);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_40);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_41);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_42);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_43);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_44);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_45);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_46);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_47);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_48);
    stringBuffer.append(includeSubDir);
    stringBuffer.append(TEXT_49);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_50);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_51);
    stringBuffer.append(remotedir);
    stringBuffer.append(TEXT_52);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_53);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_54);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_55);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_56);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_57);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_58);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_59);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_60);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_61);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_62);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_63);
    stringBuffer.append(cid );
    stringBuffer.append(TEXT_64);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_65);
    stringBuffer.append(localdir);
    stringBuffer.append(TEXT_66);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_67);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_69);
    stringBuffer.append(overwrite);
    stringBuffer.append(TEXT_70);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_71);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_72);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_73);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_74);
    stringBuffer.append(overwrite);
    stringBuffer.append(TEXT_75);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_76);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_77);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_78);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_79);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_80);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_81);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_82);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_83);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_84);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_85);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_86);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_87);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_88);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_89);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_90);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_91);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_92);
    stringBuffer.append(overwrite);
    stringBuffer.append(TEXT_93);
    stringBuffer.append(includeSubDir);
    stringBuffer.append(TEXT_94);
    
  							if(dieOnError){
						
    stringBuffer.append(TEXT_95);
    
							}else{
						
    stringBuffer.append(TEXT_96);
    	
								if(isLog4jEnabled) {
								
    stringBuffer.append(TEXT_97);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_98);
    	
								}
							} 
						
    stringBuffer.append(TEXT_99);
    stringBuffer.append(cid);
    stringBuffer.append(TEXT_100);
    return stringBuffer.toString();
  }
}
