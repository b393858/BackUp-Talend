// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package fiap.oracle_hr_to_file__0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.Relational;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

//the import part of tJavaRow_6
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: oracle_hr_to_file_ Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class oracle_hr_to_file_ implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "oracle_hr_to_file_";
	private final String projectName = "FIAP";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					oracle_hr_to_file_.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(oracle_hr_to_file_.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_FIAP_oracle_hr_to_file_ = new byte[0];
		static byte[] commonByteArray_FIAP_oracle_hr_to_file_ = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String COUNTRY_ID;

		public String getCOUNTRY_ID() {
			return this.COUNTRY_ID;
		}

		public String COUNTRY_NAME;

		public String getCOUNTRY_NAME() {
			return this.COUNTRY_NAME;
		}

		public BigDecimal REGION_ID;

		public BigDecimal getREGION_ID() {
			return this.REGION_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.COUNTRY_ID == null) ? 0 : this.COUNTRY_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.COUNTRY_ID == null) {
				if (other.COUNTRY_ID != null)
					return false;

			} else if (!this.COUNTRY_ID.equals(other.COUNTRY_ID))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.COUNTRY_ID = this.COUNTRY_ID;
			other.COUNTRY_NAME = this.COUNTRY_NAME;
			other.REGION_ID = this.REGION_ID;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.COUNTRY_ID = this.COUNTRY_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_oracle_hr_to_file_.length) {
					if (length < 1024
							&& commonByteArray_FIAP_oracle_hr_to_file_.length == 0) {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[1024];
					} else {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_oracle_hr_to_file_, 0,
						length);
				strReturn = new String(commonByteArray_FIAP_oracle_hr_to_file_,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_oracle_hr_to_file_) {

				try {

					int length = 0;

					this.COUNTRY_ID = readString(dis);

					this.COUNTRY_NAME = readString(dis);

					this.REGION_ID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.COUNTRY_ID, dos);

				// String

				writeString(this.COUNTRY_NAME, dos);

				// BigDecimal

				dos.writeObject(this.REGION_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("COUNTRY_ID=" + COUNTRY_ID);
			sb.append(",COUNTRY_NAME=" + COUNTRY_NAME);
			sb.append(",REGION_ID=" + String.valueOf(REGION_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.COUNTRY_ID,
					other.COUNTRY_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_FIAP_oracle_hr_to_file_ = new byte[0];
		static byte[] commonByteArray_FIAP_oracle_hr_to_file_ = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String COUNTRY_ID;

		public String getCOUNTRY_ID() {
			return this.COUNTRY_ID;
		}

		public String COUNTRY_NAME;

		public String getCOUNTRY_NAME() {
			return this.COUNTRY_NAME;
		}

		public BigDecimal REGION_ID;

		public BigDecimal getREGION_ID() {
			return this.REGION_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.COUNTRY_ID == null) ? 0 : this.COUNTRY_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.COUNTRY_ID == null) {
				if (other.COUNTRY_ID != null)
					return false;

			} else if (!this.COUNTRY_ID.equals(other.COUNTRY_ID))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.COUNTRY_ID = this.COUNTRY_ID;
			other.COUNTRY_NAME = this.COUNTRY_NAME;
			other.REGION_ID = this.REGION_ID;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.COUNTRY_ID = this.COUNTRY_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_oracle_hr_to_file_.length) {
					if (length < 1024
							&& commonByteArray_FIAP_oracle_hr_to_file_.length == 0) {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[1024];
					} else {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_oracle_hr_to_file_, 0,
						length);
				strReturn = new String(commonByteArray_FIAP_oracle_hr_to_file_,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_oracle_hr_to_file_) {

				try {

					int length = 0;

					this.COUNTRY_ID = readString(dis);

					this.COUNTRY_NAME = readString(dis);

					this.REGION_ID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.COUNTRY_ID, dos);

				// String

				writeString(this.COUNTRY_NAME, dos);

				// BigDecimal

				dos.writeObject(this.REGION_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("COUNTRY_ID=" + COUNTRY_ID);
			sb.append(",COUNTRY_NAME=" + COUNTRY_NAME);
			sb.append(",REGION_ID=" + String.valueOf(REGION_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.COUNTRY_ID,
					other.COUNTRY_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"/Applications/Talend/workspace/countries_bkp_"
								+ TalendDate.getDate("CCYYMMDD") + ".csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					throw new RuntimeException(
							"The particular file \""
									+ filetFileOutputDelimited_1
											.getAbsoluteFile()
									+ "\" already exist. If you want to overwrite the file, please uncheck the"
									+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				"|"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				String zipName_tFileOutputDelimited_1 = fullName_tFileOutputDelimited_1
						+ ".zip";
				java.io.File file_tFileOutputDelimited_1 = new java.io.File(
						zipName_tFileOutputDelimited_1);
				// routines.system.Row
				java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_1 = null;
				java.io.Writer outtFileOutputDelimited_1 = null;

				if (file_tFileOutputDelimited_1.exists()) {
					file_tFileOutputDelimited_1.delete();
				}
				zipOut_tFileOutputDelimited_1 = new java.util.zip.ZipOutputStream(
						new java.io.BufferedOutputStream(
								new java.io.FileOutputStream(
										zipName_tFileOutputDelimited_1)));
				zipOut_tFileOutputDelimited_1
						.putNextEntry(new java.util.zip.ZipEntry(
								filetFileOutputDelimited_1.getName()));
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								zipOut_tFileOutputDelimited_1, "ISO-8859-15"));
				synchronized (multiThreadLockWrite) {
					if (file_tFileOutputDelimited_1.length() == 0) {
						outtFileOutputDelimited_1.write("COUNTRY_ID");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("COUNTRY_NAME");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.write("REGION_ID");
						outtFileOutputDelimited_1
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
						outtFileOutputDelimited_1.flush();
					}
				}

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				boolean isTimeZoneNull_tDBInput_1 = false;
				boolean isConnectionWrapped_tDBInput_1 = !(conn_tDBInput_1 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_1
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_1 = null;
				if (isConnectionWrapped_tDBInput_1) {
					unwrappedOraConn_tDBInput_1 = conn_tDBInput_1
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_1 != null) {
						isTimeZoneNull_tDBInput_1 = (unwrappedOraConn_tDBInput_1
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_1 = (((oracle.jdbc.OracleConnection) conn_tDBInput_1)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_1) {
					java.sql.Statement stmtGetTZ_tDBInput_1 = conn_tDBInput_1
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_1 = stmtGetTZ_tDBInput_1
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_1 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_1.next()) {
						sessionTimezone_tDBInput_1 = rsGetTZ_tDBInput_1
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_1
							&& unwrappedOraConn_tDBInput_1 != null) {
						unwrappedOraConn_tDBInput_1
								.setSessionTimeZone(sessionTimezone_tDBInput_1);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_1)
								.setSessionTimeZone(sessionTimezone_tDBInput_1);
					}
				}

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1
						.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  HR.COUNTRIES.COUNTRY_ID, \n  HR.COUNTRIES.COUNTRY_NAME, \n  HR.COUNTRIES.REGION_ID\nFROM HR.COUNTRIES";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1
							.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1
							.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1
							.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.COUNTRY_ID = null;
						} else {

							row1.COUNTRY_ID = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.COUNTRY_NAME = null;
						} else {

							row1.COUNTRY_NAME = routines.system.JDBCUtil
									.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.REGION_ID = null;
						} else {

							if (rs_tDBInput_1.getObject(3) != null) {
								row1.REGION_ID = rs_tDBInput_1.getBigDecimal(3);
							} else {

								row1.REGION_ID = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_1 main ] start
						 */

						currentComponent = "tJavaRow_1";

						// row1
						// row1

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						row8.COUNTRY_ID = row1.COUNTRY_ID;
						row8.COUNTRY_NAME = row1.COUNTRY_NAME;
						row8.REGION_ID = row1.REGION_ID;

						nb_line_tJavaRow_1++;

						tos_count_tJavaRow_1++;

						/**
						 * [tJavaRow_1 main ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 main ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						// row8
						// row8

						if (execStat) {
							runStat.updateStatOnConnection("row8" + iterateId,
									1, 1);
						}

						StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
						if (row8.COUNTRY_ID != null) {
							sb_tFileOutputDelimited_1.append(row8.COUNTRY_ID);
						}
						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row8.COUNTRY_NAME != null) {
							sb_tFileOutputDelimited_1.append(row8.COUNTRY_NAME);
						}
						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_tFileOutputDelimited_1);
						if (row8.REGION_ID != null) {
							sb_tFileOutputDelimited_1.append(row8.REGION_ID
									.toPlainString());
						}
						sb_tFileOutputDelimited_1
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

						synchronized (multiThreadLockWrite) {
							nb_line_tFileOutputDelimited_1++;
							resourceMap.put("nb_line_tFileOutputDelimited_1",
									nb_line_tFileOutputDelimited_1);

							outtFileOutputDelimited_1
									.write(sb_tFileOutputDelimited_1.toString());

						}

						tos_count_tFileOutputDelimited_1++;

						/**
						 * [tFileOutputDelimited_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_1";

						/**
						 * [tFileOutputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_1 process_data_end ] start
						 */

						currentComponent = "tJavaRow_1";

						/**
						 * [tJavaRow_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				synchronized (multiThreadLockWrite) {

					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					globalMap.put("tFileOutputDelimited_1_NB_LINE",
							nb_line_tFileOutputDelimited_1);
					globalMap.put("tFileOutputDelimited_1_FILE_NAME",
							fileName_tFileOutputDelimited_1);

				}

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row8" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					synchronized (multiThreadLockWrite) {

						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
								.get("out_tFileOutputDelimited_1");
						if (outtFileOutputDelimited_1 != null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}

					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_FIAP_oracle_hr_to_file_ = new byte[0];
		static byte[] commonByteArray_FIAP_oracle_hr_to_file_ = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal DEPARTMENT_ID;

		public BigDecimal getDEPARTMENT_ID() {
			return this.DEPARTMENT_ID;
		}

		public String DEPARTMENT_NAME;

		public String getDEPARTMENT_NAME() {
			return this.DEPARTMENT_NAME;
		}

		public BigDecimal MANAGER_ID;

		public BigDecimal getMANAGER_ID() {
			return this.MANAGER_ID;
		}

		public BigDecimal LOCATION_ID;

		public BigDecimal getLOCATION_ID() {
			return this.LOCATION_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.DEPARTMENT_ID == null) ? 0
								: this.DEPARTMENT_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.DEPARTMENT_ID == null) {
				if (other.DEPARTMENT_ID != null)
					return false;

			} else if (!this.DEPARTMENT_ID.equals(other.DEPARTMENT_ID))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.DEPARTMENT_ID = this.DEPARTMENT_ID;
			other.DEPARTMENT_NAME = this.DEPARTMENT_NAME;
			other.MANAGER_ID = this.MANAGER_ID;
			other.LOCATION_ID = this.LOCATION_ID;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.DEPARTMENT_ID = this.DEPARTMENT_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_oracle_hr_to_file_.length) {
					if (length < 1024
							&& commonByteArray_FIAP_oracle_hr_to_file_.length == 0) {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[1024];
					} else {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_oracle_hr_to_file_, 0,
						length);
				strReturn = new String(commonByteArray_FIAP_oracle_hr_to_file_,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_oracle_hr_to_file_) {

				try {

					int length = 0;

					this.DEPARTMENT_ID = (BigDecimal) dis.readObject();

					this.DEPARTMENT_NAME = readString(dis);

					this.MANAGER_ID = (BigDecimal) dis.readObject();

					this.LOCATION_ID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.DEPARTMENT_ID);

				// String

				writeString(this.DEPARTMENT_NAME, dos);

				// BigDecimal

				dos.writeObject(this.MANAGER_ID);

				// BigDecimal

				dos.writeObject(this.LOCATION_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DEPARTMENT_ID=" + String.valueOf(DEPARTMENT_ID));
			sb.append(",DEPARTMENT_NAME=" + DEPARTMENT_NAME);
			sb.append(",MANAGER_ID=" + String.valueOf(MANAGER_ID));
			sb.append(",LOCATION_ID=" + String.valueOf(LOCATION_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DEPARTMENT_ID,
					other.DEPARTMENT_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_FIAP_oracle_hr_to_file_ = new byte[0];
		static byte[] commonByteArray_FIAP_oracle_hr_to_file_ = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal DEPARTMENT_ID;

		public BigDecimal getDEPARTMENT_ID() {
			return this.DEPARTMENT_ID;
		}

		public String DEPARTMENT_NAME;

		public String getDEPARTMENT_NAME() {
			return this.DEPARTMENT_NAME;
		}

		public BigDecimal MANAGER_ID;

		public BigDecimal getMANAGER_ID() {
			return this.MANAGER_ID;
		}

		public BigDecimal LOCATION_ID;

		public BigDecimal getLOCATION_ID() {
			return this.LOCATION_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.DEPARTMENT_ID == null) ? 0
								: this.DEPARTMENT_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.DEPARTMENT_ID == null) {
				if (other.DEPARTMENT_ID != null)
					return false;

			} else if (!this.DEPARTMENT_ID.equals(other.DEPARTMENT_ID))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.DEPARTMENT_ID = this.DEPARTMENT_ID;
			other.DEPARTMENT_NAME = this.DEPARTMENT_NAME;
			other.MANAGER_ID = this.MANAGER_ID;
			other.LOCATION_ID = this.LOCATION_ID;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.DEPARTMENT_ID = this.DEPARTMENT_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_oracle_hr_to_file_.length) {
					if (length < 1024
							&& commonByteArray_FIAP_oracle_hr_to_file_.length == 0) {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[1024];
					} else {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_oracle_hr_to_file_, 0,
						length);
				strReturn = new String(commonByteArray_FIAP_oracle_hr_to_file_,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_oracle_hr_to_file_) {

				try {

					int length = 0;

					this.DEPARTMENT_ID = (BigDecimal) dis.readObject();

					this.DEPARTMENT_NAME = readString(dis);

					this.MANAGER_ID = (BigDecimal) dis.readObject();

					this.LOCATION_ID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.DEPARTMENT_ID);

				// String

				writeString(this.DEPARTMENT_NAME, dos);

				// BigDecimal

				dos.writeObject(this.MANAGER_ID);

				// BigDecimal

				dos.writeObject(this.LOCATION_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DEPARTMENT_ID=" + String.valueOf(DEPARTMENT_ID));
			sb.append(",DEPARTMENT_NAME=" + DEPARTMENT_NAME);
			sb.append(",MANAGER_ID=" + String.valueOf(MANAGER_ID));
			sb.append(",LOCATION_ID=" + String.valueOf(LOCATION_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.DEPARTMENT_ID,
					other.DEPARTMENT_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row9Struct row9 = new row9Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"/Applications/Talend/workspace/departments_bkp_"
								+ TalendDate.getDate("CCYYMMDD") + ".csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					throw new RuntimeException(
							"The particular file \""
									+ filetFileOutputDelimited_2
											.getAbsoluteFile()
									+ "\" already exist. If you want to overwrite the file, please uncheck the"
									+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				"|"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				String zipName_tFileOutputDelimited_2 = fullName_tFileOutputDelimited_2
						+ ".zip";
				java.io.File file_tFileOutputDelimited_2 = new java.io.File(
						zipName_tFileOutputDelimited_2);
				// routines.system.Row
				java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_2 = null;
				java.io.Writer outtFileOutputDelimited_2 = null;

				if (file_tFileOutputDelimited_2.exists()) {
					file_tFileOutputDelimited_2.delete();
				}
				zipOut_tFileOutputDelimited_2 = new java.util.zip.ZipOutputStream(
						new java.io.BufferedOutputStream(
								new java.io.FileOutputStream(
										zipName_tFileOutputDelimited_2)));
				zipOut_tFileOutputDelimited_2
						.putNextEntry(new java.util.zip.ZipEntry(
								filetFileOutputDelimited_2.getName()));
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								zipOut_tFileOutputDelimited_2, "ISO-8859-15"));
				synchronized (multiThreadLockWrite) {
					if (file_tFileOutputDelimited_2.length() == 0) {
						outtFileOutputDelimited_2.write("DEPARTMENT_ID");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("DEPARTMENT_NAME");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("MANAGER_ID");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.write("LOCATION_ID");
						outtFileOutputDelimited_2
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
						outtFileOutputDelimited_2.flush();
					}
				}

				resourceMap.put("out_tFileOutputDelimited_2",
						outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				boolean isTimeZoneNull_tDBInput_2 = false;
				boolean isConnectionWrapped_tDBInput_2 = !(conn_tDBInput_2 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_2
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_2 = null;
				if (isConnectionWrapped_tDBInput_2) {
					unwrappedOraConn_tDBInput_2 = conn_tDBInput_2
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_2 != null) {
						isTimeZoneNull_tDBInput_2 = (unwrappedOraConn_tDBInput_2
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_2 = (((oracle.jdbc.OracleConnection) conn_tDBInput_2)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_2) {
					java.sql.Statement stmtGetTZ_tDBInput_2 = conn_tDBInput_2
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_2 = stmtGetTZ_tDBInput_2
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_2 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_2.next()) {
						sessionTimezone_tDBInput_2 = rsGetTZ_tDBInput_2
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_2
							&& unwrappedOraConn_tDBInput_2 != null) {
						unwrappedOraConn_tDBInput_2
								.setSessionTimeZone(sessionTimezone_tDBInput_2);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_2)
								.setSessionTimeZone(sessionTimezone_tDBInput_2);
					}
				}

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2
						.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  HR.DEPARTMENTS.DEPARTMENT_ID, \n  HR.DEPARTMENTS.DEPARTMENT_NAME, \n  HR.DEPARTMENTS.MANAGER_ID, \n  HR.DEPARTME"
						+ "NTS.LOCATION_ID\nFROM HR.DEPARTMENTS";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2
							.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2
							.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2
							.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.DEPARTMENT_ID = null;
						} else {

							if (rs_tDBInput_2.getObject(1) != null) {
								row2.DEPARTMENT_ID = rs_tDBInput_2
										.getBigDecimal(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.DEPARTMENT_NAME = null;
						} else {

							row2.DEPARTMENT_NAME = routines.system.JDBCUtil
									.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.MANAGER_ID = null;
						} else {

							if (rs_tDBInput_2.getObject(3) != null) {
								row2.MANAGER_ID = rs_tDBInput_2
										.getBigDecimal(3);
							} else {

								row2.MANAGER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.LOCATION_ID = null;
						} else {

							if (rs_tDBInput_2.getObject(4) != null) {
								row2.LOCATION_ID = rs_tDBInput_2
										.getBigDecimal(4);
							} else {

								row2.LOCATION_ID = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_2 main ] start
						 */

						currentComponent = "tJavaRow_2";

						// row2
						// row2

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						row9.DEPARTMENT_ID = row2.DEPARTMENT_ID;
						row9.DEPARTMENT_NAME = row2.DEPARTMENT_NAME;
						row9.MANAGER_ID = row2.MANAGER_ID;
						row9.LOCATION_ID = row2.LOCATION_ID;

						nb_line_tJavaRow_2++;

						tos_count_tJavaRow_2++;

						/**
						 * [tJavaRow_2 main ] stop
						 */

						/**
						 * [tJavaRow_2 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_2";

						/**
						 * [tJavaRow_2 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 main ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						// row9
						// row9

						if (execStat) {
							runStat.updateStatOnConnection("row9" + iterateId,
									1, 1);
						}

						StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
						if (row9.DEPARTMENT_ID != null) {
							sb_tFileOutputDelimited_2
									.append(row9.DEPARTMENT_ID.setScale(0,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());
						}
						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row9.DEPARTMENT_NAME != null) {
							sb_tFileOutputDelimited_2
									.append(row9.DEPARTMENT_NAME);
						}
						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row9.MANAGER_ID != null) {
							sb_tFileOutputDelimited_2
									.append(row9.MANAGER_ID.setScale(0,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());
						}
						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_tFileOutputDelimited_2);
						if (row9.LOCATION_ID != null) {
							sb_tFileOutputDelimited_2
									.append(row9.LOCATION_ID.setScale(0,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());
						}
						sb_tFileOutputDelimited_2
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

						synchronized (multiThreadLockWrite) {
							nb_line_tFileOutputDelimited_2++;
							resourceMap.put("nb_line_tFileOutputDelimited_2",
									nb_line_tFileOutputDelimited_2);

							outtFileOutputDelimited_2
									.write(sb_tFileOutputDelimited_2.toString());

						}

						tos_count_tFileOutputDelimited_2++;

						/**
						 * [tFileOutputDelimited_2 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						/**
						 * [tFileOutputDelimited_2 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_2";

						/**
						 * [tFileOutputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_2 process_data_end ] start
						 */

						currentComponent = "tJavaRow_2";

						/**
						 * [tJavaRow_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				synchronized (multiThreadLockWrite) {

					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

					globalMap.put("tFileOutputDelimited_2_NB_LINE",
							nb_line_tFileOutputDelimited_2);
					globalMap.put("tFileOutputDelimited_2_FILE_NAME",
							fileName_tFileOutputDelimited_2);

				}

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row9" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					synchronized (multiThreadLockWrite) {

						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
								.get("out_tFileOutputDelimited_2");
						if (outtFileOutputDelimited_2 != null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}

					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_FIAP_oracle_hr_to_file_ = new byte[0];
		static byte[] commonByteArray_FIAP_oracle_hr_to_file_ = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal EMPLOYEE_ID;

		public BigDecimal getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public String FIRST_NAME;

		public String getFIRST_NAME() {
			return this.FIRST_NAME;
		}

		public String LAST_NAME;

		public String getLAST_NAME() {
			return this.LAST_NAME;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String PHONE_NUMBER;

		public String getPHONE_NUMBER() {
			return this.PHONE_NUMBER;
		}

		public java.util.Date HIRE_DATE;

		public java.util.Date getHIRE_DATE() {
			return this.HIRE_DATE;
		}

		public String JOB_ID;

		public String getJOB_ID() {
			return this.JOB_ID;
		}

		public BigDecimal SALARY;

		public BigDecimal getSALARY() {
			return this.SALARY;
		}

		public BigDecimal COMMISSION_PCT;

		public BigDecimal getCOMMISSION_PCT() {
			return this.COMMISSION_PCT;
		}

		public BigDecimal MANAGER_ID;

		public BigDecimal getMANAGER_ID() {
			return this.MANAGER_ID;
		}

		public BigDecimal DEPARTMENT_ID;

		public BigDecimal getDEPARTMENT_ID() {
			return this.DEPARTMENT_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.EMPLOYEE_ID == null) {
				if (other.EMPLOYEE_ID != null)
					return false;

			} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.FIRST_NAME = this.FIRST_NAME;
			other.LAST_NAME = this.LAST_NAME;
			other.EMAIL = this.EMAIL;
			other.PHONE_NUMBER = this.PHONE_NUMBER;
			other.HIRE_DATE = this.HIRE_DATE;
			other.JOB_ID = this.JOB_ID;
			other.SALARY = this.SALARY;
			other.COMMISSION_PCT = this.COMMISSION_PCT;
			other.MANAGER_ID = this.MANAGER_ID;
			other.DEPARTMENT_ID = this.DEPARTMENT_ID;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_oracle_hr_to_file_.length) {
					if (length < 1024
							&& commonByteArray_FIAP_oracle_hr_to_file_.length == 0) {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[1024];
					} else {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_oracle_hr_to_file_, 0,
						length);
				strReturn = new String(commonByteArray_FIAP_oracle_hr_to_file_,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_oracle_hr_to_file_) {

				try {

					int length = 0;

					this.EMPLOYEE_ID = (BigDecimal) dis.readObject();

					this.FIRST_NAME = readString(dis);

					this.LAST_NAME = readString(dis);

					this.EMAIL = readString(dis);

					this.PHONE_NUMBER = readString(dis);

					this.HIRE_DATE = readDate(dis);

					this.JOB_ID = readString(dis);

					this.SALARY = (BigDecimal) dis.readObject();

					this.COMMISSION_PCT = (BigDecimal) dis.readObject();

					this.MANAGER_ID = (BigDecimal) dis.readObject();

					this.DEPARTMENT_ID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.EMPLOYEE_ID);

				// String

				writeString(this.FIRST_NAME, dos);

				// String

				writeString(this.LAST_NAME, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.PHONE_NUMBER, dos);

				// java.util.Date

				writeDate(this.HIRE_DATE, dos);

				// String

				writeString(this.JOB_ID, dos);

				// BigDecimal

				dos.writeObject(this.SALARY);

				// BigDecimal

				dos.writeObject(this.COMMISSION_PCT);

				// BigDecimal

				dos.writeObject(this.MANAGER_ID);

				// BigDecimal

				dos.writeObject(this.DEPARTMENT_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEE_ID=" + String.valueOf(EMPLOYEE_ID));
			sb.append(",FIRST_NAME=" + FIRST_NAME);
			sb.append(",LAST_NAME=" + LAST_NAME);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",PHONE_NUMBER=" + PHONE_NUMBER);
			sb.append(",HIRE_DATE=" + String.valueOf(HIRE_DATE));
			sb.append(",JOB_ID=" + JOB_ID);
			sb.append(",SALARY=" + String.valueOf(SALARY));
			sb.append(",COMMISSION_PCT=" + String.valueOf(COMMISSION_PCT));
			sb.append(",MANAGER_ID=" + String.valueOf(MANAGER_ID));
			sb.append(",DEPARTMENT_ID=" + String.valueOf(DEPARTMENT_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EMPLOYEE_ID,
					other.EMPLOYEE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_FIAP_oracle_hr_to_file_ = new byte[0];
		static byte[] commonByteArray_FIAP_oracle_hr_to_file_ = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal EMPLOYEE_ID;

		public BigDecimal getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public String FIRST_NAME;

		public String getFIRST_NAME() {
			return this.FIRST_NAME;
		}

		public String LAST_NAME;

		public String getLAST_NAME() {
			return this.LAST_NAME;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String PHONE_NUMBER;

		public String getPHONE_NUMBER() {
			return this.PHONE_NUMBER;
		}

		public java.util.Date HIRE_DATE;

		public java.util.Date getHIRE_DATE() {
			return this.HIRE_DATE;
		}

		public String JOB_ID;

		public String getJOB_ID() {
			return this.JOB_ID;
		}

		public BigDecimal SALARY;

		public BigDecimal getSALARY() {
			return this.SALARY;
		}

		public BigDecimal COMMISSION_PCT;

		public BigDecimal getCOMMISSION_PCT() {
			return this.COMMISSION_PCT;
		}

		public BigDecimal MANAGER_ID;

		public BigDecimal getMANAGER_ID() {
			return this.MANAGER_ID;
		}

		public BigDecimal DEPARTMENT_ID;

		public BigDecimal getDEPARTMENT_ID() {
			return this.DEPARTMENT_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.EMPLOYEE_ID == null) {
				if (other.EMPLOYEE_ID != null)
					return false;

			} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.FIRST_NAME = this.FIRST_NAME;
			other.LAST_NAME = this.LAST_NAME;
			other.EMAIL = this.EMAIL;
			other.PHONE_NUMBER = this.PHONE_NUMBER;
			other.HIRE_DATE = this.HIRE_DATE;
			other.JOB_ID = this.JOB_ID;
			other.SALARY = this.SALARY;
			other.COMMISSION_PCT = this.COMMISSION_PCT;
			other.MANAGER_ID = this.MANAGER_ID;
			other.DEPARTMENT_ID = this.DEPARTMENT_ID;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_oracle_hr_to_file_.length) {
					if (length < 1024
							&& commonByteArray_FIAP_oracle_hr_to_file_.length == 0) {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[1024];
					} else {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_oracle_hr_to_file_, 0,
						length);
				strReturn = new String(commonByteArray_FIAP_oracle_hr_to_file_,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_oracle_hr_to_file_) {

				try {

					int length = 0;

					this.EMPLOYEE_ID = (BigDecimal) dis.readObject();

					this.FIRST_NAME = readString(dis);

					this.LAST_NAME = readString(dis);

					this.EMAIL = readString(dis);

					this.PHONE_NUMBER = readString(dis);

					this.HIRE_DATE = readDate(dis);

					this.JOB_ID = readString(dis);

					this.SALARY = (BigDecimal) dis.readObject();

					this.COMMISSION_PCT = (BigDecimal) dis.readObject();

					this.MANAGER_ID = (BigDecimal) dis.readObject();

					this.DEPARTMENT_ID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.EMPLOYEE_ID);

				// String

				writeString(this.FIRST_NAME, dos);

				// String

				writeString(this.LAST_NAME, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.PHONE_NUMBER, dos);

				// java.util.Date

				writeDate(this.HIRE_DATE, dos);

				// String

				writeString(this.JOB_ID, dos);

				// BigDecimal

				dos.writeObject(this.SALARY);

				// BigDecimal

				dos.writeObject(this.COMMISSION_PCT);

				// BigDecimal

				dos.writeObject(this.MANAGER_ID);

				// BigDecimal

				dos.writeObject(this.DEPARTMENT_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEE_ID=" + String.valueOf(EMPLOYEE_ID));
			sb.append(",FIRST_NAME=" + FIRST_NAME);
			sb.append(",LAST_NAME=" + LAST_NAME);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",PHONE_NUMBER=" + PHONE_NUMBER);
			sb.append(",HIRE_DATE=" + String.valueOf(HIRE_DATE));
			sb.append(",JOB_ID=" + JOB_ID);
			sb.append(",SALARY=" + String.valueOf(SALARY));
			sb.append(",COMMISSION_PCT=" + String.valueOf(COMMISSION_PCT));
			sb.append(",MANAGER_ID=" + String.valueOf(MANAGER_ID));
			sb.append(",DEPARTMENT_ID=" + String.valueOf(DEPARTMENT_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EMPLOYEE_ID,
					other.EMPLOYEE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row10Struct row10 = new row10Struct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row10" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"/Applications/Talend/workspace/job_history_bkp_"
								+ TalendDate.getDate("CCYYMMDD") + ".csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);
				if (filetFileOutputDelimited_3.exists()) {
					throw new RuntimeException(
							"The particular file \""
									+ filetFileOutputDelimited_3
											.getAbsoluteFile()
									+ "\" already exist. If you want to overwrite the file, please uncheck the"
									+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_3, false),
								"ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_3",
						outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_3 = 0;

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				boolean isTimeZoneNull_tDBInput_3 = false;
				boolean isConnectionWrapped_tDBInput_3 = !(conn_tDBInput_3 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_3
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_3 = null;
				if (isConnectionWrapped_tDBInput_3) {
					unwrappedOraConn_tDBInput_3 = conn_tDBInput_3
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_3 != null) {
						isTimeZoneNull_tDBInput_3 = (unwrappedOraConn_tDBInput_3
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_3 = (((oracle.jdbc.OracleConnection) conn_tDBInput_3)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_3) {
					java.sql.Statement stmtGetTZ_tDBInput_3 = conn_tDBInput_3
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_3 = stmtGetTZ_tDBInput_3
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_3 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_3.next()) {
						sessionTimezone_tDBInput_3 = rsGetTZ_tDBInput_3
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_3
							&& unwrappedOraConn_tDBInput_3 != null) {
						unwrappedOraConn_tDBInput_3
								.setSessionTimeZone(sessionTimezone_tDBInput_3);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_3)
								.setSessionTimeZone(sessionTimezone_tDBInput_3);
					}
				}

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3
						.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  HR.EMPLOYEES.EMPLOYEE_ID, \n  HR.EMPLOYEES.FIRST_NAME, \n  HR.EMPLOYEES.LAST_NAME, \n  HR.EMPLOYEES.EMAIL, \n  HR"
						+ ".EMPLOYEES.PHONE_NUMBER, \n  HR.EMPLOYEES.HIRE_DATE, \n  HR.EMPLOYEES.JOB_ID, \n  HR.EMPLOYEES.SALARY, \n  HR.EMPLOYEES.COMM"
						+ "ISSION_PCT, \n  HR.EMPLOYEES.MANAGER_ID, \n  HR.EMPLOYEES.DEPARTMENT_ID\nFROM HR.EMPLOYEES";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3
							.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3
							.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3
							.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.EMPLOYEE_ID = null;
						} else {

							if (rs_tDBInput_3.getObject(1) != null) {
								row3.EMPLOYEE_ID = rs_tDBInput_3
										.getBigDecimal(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.FIRST_NAME = null;
						} else {

							row3.FIRST_NAME = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.LAST_NAME = null;
						} else {

							row3.LAST_NAME = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 3, false);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.EMAIL = null;
						} else {

							row3.EMAIL = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 4, false);
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row3.PHONE_NUMBER = null;
						} else {

							row3.PHONE_NUMBER = routines.system.JDBCUtil
									.getString(rs_tDBInput_3, 5, false);
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row3.HIRE_DATE = null;
						} else {

							row3.HIRE_DATE = routines.system.JDBCUtil.getDate(
									rs_tDBInput_3, 6);
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row3.JOB_ID = null;
						} else {

							row3.JOB_ID = routines.system.JDBCUtil.getString(
									rs_tDBInput_3, 7, false);
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row3.SALARY = null;
						} else {

							if (rs_tDBInput_3.getObject(8) != null) {
								row3.SALARY = rs_tDBInput_3.getBigDecimal(8);
							} else {

								row3.SALARY = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row3.COMMISSION_PCT = null;
						} else {

							if (rs_tDBInput_3.getObject(9) != null) {
								row3.COMMISSION_PCT = rs_tDBInput_3
										.getBigDecimal(9);
							} else {

								row3.COMMISSION_PCT = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row3.MANAGER_ID = null;
						} else {

							if (rs_tDBInput_3.getObject(10) != null) {
								row3.MANAGER_ID = rs_tDBInput_3
										.getBigDecimal(10);
							} else {

								row3.MANAGER_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							row3.DEPARTMENT_ID = null;
						} else {

							if (rs_tDBInput_3.getObject(11) != null) {
								row3.DEPARTMENT_ID = rs_tDBInput_3
										.getBigDecimal(11);
							} else {

								row3.DEPARTMENT_ID = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_3 main ] start
						 */

						currentComponent = "tJavaRow_3";

						// row3
						// row3

						if (execStat) {
							runStat.updateStatOnConnection("row3" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						row10.EMPLOYEE_ID = row3.EMPLOYEE_ID;
						row10.FIRST_NAME = row3.FIRST_NAME;
						row10.LAST_NAME = row3.LAST_NAME;
						row10.EMAIL = row3.EMAIL;
						row10.PHONE_NUMBER = row3.PHONE_NUMBER;
						row10.HIRE_DATE = row3.HIRE_DATE;
						row10.JOB_ID = row3.JOB_ID;
						row10.SALARY = row3.SALARY;
						row10.COMMISSION_PCT = row3.COMMISSION_PCT;
						row10.MANAGER_ID = row3.MANAGER_ID;
						row10.DEPARTMENT_ID = row3.DEPARTMENT_ID;

						nb_line_tJavaRow_3++;

						tos_count_tJavaRow_3++;

						/**
						 * [tJavaRow_3 main ] stop
						 */

						/**
						 * [tJavaRow_3 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_3";

						/**
						 * [tJavaRow_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 main ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						// row10
						// row10

						if (execStat) {
							runStat.updateStatOnConnection("row10" + iterateId,
									1, 1);
						}

						StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
						if (row10.EMPLOYEE_ID != null) {
							sb_tFileOutputDelimited_3
									.append(row10.EMPLOYEE_ID.setScale(0,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row10.FIRST_NAME != null) {
							sb_tFileOutputDelimited_3.append(row10.FIRST_NAME);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row10.LAST_NAME != null) {
							sb_tFileOutputDelimited_3.append(row10.LAST_NAME);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row10.EMAIL != null) {
							sb_tFileOutputDelimited_3.append(row10.EMAIL);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row10.PHONE_NUMBER != null) {
							sb_tFileOutputDelimited_3
									.append(row10.PHONE_NUMBER);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row10.HIRE_DATE != null) {
							sb_tFileOutputDelimited_3
									.append(FormatterUtils.format_Date(
											row10.HIRE_DATE, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row10.JOB_ID != null) {
							sb_tFileOutputDelimited_3.append(row10.JOB_ID);
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row10.SALARY != null) {
							sb_tFileOutputDelimited_3
									.append(row10.SALARY.setScale(2,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row10.COMMISSION_PCT != null) {
							sb_tFileOutputDelimited_3
									.append(row10.COMMISSION_PCT.setScale(2,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row10.MANAGER_ID != null) {
							sb_tFileOutputDelimited_3
									.append(row10.MANAGER_ID.setScale(0,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_tFileOutputDelimited_3);
						if (row10.DEPARTMENT_ID != null) {
							sb_tFileOutputDelimited_3
									.append(row10.DEPARTMENT_ID.setScale(0,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());
						}
						sb_tFileOutputDelimited_3
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

						synchronized (multiThreadLockWrite) {
							nb_line_tFileOutputDelimited_3++;
							resourceMap.put("nb_line_tFileOutputDelimited_3",
									nb_line_tFileOutputDelimited_3);

							outtFileOutputDelimited_3
									.write(sb_tFileOutputDelimited_3.toString());

						}

						tos_count_tFileOutputDelimited_3++;

						/**
						 * [tFileOutputDelimited_3 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_3";

						/**
						 * [tFileOutputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_3 process_data_end ] start
						 */

						currentComponent = "tJavaRow_3";

						/**
						 * [tJavaRow_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				synchronized (multiThreadLockWrite) {

					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

					globalMap.put("tFileOutputDelimited_3_NB_LINE",
							nb_line_tFileOutputDelimited_3);
					globalMap.put("tFileOutputDelimited_3_FILE_NAME",
							fileName_tFileOutputDelimited_3);

				}

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row10" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					synchronized (multiThreadLockWrite) {

						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
								.get("out_tFileOutputDelimited_3");
						if (outtFileOutputDelimited_3 != null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}

					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_FIAP_oracle_hr_to_file_ = new byte[0];
		static byte[] commonByteArray_FIAP_oracle_hr_to_file_ = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal EMPLOYEE_ID;

		public BigDecimal getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String JOB_ID;

		public String getJOB_ID() {
			return this.JOB_ID;
		}

		public BigDecimal DEPARTMENT_ID;

		public BigDecimal getDEPARTMENT_ID() {
			return this.DEPARTMENT_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID
								.hashCode());

				result = prime
						* result
						+ ((this.START_DATE == null) ? 0 : this.START_DATE
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.EMPLOYEE_ID == null) {
				if (other.EMPLOYEE_ID != null)
					return false;

			} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))

				return false;

			if (this.START_DATE == null) {
				if (other.START_DATE != null)
					return false;

			} else if (!this.START_DATE.equals(other.START_DATE))

				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.START_DATE = this.START_DATE;
			other.END_DATE = this.END_DATE;
			other.JOB_ID = this.JOB_ID;
			other.DEPARTMENT_ID = this.DEPARTMENT_ID;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.START_DATE = this.START_DATE;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_oracle_hr_to_file_.length) {
					if (length < 1024
							&& commonByteArray_FIAP_oracle_hr_to_file_.length == 0) {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[1024];
					} else {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_oracle_hr_to_file_, 0,
						length);
				strReturn = new String(commonByteArray_FIAP_oracle_hr_to_file_,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_oracle_hr_to_file_) {

				try {

					int length = 0;

					this.EMPLOYEE_ID = (BigDecimal) dis.readObject();

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.JOB_ID = readString(dis);

					this.DEPARTMENT_ID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.EMPLOYEE_ID);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.JOB_ID, dos);

				// BigDecimal

				dos.writeObject(this.DEPARTMENT_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEE_ID=" + String.valueOf(EMPLOYEE_ID));
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",JOB_ID=" + JOB_ID);
			sb.append(",DEPARTMENT_ID=" + String.valueOf(DEPARTMENT_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EMPLOYEE_ID,
					other.EMPLOYEE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.START_DATE,
					other.START_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_FIAP_oracle_hr_to_file_ = new byte[0];
		static byte[] commonByteArray_FIAP_oracle_hr_to_file_ = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal EMPLOYEE_ID;

		public BigDecimal getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String JOB_ID;

		public String getJOB_ID() {
			return this.JOB_ID;
		}

		public BigDecimal DEPARTMENT_ID;

		public BigDecimal getDEPARTMENT_ID() {
			return this.DEPARTMENT_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.EMPLOYEE_ID == null) ? 0 : this.EMPLOYEE_ID
								.hashCode());

				result = prime
						* result
						+ ((this.START_DATE == null) ? 0 : this.START_DATE
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.EMPLOYEE_ID == null) {
				if (other.EMPLOYEE_ID != null)
					return false;

			} else if (!this.EMPLOYEE_ID.equals(other.EMPLOYEE_ID))

				return false;

			if (this.START_DATE == null) {
				if (other.START_DATE != null)
					return false;

			} else if (!this.START_DATE.equals(other.START_DATE))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.START_DATE = this.START_DATE;
			other.END_DATE = this.END_DATE;
			other.JOB_ID = this.JOB_ID;
			other.DEPARTMENT_ID = this.DEPARTMENT_ID;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.EMPLOYEE_ID = this.EMPLOYEE_ID;
			other.START_DATE = this.START_DATE;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_oracle_hr_to_file_.length) {
					if (length < 1024
							&& commonByteArray_FIAP_oracle_hr_to_file_.length == 0) {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[1024];
					} else {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_oracle_hr_to_file_, 0,
						length);
				strReturn = new String(commonByteArray_FIAP_oracle_hr_to_file_,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_oracle_hr_to_file_) {

				try {

					int length = 0;

					this.EMPLOYEE_ID = (BigDecimal) dis.readObject();

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					this.JOB_ID = readString(dis);

					this.DEPARTMENT_ID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.EMPLOYEE_ID);

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// String

				writeString(this.JOB_ID, dos);

				// BigDecimal

				dos.writeObject(this.DEPARTMENT_ID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEE_ID=" + String.valueOf(EMPLOYEE_ID));
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",JOB_ID=" + JOB_ID);
			sb.append(",DEPARTMENT_ID=" + String.valueOf(DEPARTMENT_ID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EMPLOYEE_ID,
					other.EMPLOYEE_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.START_DATE,
					other.START_DATE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				row11Struct row11 = new row11Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row11" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						"/Applications/Talend/workspace/jobs_history_"
								+ TalendDate.getDate("CCYYMMDD") + ".csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);
				if (filetFileOutputDelimited_4.exists()) {
					throw new RuntimeException(
							"The particular file \""
									+ filetFileOutputDelimited_4
											.getAbsoluteFile()
									+ "\" already exist. If you want to overwrite the file, please uncheck the"
									+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /**
				 * Start field
				 * tFileOutputDelimited_4:FIELDSEPARATOR
				 */
				"|"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
				 * Start
				 * field tFileOutputDelimited_4:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				String zipName_tFileOutputDelimited_4 = fullName_tFileOutputDelimited_4
						+ ".zip";
				java.io.File file_tFileOutputDelimited_4 = new java.io.File(
						zipName_tFileOutputDelimited_4);
				// routines.system.Row
				java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_4 = null;
				java.io.Writer outtFileOutputDelimited_4 = null;

				if (file_tFileOutputDelimited_4.exists()) {
					file_tFileOutputDelimited_4.delete();
				}
				zipOut_tFileOutputDelimited_4 = new java.util.zip.ZipOutputStream(
						new java.io.BufferedOutputStream(
								new java.io.FileOutputStream(
										zipName_tFileOutputDelimited_4)));
				zipOut_tFileOutputDelimited_4
						.putNextEntry(new java.util.zip.ZipEntry(
								filetFileOutputDelimited_4.getName()));
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								zipOut_tFileOutputDelimited_4, "ISO-8859-15"));
				synchronized (multiThreadLockWrite) {
					if (file_tFileOutputDelimited_4.length() == 0) {
						outtFileOutputDelimited_4.write("EMPLOYEE_ID");
						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);
						outtFileOutputDelimited_4.write("START_DATE");
						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);
						outtFileOutputDelimited_4.write("END_DATE");
						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);
						outtFileOutputDelimited_4.write("JOB_ID");
						outtFileOutputDelimited_4
								.write(OUT_DELIM_tFileOutputDelimited_4);
						outtFileOutputDelimited_4.write("DEPARTMENT_ID");
						outtFileOutputDelimited_4
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
						outtFileOutputDelimited_4.flush();
					}
				}

				resourceMap.put("out_tFileOutputDelimited_4",
						outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4",
						nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tJavaRow_4 begin ] start
				 */

				ok_Hash.put("tJavaRow_4", false);
				start_Hash.put("tJavaRow_4", System.currentTimeMillis());

				currentComponent = "tJavaRow_4";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_4 = 0;

				int nb_line_tJavaRow_4 = 0;

				/**
				 * [tJavaRow_4 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				boolean isTimeZoneNull_tDBInput_4 = false;
				boolean isConnectionWrapped_tDBInput_4 = !(conn_tDBInput_4 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_4
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_4 = null;
				if (isConnectionWrapped_tDBInput_4) {
					unwrappedOraConn_tDBInput_4 = conn_tDBInput_4
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_4 != null) {
						isTimeZoneNull_tDBInput_4 = (unwrappedOraConn_tDBInput_4
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_4 = (((oracle.jdbc.OracleConnection) conn_tDBInput_4)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_4) {
					java.sql.Statement stmtGetTZ_tDBInput_4 = conn_tDBInput_4
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_4 = stmtGetTZ_tDBInput_4
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_4 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_4.next()) {
						sessionTimezone_tDBInput_4 = rsGetTZ_tDBInput_4
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_4
							&& unwrappedOraConn_tDBInput_4 != null) {
						unwrappedOraConn_tDBInput_4
								.setSessionTimeZone(sessionTimezone_tDBInput_4);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_4)
								.setSessionTimeZone(sessionTimezone_tDBInput_4);
					}
				}

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4
						.createStatement();

				String dbquery_tDBInput_4 = "SELECT \n  HR.JOB_HISTORY.EMPLOYEE_ID, \n  HR.JOB_HISTORY.START_DATE, \n  HR.JOB_HISTORY.END_DATE, \n  HR.JOB_HISTORY.JOB_I"
						+ "D, \n  HR.JOB_HISTORY.DEPARTMENT_ID\nFROM HR.JOB_HISTORY";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4
							.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4
							.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4
							.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.EMPLOYEE_ID = null;
						} else {

							if (rs_tDBInput_4.getObject(1) != null) {
								row4.EMPLOYEE_ID = rs_tDBInput_4
										.getBigDecimal(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.START_DATE = null;
						} else {

							row4.START_DATE = routines.system.JDBCUtil.getDate(
									rs_tDBInput_4, 2);
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row4.END_DATE = null;
						} else {

							row4.END_DATE = routines.system.JDBCUtil.getDate(
									rs_tDBInput_4, 3);
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row4.JOB_ID = null;
						} else {

							row4.JOB_ID = routines.system.JDBCUtil.getString(
									rs_tDBInput_4, 4, false);
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row4.DEPARTMENT_ID = null;
						} else {

							if (rs_tDBInput_4.getObject(5) != null) {
								row4.DEPARTMENT_ID = rs_tDBInput_4
										.getBigDecimal(5);
							} else {

								row4.DEPARTMENT_ID = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_4 main ] start
						 */

						currentComponent = "tJavaRow_4";

						// row4
						// row4

						if (execStat) {
							runStat.updateStatOnConnection("row4" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						row11.EMPLOYEE_ID = row4.EMPLOYEE_ID;
						row11.START_DATE = row4.START_DATE;
						row11.END_DATE = row4.END_DATE;
						row11.JOB_ID = row4.JOB_ID;
						row11.DEPARTMENT_ID = row4.DEPARTMENT_ID;

						nb_line_tJavaRow_4++;

						tos_count_tJavaRow_4++;

						/**
						 * [tJavaRow_4 main ] stop
						 */

						/**
						 * [tJavaRow_4 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_4";

						/**
						 * [tJavaRow_4 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_4 main ] start
						 */

						currentComponent = "tFileOutputDelimited_4";

						// row11
						// row11

						if (execStat) {
							runStat.updateStatOnConnection("row11" + iterateId,
									1, 1);
						}

						StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
						if (row11.EMPLOYEE_ID != null) {
							sb_tFileOutputDelimited_4
									.append(row11.EMPLOYEE_ID.setScale(0,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());
						}
						sb_tFileOutputDelimited_4
								.append(OUT_DELIM_tFileOutputDelimited_4);
						if (row11.START_DATE != null) {
							sb_tFileOutputDelimited_4
									.append(FormatterUtils.format_Date(
											row11.START_DATE, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_4
								.append(OUT_DELIM_tFileOutputDelimited_4);
						if (row11.END_DATE != null) {
							sb_tFileOutputDelimited_4.append(FormatterUtils
									.format_Date(row11.END_DATE, "dd-MM-yyyy"));
						}
						sb_tFileOutputDelimited_4
								.append(OUT_DELIM_tFileOutputDelimited_4);
						if (row11.JOB_ID != null) {
							sb_tFileOutputDelimited_4.append(row11.JOB_ID);
						}
						sb_tFileOutputDelimited_4
								.append(OUT_DELIM_tFileOutputDelimited_4);
						if (row11.DEPARTMENT_ID != null) {
							sb_tFileOutputDelimited_4
									.append(row11.DEPARTMENT_ID.setScale(0,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());
						}
						sb_tFileOutputDelimited_4
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

						synchronized (multiThreadLockWrite) {
							nb_line_tFileOutputDelimited_4++;
							resourceMap.put("nb_line_tFileOutputDelimited_4",
									nb_line_tFileOutputDelimited_4);

							outtFileOutputDelimited_4
									.write(sb_tFileOutputDelimited_4.toString());

						}

						tos_count_tFileOutputDelimited_4++;

						/**
						 * [tFileOutputDelimited_4 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_4";

						/**
						 * [tFileOutputDelimited_4 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_4";

						/**
						 * [tFileOutputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_4 process_data_end ] start
						 */

						currentComponent = "tJavaRow_4";

						/**
						 * [tJavaRow_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
				}

				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tJavaRow_4 end ] start
				 */

				currentComponent = "tJavaRow_4";

				globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row4" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_4", true);
				end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				/**
				 * [tJavaRow_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				synchronized (multiThreadLockWrite) {

					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

					globalMap.put("tFileOutputDelimited_4_NB_LINE",
							nb_line_tFileOutputDelimited_4);
					globalMap.put("tFileOutputDelimited_4_FILE_NAME",
							fileName_tFileOutputDelimited_4);

				}

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row11" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tJavaRow_4 finally ] start
				 */

				currentComponent = "tJavaRow_4";

				/**
				 * [tJavaRow_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					synchronized (multiThreadLockWrite) {

						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
								.get("out_tFileOutputDelimited_4");
						if (outtFileOutputDelimited_4 != null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}

					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_FIAP_oracle_hr_to_file_ = new byte[0];
		static byte[] commonByteArray_FIAP_oracle_hr_to_file_ = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String JOB_ID;

		public String getJOB_ID() {
			return this.JOB_ID;
		}

		public String JOB_TITLE;

		public String getJOB_TITLE() {
			return this.JOB_TITLE;
		}

		public BigDecimal MIN_SALARY;

		public BigDecimal getMIN_SALARY() {
			return this.MIN_SALARY;
		}

		public BigDecimal MAX_SALARY;

		public BigDecimal getMAX_SALARY() {
			return this.MAX_SALARY;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.JOB_ID == null) ? 0 : this.JOB_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.JOB_ID == null) {
				if (other.JOB_ID != null)
					return false;

			} else if (!this.JOB_ID.equals(other.JOB_ID))

				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.JOB_ID = this.JOB_ID;
			other.JOB_TITLE = this.JOB_TITLE;
			other.MIN_SALARY = this.MIN_SALARY;
			other.MAX_SALARY = this.MAX_SALARY;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.JOB_ID = this.JOB_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_oracle_hr_to_file_.length) {
					if (length < 1024
							&& commonByteArray_FIAP_oracle_hr_to_file_.length == 0) {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[1024];
					} else {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_oracle_hr_to_file_, 0,
						length);
				strReturn = new String(commonByteArray_FIAP_oracle_hr_to_file_,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_oracle_hr_to_file_) {

				try {

					int length = 0;

					this.JOB_ID = readString(dis);

					this.JOB_TITLE = readString(dis);

					this.MIN_SALARY = (BigDecimal) dis.readObject();

					this.MAX_SALARY = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.JOB_ID, dos);

				// String

				writeString(this.JOB_TITLE, dos);

				// BigDecimal

				dos.writeObject(this.MIN_SALARY);

				// BigDecimal

				dos.writeObject(this.MAX_SALARY);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("JOB_ID=" + JOB_ID);
			sb.append(",JOB_TITLE=" + JOB_TITLE);
			sb.append(",MIN_SALARY=" + String.valueOf(MIN_SALARY));
			sb.append(",MAX_SALARY=" + String.valueOf(MAX_SALARY));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.JOB_ID, other.JOB_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_FIAP_oracle_hr_to_file_ = new byte[0];
		static byte[] commonByteArray_FIAP_oracle_hr_to_file_ = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String JOB_ID;

		public String getJOB_ID() {
			return this.JOB_ID;
		}

		public String JOB_TITLE;

		public String getJOB_TITLE() {
			return this.JOB_TITLE;
		}

		public BigDecimal MIN_SALARY;

		public BigDecimal getMIN_SALARY() {
			return this.MIN_SALARY;
		}

		public BigDecimal MAX_SALARY;

		public BigDecimal getMAX_SALARY() {
			return this.MAX_SALARY;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.JOB_ID == null) ? 0 : this.JOB_ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.JOB_ID == null) {
				if (other.JOB_ID != null)
					return false;

			} else if (!this.JOB_ID.equals(other.JOB_ID))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.JOB_ID = this.JOB_ID;
			other.JOB_TITLE = this.JOB_TITLE;
			other.MIN_SALARY = this.MIN_SALARY;
			other.MAX_SALARY = this.MAX_SALARY;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.JOB_ID = this.JOB_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_oracle_hr_to_file_.length) {
					if (length < 1024
							&& commonByteArray_FIAP_oracle_hr_to_file_.length == 0) {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[1024];
					} else {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_oracle_hr_to_file_, 0,
						length);
				strReturn = new String(commonByteArray_FIAP_oracle_hr_to_file_,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_oracle_hr_to_file_) {

				try {

					int length = 0;

					this.JOB_ID = readString(dis);

					this.JOB_TITLE = readString(dis);

					this.MIN_SALARY = (BigDecimal) dis.readObject();

					this.MAX_SALARY = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.JOB_ID, dos);

				// String

				writeString(this.JOB_TITLE, dos);

				// BigDecimal

				dos.writeObject(this.MIN_SALARY);

				// BigDecimal

				dos.writeObject(this.MAX_SALARY);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("JOB_ID=" + JOB_ID);
			sb.append(",JOB_TITLE=" + JOB_TITLE);
			sb.append(",MIN_SALARY=" + String.valueOf(MIN_SALARY));
			sb.append(",MAX_SALARY=" + String.valueOf(MAX_SALARY));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.JOB_ID, other.JOB_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				row12Struct row12 = new row12Struct();

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row12" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						"/Applications/Talend/workspace/jobs_"
								+ TalendDate.getDate("CCYYMMDD") + ".csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
							.substring(0, fileName_tFileOutputDelimited_5
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",
						fileName_tFileOutputDelimited_5);
				if (filetFileOutputDelimited_5.exists()) {
					throw new RuntimeException(
							"The particular file \""
									+ filetFileOutputDelimited_5
											.getAbsoluteFile()
									+ "\" already exist. If you want to overwrite the file, please uncheck the"
									+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_5 = 0;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /**
				 * Start field
				 * tFileOutputDelimited_5:FIELDSEPARATOR
				 */
				"|"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
				 * Start
				 * field tFileOutputDelimited_5:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null
						&& directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(
							directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}

				filetFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				String zipName_tFileOutputDelimited_5 = fullName_tFileOutputDelimited_5
						+ ".zip";
				java.io.File file_tFileOutputDelimited_5 = new java.io.File(
						zipName_tFileOutputDelimited_5);
				// routines.system.Row
				java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_5 = null;
				java.io.Writer outtFileOutputDelimited_5 = null;

				if (file_tFileOutputDelimited_5.exists()) {
					file_tFileOutputDelimited_5.delete();
				}
				zipOut_tFileOutputDelimited_5 = new java.util.zip.ZipOutputStream(
						new java.io.BufferedOutputStream(
								new java.io.FileOutputStream(
										zipName_tFileOutputDelimited_5)));
				zipOut_tFileOutputDelimited_5
						.putNextEntry(new java.util.zip.ZipEntry(
								filetFileOutputDelimited_5.getName()));
				outtFileOutputDelimited_5 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								zipOut_tFileOutputDelimited_5, "ISO-8859-15"));
				synchronized (multiThreadLockWrite) {
					if (file_tFileOutputDelimited_5.length() == 0) {
						outtFileOutputDelimited_5.write("JOB_ID");
						outtFileOutputDelimited_5
								.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("JOB_TITLE");
						outtFileOutputDelimited_5
								.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("MIN_SALARY");
						outtFileOutputDelimited_5
								.write(OUT_DELIM_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.write("MAX_SALARY");
						outtFileOutputDelimited_5
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
						outtFileOutputDelimited_5.flush();
					}
				}

				resourceMap.put("out_tFileOutputDelimited_5",
						outtFileOutputDelimited_5);
				resourceMap.put("nb_line_tFileOutputDelimited_5",
						nb_line_tFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tJavaRow_5 begin ] start
				 */

				ok_Hash.put("tJavaRow_5", false);
				start_Hash.put("tJavaRow_5", System.currentTimeMillis());

				currentComponent = "tJavaRow_5";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_5 = 0;

				int nb_line_tJavaRow_5 = 0;

				/**
				 * [tJavaRow_5 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				boolean isTimeZoneNull_tDBInput_5 = false;
				boolean isConnectionWrapped_tDBInput_5 = !(conn_tDBInput_5 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_5
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_5 = null;
				if (isConnectionWrapped_tDBInput_5) {
					unwrappedOraConn_tDBInput_5 = conn_tDBInput_5
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_5 != null) {
						isTimeZoneNull_tDBInput_5 = (unwrappedOraConn_tDBInput_5
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_5 = (((oracle.jdbc.OracleConnection) conn_tDBInput_5)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_5) {
					java.sql.Statement stmtGetTZ_tDBInput_5 = conn_tDBInput_5
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_5 = stmtGetTZ_tDBInput_5
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_5 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_5.next()) {
						sessionTimezone_tDBInput_5 = rsGetTZ_tDBInput_5
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_5
							&& unwrappedOraConn_tDBInput_5 != null) {
						unwrappedOraConn_tDBInput_5
								.setSessionTimeZone(sessionTimezone_tDBInput_5);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_5)
								.setSessionTimeZone(sessionTimezone_tDBInput_5);
					}
				}

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5
						.createStatement();

				String dbquery_tDBInput_5 = "SELECT \n  HR.JOBS.JOB_ID, \n  HR.JOBS.JOB_TITLE, \n  HR.JOBS.MIN_SALARY, \n  HR.JOBS.MAX_SALARY\nFROM HR.JOBS";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5
							.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5
							.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5
							.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row5.JOB_ID = null;
						} else {

							row5.JOB_ID = routines.system.JDBCUtil.getString(
									rs_tDBInput_5, 1, false);
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row5.JOB_TITLE = null;
						} else {

							row5.JOB_TITLE = routines.system.JDBCUtil
									.getString(rs_tDBInput_5, 2, false);
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row5.MIN_SALARY = null;
						} else {

							if (rs_tDBInput_5.getObject(3) != null) {
								row5.MIN_SALARY = rs_tDBInput_5
										.getBigDecimal(3);
							} else {

								row5.MIN_SALARY = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row5.MAX_SALARY = null;
						} else {

							if (rs_tDBInput_5.getObject(4) != null) {
								row5.MAX_SALARY = rs_tDBInput_5
										.getBigDecimal(4);
							} else {

								row5.MAX_SALARY = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_5 main ] start
						 */

						currentComponent = "tJavaRow_5";

						// row5
						// row5

						if (execStat) {
							runStat.updateStatOnConnection("row5" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						row12.JOB_ID = row5.JOB_ID;
						row12.JOB_TITLE = row5.JOB_TITLE;
						row12.MIN_SALARY = row5.MIN_SALARY;
						row12.MAX_SALARY = row5.MAX_SALARY;

						nb_line_tJavaRow_5++;

						tos_count_tJavaRow_5++;

						/**
						 * [tJavaRow_5 main ] stop
						 */

						/**
						 * [tJavaRow_5 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_5";

						/**
						 * [tJavaRow_5 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 main ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						// row12
						// row12

						if (execStat) {
							runStat.updateStatOnConnection("row12" + iterateId,
									1, 1);
						}

						StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
						if (row12.JOB_ID != null) {
							sb_tFileOutputDelimited_5.append(row12.JOB_ID);
						}
						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row12.JOB_TITLE != null) {
							sb_tFileOutputDelimited_5.append(row12.JOB_TITLE);
						}
						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row12.MIN_SALARY != null) {
							sb_tFileOutputDelimited_5
									.append(row12.MIN_SALARY.setScale(0,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());
						}
						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_tFileOutputDelimited_5);
						if (row12.MAX_SALARY != null) {
							sb_tFileOutputDelimited_5
									.append(row12.MAX_SALARY.setScale(0,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());
						}
						sb_tFileOutputDelimited_5
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

						synchronized (multiThreadLockWrite) {
							nb_line_tFileOutputDelimited_5++;
							resourceMap.put("nb_line_tFileOutputDelimited_5",
									nb_line_tFileOutputDelimited_5);

							outtFileOutputDelimited_5
									.write(sb_tFileOutputDelimited_5.toString());

						}

						tos_count_tFileOutputDelimited_5++;

						/**
						 * [tFileOutputDelimited_5 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						/**
						 * [tFileOutputDelimited_5 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_5";

						/**
						 * [tFileOutputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_5 process_data_end ] start
						 */

						currentComponent = "tJavaRow_5";

						/**
						 * [tJavaRow_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
				}

				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tJavaRow_5 end ] start
				 */

				currentComponent = "tJavaRow_5";

				globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row5" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_5", true);
				end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				/**
				 * [tJavaRow_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				synchronized (multiThreadLockWrite) {

					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}

					globalMap.put("tFileOutputDelimited_5_NB_LINE",
							nb_line_tFileOutputDelimited_5);
					globalMap.put("tFileOutputDelimited_5_FILE_NAME",
							fileName_tFileOutputDelimited_5);

				}

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row12" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tJavaRow_5 finally ] start
				 */

				currentComponent = "tJavaRow_5";

				/**
				 * [tJavaRow_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					synchronized (multiThreadLockWrite) {

						java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer) resourceMap
								.get("out_tFileOutputDelimited_5");
						if (outtFileOutputDelimited_5 != null) {
							outtFileOutputDelimited_5.flush();
							outtFileOutputDelimited_5.close();
						}

					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_FIAP_oracle_hr_to_file_ = new byte[0];
		static byte[] commonByteArray_FIAP_oracle_hr_to_file_ = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal LOCATION_ID;

		public BigDecimal getLOCATION_ID() {
			return this.LOCATION_ID;
		}

		public String STREET_ADDRESS;

		public String getSTREET_ADDRESS() {
			return this.STREET_ADDRESS;
		}

		public String POSTAL_CODE;

		public String getPOSTAL_CODE() {
			return this.POSTAL_CODE;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String STATE_PROVINCE;

		public String getSTATE_PROVINCE() {
			return this.STATE_PROVINCE;
		}

		public String COUNTRY_ID;

		public String getCOUNTRY_ID() {
			return this.COUNTRY_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.LOCATION_ID == null) ? 0 : this.LOCATION_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.LOCATION_ID == null) {
				if (other.LOCATION_ID != null)
					return false;

			} else if (!this.LOCATION_ID.equals(other.LOCATION_ID))

				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.LOCATION_ID = this.LOCATION_ID;
			other.STREET_ADDRESS = this.STREET_ADDRESS;
			other.POSTAL_CODE = this.POSTAL_CODE;
			other.CITY = this.CITY;
			other.STATE_PROVINCE = this.STATE_PROVINCE;
			other.COUNTRY_ID = this.COUNTRY_ID;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.LOCATION_ID = this.LOCATION_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_oracle_hr_to_file_.length) {
					if (length < 1024
							&& commonByteArray_FIAP_oracle_hr_to_file_.length == 0) {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[1024];
					} else {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_oracle_hr_to_file_, 0,
						length);
				strReturn = new String(commonByteArray_FIAP_oracle_hr_to_file_,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_oracle_hr_to_file_) {

				try {

					int length = 0;

					this.LOCATION_ID = (BigDecimal) dis.readObject();

					this.STREET_ADDRESS = readString(dis);

					this.POSTAL_CODE = readString(dis);

					this.CITY = readString(dis);

					this.STATE_PROVINCE = readString(dis);

					this.COUNTRY_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.LOCATION_ID);

				// String

				writeString(this.STREET_ADDRESS, dos);

				// String

				writeString(this.POSTAL_CODE, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.STATE_PROVINCE, dos);

				// String

				writeString(this.COUNTRY_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LOCATION_ID=" + String.valueOf(LOCATION_ID));
			sb.append(",STREET_ADDRESS=" + STREET_ADDRESS);
			sb.append(",POSTAL_CODE=" + POSTAL_CODE);
			sb.append(",CITY=" + CITY);
			sb.append(",STATE_PROVINCE=" + STATE_PROVINCE);
			sb.append(",COUNTRY_ID=" + COUNTRY_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LOCATION_ID,
					other.LOCATION_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_FIAP_oracle_hr_to_file_ = new byte[0];
		static byte[] commonByteArray_FIAP_oracle_hr_to_file_ = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal LOCATION_ID;

		public BigDecimal getLOCATION_ID() {
			return this.LOCATION_ID;
		}

		public String STREET_ADDRESS;

		public String getSTREET_ADDRESS() {
			return this.STREET_ADDRESS;
		}

		public String POSTAL_CODE;

		public String getPOSTAL_CODE() {
			return this.POSTAL_CODE;
		}

		public String CITY;

		public String getCITY() {
			return this.CITY;
		}

		public String STATE_PROVINCE;

		public String getSTATE_PROVINCE() {
			return this.STATE_PROVINCE;
		}

		public String COUNTRY_ID;

		public String getCOUNTRY_ID() {
			return this.COUNTRY_ID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.LOCATION_ID == null) ? 0 : this.LOCATION_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.LOCATION_ID == null) {
				if (other.LOCATION_ID != null)
					return false;

			} else if (!this.LOCATION_ID.equals(other.LOCATION_ID))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.LOCATION_ID = this.LOCATION_ID;
			other.STREET_ADDRESS = this.STREET_ADDRESS;
			other.POSTAL_CODE = this.POSTAL_CODE;
			other.CITY = this.CITY;
			other.STATE_PROVINCE = this.STATE_PROVINCE;
			other.COUNTRY_ID = this.COUNTRY_ID;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.LOCATION_ID = this.LOCATION_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_oracle_hr_to_file_.length) {
					if (length < 1024
							&& commonByteArray_FIAP_oracle_hr_to_file_.length == 0) {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[1024];
					} else {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_oracle_hr_to_file_, 0,
						length);
				strReturn = new String(commonByteArray_FIAP_oracle_hr_to_file_,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_oracle_hr_to_file_) {

				try {

					int length = 0;

					this.LOCATION_ID = (BigDecimal) dis.readObject();

					this.STREET_ADDRESS = readString(dis);

					this.POSTAL_CODE = readString(dis);

					this.CITY = readString(dis);

					this.STATE_PROVINCE = readString(dis);

					this.COUNTRY_ID = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.LOCATION_ID);

				// String

				writeString(this.STREET_ADDRESS, dos);

				// String

				writeString(this.POSTAL_CODE, dos);

				// String

				writeString(this.CITY, dos);

				// String

				writeString(this.STATE_PROVINCE, dos);

				// String

				writeString(this.COUNTRY_ID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LOCATION_ID=" + String.valueOf(LOCATION_ID));
			sb.append(",STREET_ADDRESS=" + STREET_ADDRESS);
			sb.append(",POSTAL_CODE=" + POSTAL_CODE);
			sb.append(",CITY=" + CITY);
			sb.append(",STATE_PROVINCE=" + STATE_PROVINCE);
			sb.append(",COUNTRY_ID=" + COUNTRY_ID);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LOCATION_ID,
					other.LOCATION_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				row13Struct row13 = new row13Struct();

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row13" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						"/Applications/Talend/workspace/locations_"
								+ TalendDate.getDate("CCYYMMDD") + ".csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
							.substring(0, fileName_tFileOutputDelimited_6
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",
						fileName_tFileOutputDelimited_6);
				if (filetFileOutputDelimited_6.exists()) {
					throw new RuntimeException(
							"The particular file \""
									+ filetFileOutputDelimited_6
											.getAbsoluteFile()
									+ "\" already exist. If you want to overwrite the file, please uncheck the"
									+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_6 = 0;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /**
				 * Start field
				 * tFileOutputDelimited_6:FIELDSEPARATOR
				 */
				"|"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
				 * Start
				 * field tFileOutputDelimited_6:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null
						&& directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(
							directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				filetFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				String zipName_tFileOutputDelimited_6 = fullName_tFileOutputDelimited_6
						+ ".zip";
				java.io.File file_tFileOutputDelimited_6 = new java.io.File(
						zipName_tFileOutputDelimited_6);
				// routines.system.Row
				java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_6 = null;
				java.io.Writer outtFileOutputDelimited_6 = null;

				if (file_tFileOutputDelimited_6.exists()) {
					file_tFileOutputDelimited_6.delete();
				}
				zipOut_tFileOutputDelimited_6 = new java.util.zip.ZipOutputStream(
						new java.io.BufferedOutputStream(
								new java.io.FileOutputStream(
										zipName_tFileOutputDelimited_6)));
				zipOut_tFileOutputDelimited_6
						.putNextEntry(new java.util.zip.ZipEntry(
								filetFileOutputDelimited_6.getName()));
				outtFileOutputDelimited_6 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								zipOut_tFileOutputDelimited_6, "ISO-8859-15"));
				synchronized (multiThreadLockWrite) {
					if (file_tFileOutputDelimited_6.length() == 0) {
						outtFileOutputDelimited_6.write("LOCATION_ID");
						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);
						outtFileOutputDelimited_6.write("STREET_ADDRESS");
						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);
						outtFileOutputDelimited_6.write("POSTAL_CODE");
						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);
						outtFileOutputDelimited_6.write("CITY");
						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);
						outtFileOutputDelimited_6.write("STATE_PROVINCE");
						outtFileOutputDelimited_6
								.write(OUT_DELIM_tFileOutputDelimited_6);
						outtFileOutputDelimited_6.write("COUNTRY_ID");
						outtFileOutputDelimited_6
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);
						outtFileOutputDelimited_6.flush();
					}
				}

				resourceMap.put("out_tFileOutputDelimited_6",
						outtFileOutputDelimited_6);
				resourceMap.put("nb_line_tFileOutputDelimited_6",
						nb_line_tFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tJavaRow_6 begin ] start
				 */

				ok_Hash.put("tJavaRow_6", false);
				start_Hash.put("tJavaRow_6", System.currentTimeMillis());

				currentComponent = "tJavaRow_6";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_6 = 0;

				int nb_line_tJavaRow_6 = 0;

				/**
				 * [tJavaRow_6 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				boolean isTimeZoneNull_tDBInput_6 = false;
				boolean isConnectionWrapped_tDBInput_6 = !(conn_tDBInput_6 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_6
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_6 = null;
				if (isConnectionWrapped_tDBInput_6) {
					unwrappedOraConn_tDBInput_6 = conn_tDBInput_6
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_6 != null) {
						isTimeZoneNull_tDBInput_6 = (unwrappedOraConn_tDBInput_6
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_6 = (((oracle.jdbc.OracleConnection) conn_tDBInput_6)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_6) {
					java.sql.Statement stmtGetTZ_tDBInput_6 = conn_tDBInput_6
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_6 = stmtGetTZ_tDBInput_6
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_6 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_6.next()) {
						sessionTimezone_tDBInput_6 = rsGetTZ_tDBInput_6
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_6
							&& unwrappedOraConn_tDBInput_6 != null) {
						unwrappedOraConn_tDBInput_6
								.setSessionTimeZone(sessionTimezone_tDBInput_6);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_6)
								.setSessionTimeZone(sessionTimezone_tDBInput_6);
					}
				}

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6
						.createStatement();

				String dbquery_tDBInput_6 = "SELECT \n  HR.LOCATIONS.LOCATION_ID, \n  HR.LOCATIONS.STREET_ADDRESS, \n  HR.LOCATIONS.POSTAL_CODE, \n  HR.LOCATIONS.CITY, "
						+ "\n  HR.LOCATIONS.STATE_PROVINCE, \n  HR.LOCATIONS.COUNTRY_ID\nFROM HR.LOCATIONS";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6
							.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6
							.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6
							.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row6.LOCATION_ID = null;
						} else {

							if (rs_tDBInput_6.getObject(1) != null) {
								row6.LOCATION_ID = rs_tDBInput_6
										.getBigDecimal(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row6.STREET_ADDRESS = null;
						} else {

							row6.STREET_ADDRESS = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 2, false);
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row6.POSTAL_CODE = null;
						} else {

							row6.POSTAL_CODE = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 3, false);
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row6.CITY = null;
						} else {

							row6.CITY = routines.system.JDBCUtil.getString(
									rs_tDBInput_6, 4, false);
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row6.STATE_PROVINCE = null;
						} else {

							row6.STATE_PROVINCE = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 5, false);
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row6.COUNTRY_ID = null;
						} else {

							row6.COUNTRY_ID = routines.system.JDBCUtil
									.getString(rs_tDBInput_6, 6, false);
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_6 main ] start
						 */

						currentComponent = "tJavaRow_6";

						// row6
						// row6

						if (execStat) {
							runStat.updateStatOnConnection("row6" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						row13.LOCATION_ID = row6.LOCATION_ID;
						row13.STREET_ADDRESS = row6.STREET_ADDRESS;
						row13.POSTAL_CODE = row6.POSTAL_CODE;
						row13.CITY = row6.CITY;
						row13.STATE_PROVINCE = row6.STATE_PROVINCE;
						row13.COUNTRY_ID = row6.COUNTRY_ID;

						nb_line_tJavaRow_6++;

						tos_count_tJavaRow_6++;

						/**
						 * [tJavaRow_6 main ] stop
						 */

						/**
						 * [tJavaRow_6 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_6";

						/**
						 * [tJavaRow_6 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_6 main ] start
						 */

						currentComponent = "tFileOutputDelimited_6";

						// row13
						// row13

						if (execStat) {
							runStat.updateStatOnConnection("row13" + iterateId,
									1, 1);
						}

						StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
						if (row13.LOCATION_ID != null) {
							sb_tFileOutputDelimited_6
									.append(row13.LOCATION_ID.setScale(0,
											java.math.RoundingMode.HALF_UP)
											.toPlainString());
						}
						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row13.STREET_ADDRESS != null) {
							sb_tFileOutputDelimited_6
									.append(row13.STREET_ADDRESS);
						}
						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row13.POSTAL_CODE != null) {
							sb_tFileOutputDelimited_6.append(row13.POSTAL_CODE);
						}
						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row13.CITY != null) {
							sb_tFileOutputDelimited_6.append(row13.CITY);
						}
						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row13.STATE_PROVINCE != null) {
							sb_tFileOutputDelimited_6
									.append(row13.STATE_PROVINCE);
						}
						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row13.COUNTRY_ID != null) {
							sb_tFileOutputDelimited_6.append(row13.COUNTRY_ID);
						}
						sb_tFileOutputDelimited_6
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

						synchronized (multiThreadLockWrite) {
							nb_line_tFileOutputDelimited_6++;
							resourceMap.put("nb_line_tFileOutputDelimited_6",
									nb_line_tFileOutputDelimited_6);

							outtFileOutputDelimited_6
									.write(sb_tFileOutputDelimited_6.toString());

						}

						tos_count_tFileOutputDelimited_6++;

						/**
						 * [tFileOutputDelimited_6 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_6 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_6";

						/**
						 * [tFileOutputDelimited_6 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_6 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_6";

						/**
						 * [tFileOutputDelimited_6 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_6 process_data_end ] start
						 */

						currentComponent = "tJavaRow_6";

						/**
						 * [tJavaRow_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
				}

				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tJavaRow_6 end ] start
				 */

				currentComponent = "tJavaRow_6";

				globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row6" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_6", true);
				end_Hash.put("tJavaRow_6", System.currentTimeMillis());

				/**
				 * [tJavaRow_6 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				synchronized (multiThreadLockWrite) {

					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}

					globalMap.put("tFileOutputDelimited_6_NB_LINE",
							nb_line_tFileOutputDelimited_6);
					globalMap.put("tFileOutputDelimited_6_FILE_NAME",
							fileName_tFileOutputDelimited_6);

				}

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row13" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tJavaRow_6 finally ] start
				 */

				currentComponent = "tJavaRow_6";

				/**
				 * [tJavaRow_6 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					synchronized (multiThreadLockWrite) {

						java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer) resourceMap
								.get("out_tFileOutputDelimited_6");
						if (outtFileOutputDelimited_6 != null) {
							outtFileOutputDelimited_6.flush();
							outtFileOutputDelimited_6.close();
						}

					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_FIAP_oracle_hr_to_file_ = new byte[0];
		static byte[] commonByteArray_FIAP_oracle_hr_to_file_ = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal REGION_ID;

		public BigDecimal getREGION_ID() {
			return this.REGION_ID;
		}

		public String REGION_NAME;

		public String getREGION_NAME() {
			return this.REGION_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.REGION_ID == null) ? 0 : this.REGION_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.REGION_ID == null) {
				if (other.REGION_ID != null)
					return false;

			} else if (!this.REGION_ID.equals(other.REGION_ID))

				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.REGION_ID = this.REGION_ID;
			other.REGION_NAME = this.REGION_NAME;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.REGION_ID = this.REGION_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_oracle_hr_to_file_.length) {
					if (length < 1024
							&& commonByteArray_FIAP_oracle_hr_to_file_.length == 0) {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[1024];
					} else {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_oracle_hr_to_file_, 0,
						length);
				strReturn = new String(commonByteArray_FIAP_oracle_hr_to_file_,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_oracle_hr_to_file_) {

				try {

					int length = 0;

					this.REGION_ID = (BigDecimal) dis.readObject();

					this.REGION_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.REGION_ID);

				// String

				writeString(this.REGION_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REGION_ID=" + String.valueOf(REGION_ID));
			sb.append(",REGION_NAME=" + REGION_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.REGION_ID, other.REGION_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_FIAP_oracle_hr_to_file_ = new byte[0];
		static byte[] commonByteArray_FIAP_oracle_hr_to_file_ = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal REGION_ID;

		public BigDecimal getREGION_ID() {
			return this.REGION_ID;
		}

		public String REGION_NAME;

		public String getREGION_NAME() {
			return this.REGION_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.REGION_ID == null) ? 0 : this.REGION_ID
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.REGION_ID == null) {
				if (other.REGION_ID != null)
					return false;

			} else if (!this.REGION_ID.equals(other.REGION_ID))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.REGION_ID = this.REGION_ID;
			other.REGION_NAME = this.REGION_NAME;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.REGION_ID = this.REGION_ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FIAP_oracle_hr_to_file_.length) {
					if (length < 1024
							&& commonByteArray_FIAP_oracle_hr_to_file_.length == 0) {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[1024];
					} else {
						commonByteArray_FIAP_oracle_hr_to_file_ = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FIAP_oracle_hr_to_file_, 0,
						length);
				strReturn = new String(commonByteArray_FIAP_oracle_hr_to_file_,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FIAP_oracle_hr_to_file_) {

				try {

					int length = 0;

					this.REGION_ID = (BigDecimal) dis.readObject();

					this.REGION_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.REGION_ID);

				// String

				writeString(this.REGION_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("REGION_ID=" + String.valueOf(REGION_ID));
			sb.append(",REGION_NAME=" + REGION_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.REGION_ID, other.REGION_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				row14Struct row14 = new row14Struct();

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row14" + iterateId, 0,
								0);

					}
				}

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(
						"/Applications/Talend/workspace/regions_"
								+ TalendDate.getDate("CCYYMMDD") + ".csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
							.substring(0, fileName_tFileOutputDelimited_7
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",
						fileName_tFileOutputDelimited_7);
				if (filetFileOutputDelimited_7.exists()) {
					throw new RuntimeException(
							"The particular file \""
									+ filetFileOutputDelimited_7
											.getAbsoluteFile()
									+ "\" already exist. If you want to overwrite the file, please uncheck the"
									+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_7 = 0;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				final String OUT_DELIM_tFileOutputDelimited_7 = /**
				 * Start field
				 * tFileOutputDelimited_7:FIELDSEPARATOR
				 */
				"|"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /**
				 * Start
				 * field tFileOutputDelimited_7:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null
						&& directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(
							directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {
						dir_tFileOutputDelimited_7.mkdirs();
					}
				}

				filetFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				String zipName_tFileOutputDelimited_7 = fullName_tFileOutputDelimited_7
						+ ".zip";
				java.io.File file_tFileOutputDelimited_7 = new java.io.File(
						zipName_tFileOutputDelimited_7);
				// routines.system.Row
				java.util.zip.ZipOutputStream zipOut_tFileOutputDelimited_7 = null;
				java.io.Writer outtFileOutputDelimited_7 = null;

				if (file_tFileOutputDelimited_7.exists()) {
					file_tFileOutputDelimited_7.delete();
				}
				zipOut_tFileOutputDelimited_7 = new java.util.zip.ZipOutputStream(
						new java.io.BufferedOutputStream(
								new java.io.FileOutputStream(
										zipName_tFileOutputDelimited_7)));
				zipOut_tFileOutputDelimited_7
						.putNextEntry(new java.util.zip.ZipEntry(
								filetFileOutputDelimited_7.getName()));
				outtFileOutputDelimited_7 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								zipOut_tFileOutputDelimited_7, "ISO-8859-15"));
				synchronized (multiThreadLockWrite) {
					if (file_tFileOutputDelimited_7.length() == 0) {
						outtFileOutputDelimited_7.write("REGION_ID");
						outtFileOutputDelimited_7
								.write(OUT_DELIM_tFileOutputDelimited_7);
						outtFileOutputDelimited_7.write("REGION_NAME");
						outtFileOutputDelimited_7
								.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);
						outtFileOutputDelimited_7.flush();
					}
				}

				resourceMap.put("out_tFileOutputDelimited_7",
						outtFileOutputDelimited_7);
				resourceMap.put("nb_line_tFileOutputDelimited_7",
						nb_line_tFileOutputDelimited_7);

				/**
				 * [tFileOutputDelimited_7 begin ] stop
				 */

				/**
				 * [tJavaRow_7 begin ] start
				 */

				ok_Hash.put("tJavaRow_7", false);
				start_Hash.put("tJavaRow_7", System.currentTimeMillis());

				currentComponent = "tJavaRow_7";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);

					}
				}

				int tos_count_tJavaRow_7 = 0;

				int nb_line_tJavaRow_7 = 0;

				/**
				 * [tJavaRow_7 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				conn_tDBInput_7 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");
				boolean isTimeZoneNull_tDBInput_7 = false;
				boolean isConnectionWrapped_tDBInput_7 = !(conn_tDBInput_7 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_7
								.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tDBInput_7 = null;
				if (isConnectionWrapped_tDBInput_7) {
					unwrappedOraConn_tDBInput_7 = conn_tDBInput_7
							.unwrap(oracle.jdbc.OracleConnection.class);
					if (unwrappedOraConn_tDBInput_7 != null) {
						isTimeZoneNull_tDBInput_7 = (unwrappedOraConn_tDBInput_7
								.getSessionTimeZone() == null);
					}
				} else {
					isTimeZoneNull_tDBInput_7 = (((oracle.jdbc.OracleConnection) conn_tDBInput_7)
							.getSessionTimeZone() == null);
				}

				if (isTimeZoneNull_tDBInput_7) {
					java.sql.Statement stmtGetTZ_tDBInput_7 = conn_tDBInput_7
							.createStatement();
					java.sql.ResultSet rsGetTZ_tDBInput_7 = stmtGetTZ_tDBInput_7
							.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tDBInput_7 = java.util.TimeZone
							.getDefault().getID();
					while (rsGetTZ_tDBInput_7.next()) {
						sessionTimezone_tDBInput_7 = rsGetTZ_tDBInput_7
								.getString(1);
					}
					if (isConnectionWrapped_tDBInput_7
							&& unwrappedOraConn_tDBInput_7 != null) {
						unwrappedOraConn_tDBInput_7
								.setSessionTimeZone(sessionTimezone_tDBInput_7);
					} else {
						((oracle.jdbc.OracleConnection) conn_tDBInput_7)
								.setSessionTimeZone(sessionTimezone_tDBInput_7);
					}
				}

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7
						.createStatement();

				String dbquery_tDBInput_7 = "SELECT \n  HR.REGIONS.REGION_ID, \n  HR.REGIONS.REGION_NAME\nFROM HR.REGIONS";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7
							.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7
							.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7
							.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row7.REGION_ID = null;
						} else {

							if (rs_tDBInput_7.getObject(1) != null) {
								row7.REGION_ID = rs_tDBInput_7.getBigDecimal(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row7.REGION_NAME = null;
						} else {

							row7.REGION_NAME = routines.system.JDBCUtil
									.getString(rs_tDBInput_7, 2, false);
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tJavaRow_7 main ] start
						 */

						currentComponent = "tJavaRow_7";

						// row7
						// row7

						if (execStat) {
							runStat.updateStatOnConnection("row7" + iterateId,
									1, 1);
						}

						// Code generated according to input schema and output
						// schema
						row14.REGION_ID = row7.REGION_ID;
						row14.REGION_NAME = row7.REGION_NAME;

						nb_line_tJavaRow_7++;

						tos_count_tJavaRow_7++;

						/**
						 * [tJavaRow_7 main ] stop
						 */

						/**
						 * [tJavaRow_7 process_data_begin ] start
						 */

						currentComponent = "tJavaRow_7";

						/**
						 * [tJavaRow_7 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 main ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						// row14
						// row14

						if (execStat) {
							runStat.updateStatOnConnection("row14" + iterateId,
									1, 1);
						}

						StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
						if (row14.REGION_ID != null) {
							sb_tFileOutputDelimited_7.append(row14.REGION_ID
									.toPlainString());
						}
						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_tFileOutputDelimited_7);
						if (row14.REGION_NAME != null) {
							sb_tFileOutputDelimited_7.append(row14.REGION_NAME);
						}
						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);

						synchronized (multiThreadLockWrite) {
							nb_line_tFileOutputDelimited_7++;
							resourceMap.put("nb_line_tFileOutputDelimited_7",
									nb_line_tFileOutputDelimited_7);

							outtFileOutputDelimited_7
									.write(sb_tFileOutputDelimited_7.toString());

						}

						tos_count_tFileOutputDelimited_7++;

						/**
						 * [tFileOutputDelimited_7 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						/**
						 * [tFileOutputDelimited_7 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						/**
						 * [tFileOutputDelimited_7 process_data_end ] stop
						 */

						/**
						 * [tJavaRow_7 process_data_end ] start
						 */

						currentComponent = "tJavaRow_7";

						/**
						 * [tJavaRow_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
				}

				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tJavaRow_7 end ] start
				 */

				currentComponent = "tJavaRow_7";

				globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);
				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row7" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tJavaRow_7", true);
				end_Hash.put("tJavaRow_7", System.currentTimeMillis());

				/**
				 * [tJavaRow_7 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 end ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				synchronized (multiThreadLockWrite) {

					if (outtFileOutputDelimited_7 != null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}

					globalMap.put("tFileOutputDelimited_7_NB_LINE",
							nb_line_tFileOutputDelimited_7);
					globalMap.put("tFileOutputDelimited_7_FILE_NAME",
							fileName_tFileOutputDelimited_7);

				}

				resourceMap.put("finish_tFileOutputDelimited_7", true);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row14" + iterateId, 2,
								0);
					}
				}

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tJavaRow_7 finally ] start
				 */

				currentComponent = "tJavaRow_7";

				/**
				 * [tJavaRow_7 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (resourceMap.get("finish_tFileOutputDelimited_7") == null) {

					synchronized (multiThreadLockWrite) {

						java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer) resourceMap
								.get("out_tFileOutputDelimited_7");
						if (outtFileOutputDelimited_7 != null) {
							outtFileOutputDelimited_7.flush();
							outtFileOutputDelimited_7.close();
						}

					}

				}

				/**
				 * [tFileOutputDelimited_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap
						.get("conn_tDBConnection_1");

				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {

					conn_tDBClose_1.close();

				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				/**
				 * [tDBClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:oracle:thin:@" + "localhost"
						+ ":" + "49161" + ":" + "XE";
				globalMap.put("connectionType_" + "tDBConnection_1",
						"ORACLE_SID");
				String dbUser_tDBConnection_1 = "system";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("367f42f12721abb8");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(
						url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}
				globalMap.put("host_" + "tDBConnection_1", "localhost");
				globalMap.put("port_" + "tDBConnection_1", "49161");
				globalMap.put("dbname_" + "tDBConnection_1", "XE");

				globalMap
						.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);
				globalMap.put("dbschema_" + "tDBConnection_1", "");
				globalMap.put("username_" + "tDBConnection_1", "system");
				globalMap.put("password_" + "tDBConnection_1",
						dbPwd_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final oracle_hr_to_file_ oracle_hr_to_file_Class = new oracle_hr_to_file_();

		int exitCode = oracle_hr_to_file_Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = oracle_hr_to_file_.class
					.getClassLoader().getResourceAsStream(
							"fiap/oracle_hr_to_file__0_1/contexts/"
									+ contextStr + ".properties");
			if (inContext == null) {
				inContext = oracle_hr_to_file_.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBInput_1Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tDBInput_1) {
					globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

					e_tDBInput_1.printStackTrace();

				} catch (java.lang.Error e_tDBInput_1) {
					globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tDBInput_1;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBInput_2Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tDBInput_2) {
					globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

					e_tDBInput_2.printStackTrace();

				} catch (java.lang.Error e_tDBInput_2) {
					globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tDBInput_2;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBInput_3Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tDBInput_3) {
					globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

					e_tDBInput_3.printStackTrace();

				} catch (java.lang.Error e_tDBInput_3) {
					globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tDBInput_3;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBInput_4Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tDBInput_4) {
					globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

					e_tDBInput_4.printStackTrace();

				} catch (java.lang.Error e_tDBInput_4) {
					globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tDBInput_4;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBInput_5Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tDBInput_5) {
					globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);

					e_tDBInput_5.printStackTrace();

				} catch (java.lang.Error e_tDBInput_5) {
					globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tDBInput_5;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBInput_6Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tDBInput_6) {
					globalMap.put("tDBInput_6_SUBPROCESS_STATE", -1);

					e_tDBInput_6.printStackTrace();

				} catch (java.lang.Error e_tDBInput_6) {
					globalMap.put("tDBInput_6_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tDBInput_6;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tDBInput_7Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get())
							.get("status"))) {
						((java.util.Map) threadLocal.get())
								.put("status", "end");
					}
				} catch (TalendException e_tDBInput_7) {
					globalMap.put("tDBInput_7_SUBPROCESS_STATE", -1);

					e_tDBInput_7.printStackTrace();

				} catch (java.lang.Error e_tDBInput_7) {
					globalMap.put("tDBInput_7_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get())
							.put("status", "failure");
					throw e_tDBInput_7;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
							.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal
							.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null
								|| localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get())
							.get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : oracle_hr_to_file_");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1",
				globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 274170 characters generated by Talend Open Studio for Big Data on the
 * September 16, 2019 6:07:16 PM BRT
 ************************************************************************************************/
